[
    {
        "id": "76efdb70933209ac",
        "type": "tab",
        "label": "Monittoring",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8b4c08f2a705dd79",
        "type": "tab",
        "label": "StressTest_V1.0",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a922dcbcf6a2e8c4",
        "type": "tab",
        "label": "GatlingTest_V2.0",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3ddecfbaabd60ba5",
        "type": "tab",
        "label": "Gatling_V3.0",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "aa36cc7d7fa5cea5",
        "type": "tab",
        "label": "PDF",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6960c25d19217e0b",
        "type": "tab",
        "label": "Gatling_V3.0_Monittoring",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3572c39984e6901e",
        "type": "tab",
        "label": "GenerateChart",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d3f49513ee177da2",
        "type": "tab",
        "label": "JSON_V3.0",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4e666803b8f3f742",
        "type": "subflow",
        "name": "MQTT Period",
        "info": "## Entrée :\nLe sous-flux accepte des messages MQTT entrants sur un sujet spécifié. Le sujet MQTT est défini par l'utilisateur lorsqu'il utilise le sous-flux :\n- msg.topic : Le topic MQTT à écouter.\n- msg.delay : La période durant lquelle on veut écouter le topic.\n## Sortie :\nAprès une période d'écoute définie par l'utilisateur (ou un délai par défaut), le sous-flux renvoie un message contenant les informations suivantes :\n- msg.payload : Un tableau (array) contenant toutes les valeurs numériques reçues sur le sujet MQTT pendant la période d'écoute.\n- msg.moyenne : La moyenne des valeurs numériques. Cette moyenne est calculée avec précision, arrondie à deux chiffres après la virgule, et au multiple de 0.05 le plus proche.\n- msg.topic : Le sujet MQTT d'origine auquel le sous-flux était abonné.\n\n## Utilisation :\n\n- Un utilisateur connecte le sous-flux à un nœud MQTT.\n- L'utilisateur configure le sujet MQTT auquel il souhaite s'abonner en fournissant un message avec la propriété msg.topic définie sur ce sujet.\n- Le sous-flux écoute les messages sur ce sujet pendant la durée spécifiée (ou un délai par défaut).\n- Pendant cette période, il recueille toutes les valeurs numériques reçues sur ce sujet.\n- À la fin de la période d'écoute, il calcule la moyenne de ces valeurs numériques.\n- Le résultat est renvoyé sous forme de message avec les propriétés décrites ci-dessus.\n\nAinsi, ce sous-flux permet aux utilisateurs de surveiller un sujet MQTT pendant un certain temps, de collecter des données numériques à partir de ce sujet, de calculer leur moyenne, et de renvoyer ces informations pour une utilisation ultérieure. Le sous-flux peut être configuré pour utiliser un délai par défaut ou pour accepter un délai spécifique fourni par l'utilisateur.",
        "category": "",
        "in": [
            {
                "x": 120,
                "y": 300,
                "wires": [
                    {
                        "id": "cb799b325f94ca56"
                    },
                    {
                        "id": "16c339249ebcf2fa"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 960,
                "y": 300,
                "wires": [
                    {
                        "id": "01d85364e4add5a9",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {
            "version": "1.0.0",
            "license": "GPL-3.0"
        },
        "color": "#D7D7A0",
        "icon": "node-red/status.svg"
    },
    {
        "id": "e42b4edae71dedd4",
        "type": "ui_tab",
        "name": "Monittoring",
        "icon": "warning",
        "order": 5,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "0838c35150fe8e4b",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#a51d2d",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#a51d2d",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#a51d2d",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#db3347",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#a51d2d",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Curius T-Rex",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "bddfc83fd54ae92b",
        "type": "ui_group",
        "name": "Data",
        "tab": "e42b4edae71dedd4",
        "order": 1,
        "disp": true,
        "width": 22,
        "collapse": false,
        "className": ""
    },
    {
        "id": "173c4031bd3a25c0",
        "type": "ina-sensor-manager",
        "address": "0x40",
        "delay": "250",
        "ohms": "0.01",
        "customResistor": false
    },
    {
        "id": "837441be757b92ac",
        "type": "ui_group",
        "name": "Monitorring Volt",
        "tab": "e42b4edae71dedd4",
        "order": 2,
        "disp": true,
        "width": 22,
        "collapse": false,
        "className": ""
    },
    {
        "id": "12e50ad63920a21c",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "65e942c300ec1ce1",
        "type": "ui_group",
        "name": "Monittoring Nidus",
        "tab": "e42b4edae71dedd4",
        "order": 3,
        "disp": true,
        "width": 22,
        "collapse": false,
        "className": ""
    },
    {
        "id": "160e81fb.f1c86e",
        "type": "ui_group",
        "name": "Fichiers",
        "tab": "b63d1f91.68095",
        "order": 1,
        "disp": false,
        "width": "18",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b63d1f91.68095",
        "type": "ui_tab",
        "name": "StressTest_V1.0",
        "icon": "error_outline",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "ae336b538b957769",
        "type": "mqtt-plus-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": ""
    },
    {
        "id": "1bfe03ef2a50fdb4",
        "type": "ui_tab",
        "name": "Gatling_PoC_V2.0",
        "icon": "error",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "0fa13b0866bdba70",
        "type": "ui_link",
        "name": "Git",
        "link": "https://mylos.cifom.ch/gitlab/ToblerC/banc-de-mesures-de-la-consommation-electrique",
        "icon": "github-circle",
        "target": "newtab",
        "order": 6
    },
    {
        "id": "7a02dc45cdd22958",
        "type": "ui_group",
        "name": "Fichier",
        "tab": "1bfe03ef2a50fdb4",
        "order": 1,
        "disp": false,
        "width": "18",
        "collapse": false,
        "className": ""
    },
    {
        "id": "863bf26610ae079d",
        "type": "ui_spacer",
        "z": "a922dcbcf6a2e8c4",
        "name": "spacer",
        "group": "7a02dc45cdd22958",
        "order": 7,
        "width": 7,
        "height": 1
    },
    {
        "id": "2bb26d4b3feb8061",
        "type": "ui_spacer",
        "z": "a922dcbcf6a2e8c4",
        "name": "spacer",
        "group": "7a02dc45cdd22958",
        "order": 9,
        "width": 7,
        "height": 1
    },
    {
        "id": "e48c666f6233f306",
        "type": "ui_spacer",
        "z": "a922dcbcf6a2e8c4",
        "name": "spacer",
        "group": "7a02dc45cdd22958",
        "order": 10,
        "width": 7,
        "height": 1
    },
    {
        "id": "0929cb01ac4bcd60",
        "type": "ui_spacer",
        "z": "a922dcbcf6a2e8c4",
        "name": "spacer",
        "group": "7a02dc45cdd22958",
        "order": 11,
        "width": 7,
        "height": 1
    },
    {
        "id": "de079e90a5b6fc2a",
        "type": "ui_tab",
        "name": "Gatling_V3.0",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "7db53a0c4211bca9",
        "type": "ui_group",
        "name": "Fichier",
        "tab": "de079e90a5b6fc2a",
        "order": 1,
        "disp": true,
        "width": "20",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a73ce2171360eee8",
        "type": "ui_group",
        "name": "INA219",
        "tab": "de079e90a5b6fc2a",
        "order": 2,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "17f190382a6c603e",
        "type": "ui_group",
        "name": "Volt",
        "tab": "de079e90a5b6fc2a",
        "order": 3,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "12f36826dc9bd0e6",
        "type": "ui_group",
        "name": "Nidus",
        "tab": "de079e90a5b6fc2a",
        "order": 4,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a62adee64de07498",
        "type": "ui_spacer",
        "z": "6960c25d19217e0b",
        "name": "spacer",
        "group": "7db53a0c4211bca9",
        "order": 7,
        "width": 7,
        "height": 1
    },
    {
        "id": "689a16d266ef60cd",
        "type": "ui_spacer",
        "z": "6960c25d19217e0b",
        "name": "spacer",
        "group": "7db53a0c4211bca9",
        "order": 9,
        "width": 8,
        "height": 1
    },
    {
        "id": "89e9b086dfc4f7c5",
        "type": "ui_spacer",
        "z": "6960c25d19217e0b",
        "name": "spacer",
        "group": "7db53a0c4211bca9",
        "order": 10,
        "width": 7,
        "height": 1
    },
    {
        "id": "95669cd0f83a45ed",
        "type": "ui_spacer",
        "z": "6960c25d19217e0b",
        "name": "spacer",
        "group": "7db53a0c4211bca9",
        "order": 11,
        "width": 8,
        "height": 1
    },
    {
        "id": "e4a2f7f90a33741d",
        "type": "ui_tab",
        "name": "JSON_V3.0",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "9848c7d7e57dbdee",
        "type": "ui_group",
        "name": "JSON",
        "tab": "e4a2f7f90a33741d",
        "order": 1,
        "disp": true,
        "width": "20",
        "collapse": false,
        "className": ""
    },
    {
        "id": "943ce04091291544",
        "type": "delay",
        "z": "4e666803b8f3f742",
        "name": "",
        "pauseType": "delayv",
        "timeout": "15",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 280,
        "y": 180,
        "wires": [
            [
                "cb799b325f94ca56",
                "347c2af536033cee"
            ]
        ]
    },
    {
        "id": "cb799b325f94ca56",
        "type": "mqtt-plus in",
        "z": "4e666803b8f3f742",
        "name": "Volt/CPU",
        "topic": "/",
        "qos": "2",
        "broker": "ae336b538b957769",
        "x": 460,
        "y": 300,
        "wires": [
            [
                "0160ad3d392208a8"
            ],
            []
        ]
    },
    {
        "id": "0160ad3d392208a8",
        "type": "join",
        "z": "4e666803b8f3f742",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 630,
        "y": 300,
        "wires": [
            [
                "01d85364e4add5a9"
            ]
        ]
    },
    {
        "id": "01d85364e4add5a9",
        "type": "function",
        "z": "4e666803b8f3f742",
        "name": "Rename",
        "func": "// Définir le sujet du message\nmsg.topic = msg._topic\n\n// Vérifier si le tableau payload existe et n'est pas vide\nif (msg.payload && Array.isArray(msg.payload) && msg.payload.length > 0) {\n    // Convertir les valeurs en chaînes de caractères en nombres entiers\n    var numericValues = msg.payload.map(function (value) {\n        return parseInt(value, 10); // 10 indique la base décimale\n    }).filter(function (value) {\n        return !isNaN(value); // Filtrer les valeurs non numériques\n    });\n\n    // Vérifier si des valeurs numériques ont été trouvées\n    if (numericValues.length > 0) {\n        // Calculer la somme des valeurs numériques dans le tableau\n        var sum = numericValues.reduce(function (acc, value) {\n            return acc + value;\n        }, 0);\n\n        // Calculer la moyenne en divisant la somme par le nombre d'éléments\n        var moyenne = sum / numericValues.length;\n\n        // Arrondir la moyenne à deux chiffres après la virgule et au multiple de 0.05 le plus proche\n        moyenne = Math.round(moyenne * 20) / 20;\n\n        // Ajouter la moyenne au message\n        msg.moyenne = moyenne.toFixed(2);\n    } else {\n        // Si aucune valeur numérique n'a été trouvée, définir la moyenne à 0\n        msg.moyenne = \"0.00\";\n    }\n} else {\n    // Si le tableau est vide ou n'existe pas, définir la moyenne à 0\n    msg.moyenne.volt.benchmark.cpu = \"0.00\";\n}\n\n// Renvoyer le message modifié\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "16c339249ebcf2fa",
        "type": "change",
        "z": "4e666803b8f3f742",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "/",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 270,
        "y": 220,
        "wires": [
            [
                "943ce04091291544"
            ]
        ]
    },
    {
        "id": "347c2af536033cee",
        "type": "change",
        "z": "4e666803b8f3f742",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "complete",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 180,
        "wires": [
            [
                "0160ad3d392208a8"
            ]
        ]
    },
    {
        "id": "3f2698910c317457",
        "type": "ui_text",
        "z": "76efdb70933209ac",
        "group": "bddfc83fd54ae92b",
        "order": 2,
        "width": 8,
        "height": 2,
        "name": "",
        "label": "MillliVolt",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 680,
        "y": 280,
        "wires": []
    },
    {
        "id": "e8334464abeb8df9",
        "type": "ui_text",
        "z": "76efdb70933209ac",
        "group": "bddfc83fd54ae92b",
        "order": 1,
        "width": 7,
        "height": 2,
        "name": "",
        "label": "MiliAmp",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 680,
        "y": 360,
        "wires": []
    },
    {
        "id": "0f040225cb054e9d",
        "type": "ina-sensor",
        "z": "76efdb70933209ac",
        "name": "",
        "handle": "173c4031bd3a25c0",
        "x": 170,
        "y": 360,
        "wires": [
            [
                "06aa7125c7bfbcd7",
                "68b1e6e95bce2ef2"
            ],
            [
                "06aa7125c7bfbcd7",
                "587821a4c81b1185"
            ]
        ]
    },
    {
        "id": "b8288639de4d40ea",
        "type": "function",
        "z": "76efdb70933209ac",
        "name": "Watt",
        "func": "// Récupérer les valeurs de courant (mA) et de tension (V) depuis les propriétés msg.payload\nvar current_mA = msg.payload.miliamps;\nvar voltage_V = msg.payload.voltage;\n\n// Calculer la puissance en watts (W)\nvar power_W = (current_mA / 1000) * voltage_V;  // Convertir le courant en ampères\n\n// Vérifier si la tension est négative\nif (voltage_V < 0.5) {\n    // Si la tension est négative, ne rien faire et retourner le message inchangé\n    return null;\n}\n\n// Modifier les valeurs de sortie sans affecter les entrées\nmsg.payload = (power_W * 1000).toFixed(2);\nmsg.current_mA = current_mA;\nmsg.voltage_mV = (voltage_V * 1000).toFixed(2);\nmsg.topic = \"Power\";  // Modifiez le topic en conséquence pour refléter l'unité de mesure\n// Renvoyer le message modifié\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 220,
        "wires": [
            [
                "c2f42c42be3ffdd2",
                "cd1f740c61e8aa04",
                "4aa27220845f2949"
            ]
        ]
    },
    {
        "id": "06aa7125c7bfbcd7",
        "type": "join",
        "z": "76efdb70933209ac",
        "name": "Join_Amp_Volt",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 460,
        "y": 220,
        "wires": [
            [
                "b8288639de4d40ea"
            ]
        ]
    },
    {
        "id": "c2f42c42be3ffdd2",
        "type": "ui_text",
        "z": "76efdb70933209ac",
        "group": "bddfc83fd54ae92b",
        "order": 3,
        "width": 7,
        "height": 2,
        "name": "",
        "label": "MilliWatt",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 840,
        "y": 160,
        "wires": []
    },
    {
        "id": "cd1f740c61e8aa04",
        "type": "ui_chart",
        "z": "76efdb70933209ac",
        "name": "",
        "group": "bddfc83fd54ae92b",
        "order": 4,
        "width": 0,
        "height": 0,
        "label": "MilliWatt",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "5",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 840,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "587821a4c81b1185",
        "type": "function",
        "z": "76efdb70933209ac",
        "name": "Drop_Negatif",
        "func": "if(msg.payload < 0){\n    return null;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 360,
        "wires": [
            [
                "e8334464abeb8df9",
                "7c257ee5dcd1af4a"
            ]
        ]
    },
    {
        "id": "68b1e6e95bce2ef2",
        "type": "function",
        "z": "76efdb70933209ac",
        "name": "Drop_Negatif",
        "func": "var voltage_V = msg.payload;\n// Modifier les valeurs de sortie sans affecter les entrées\nmsg.payload = (voltage_V * 1000).toFixed(2);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 280,
        "wires": [
            [
                "3f2698910c317457",
                "6bb685f3a7a0f0a5"
            ]
        ]
    },
    {
        "id": "b688f544fed38038",
        "type": "ui_gauge",
        "z": "76efdb70933209ac",
        "name": "",
        "group": "837441be757b92ac",
        "order": 1,
        "width": 11,
        "height": 8,
        "gtype": "gage",
        "title": "CPU",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 590,
        "y": 500,
        "wires": []
    },
    {
        "id": "e4b8fa072df9d2fc",
        "type": "ui_gauge",
        "z": "76efdb70933209ac",
        "name": "",
        "group": "837441be757b92ac",
        "order": 2,
        "width": 11,
        "height": 8,
        "gtype": "gage",
        "title": "RAM",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 590,
        "y": 580,
        "wires": []
    },
    {
        "id": "95ac268a855d0a7a",
        "type": "ui_gauge",
        "z": "76efdb70933209ac",
        "name": "",
        "group": "837441be757b92ac",
        "order": 3,
        "width": 11,
        "height": 8,
        "gtype": "gage",
        "title": "Processus",
        "label": "",
        "format": "{{value}}",
        "min": 0,
        "max": "500",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 610,
        "y": 660,
        "wires": []
    },
    {
        "id": "b69a0aed1b6608d9",
        "type": "mqtt in",
        "z": "76efdb70933209ac",
        "name": "",
        "topic": "volt/benchmark/cpu",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "12e50ad63920a21c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 350,
        "y": 500,
        "wires": [
            [
                "b688f544fed38038",
                "df7d2b80bd59b4fb"
            ]
        ]
    },
    {
        "id": "5dddcb64761b7d57",
        "type": "mqtt in",
        "z": "76efdb70933209ac",
        "name": "",
        "topic": "volt/benchmark/ram",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "12e50ad63920a21c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 350,
        "y": 580,
        "wires": [
            [
                "e4b8fa072df9d2fc",
                "ea92a59ad33b194e"
            ]
        ]
    },
    {
        "id": "7ab2d9f0ef997aac",
        "type": "mqtt in",
        "z": "76efdb70933209ac",
        "name": "",
        "topic": "volt/benchmark/processes",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "12e50ad63920a21c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 370,
        "y": 660,
        "wires": [
            [
                "95ac268a855d0a7a",
                "1855f7ba0c1cb43f"
            ]
        ]
    },
    {
        "id": "5e01dde5ab04cf9f",
        "type": "ui_gauge",
        "z": "76efdb70933209ac",
        "name": "",
        "group": "65e942c300ec1ce1",
        "order": 1,
        "width": 11,
        "height": 8,
        "gtype": "gage",
        "title": "CPU",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 590,
        "y": 820,
        "wires": []
    },
    {
        "id": "2f77fbb6f1c9c8b2",
        "type": "ui_gauge",
        "z": "76efdb70933209ac",
        "name": "",
        "group": "65e942c300ec1ce1",
        "order": 2,
        "width": 11,
        "height": 8,
        "gtype": "gage",
        "title": "RAM",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 590,
        "y": 900,
        "wires": []
    },
    {
        "id": "78164e0fc6561bb0",
        "type": "ui_gauge",
        "z": "76efdb70933209ac",
        "name": "",
        "group": "65e942c300ec1ce1",
        "order": 3,
        "width": 11,
        "height": 8,
        "gtype": "gage",
        "title": "Processus",
        "label": "",
        "format": "{{value}}",
        "min": 0,
        "max": "500",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 610,
        "y": 980,
        "wires": []
    },
    {
        "id": "d36d783723cacbde",
        "type": "mqtt in",
        "z": "76efdb70933209ac",
        "name": "",
        "topic": "nidus/benchmark/cpu",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "12e50ad63920a21c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 360,
        "y": 820,
        "wires": [
            [
                "5e01dde5ab04cf9f",
                "24edf858449e9c50"
            ]
        ]
    },
    {
        "id": "4d9488b6e1088231",
        "type": "mqtt in",
        "z": "76efdb70933209ac",
        "name": "",
        "topic": "nidus/benchmark/ram",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "12e50ad63920a21c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 360,
        "y": 900,
        "wires": [
            [
                "2f77fbb6f1c9c8b2",
                "96bbc5b20c93f61c"
            ]
        ]
    },
    {
        "id": "cfd7ef673c828f97",
        "type": "mqtt in",
        "z": "76efdb70933209ac",
        "name": "",
        "topic": "nidus/benchmark/processes",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "12e50ad63920a21c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 400,
        "y": 980,
        "wires": [
            [
                "78164e0fc6561bb0",
                "def3688a66231ed2"
            ]
        ]
    },
    {
        "id": "af5a5bdbf9e320eb",
        "type": "ui_gauge",
        "z": "76efdb70933209ac",
        "name": "",
        "group": "837441be757b92ac",
        "order": 4,
        "width": 11,
        "height": 8,
        "gtype": "gage",
        "title": "Temp",
        "label": "C",
        "format": "{{value}}",
        "min": 0,
        "max": "85",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "35",
        "seg2": "50",
        "diff": false,
        "className": "",
        "x": 590,
        "y": 740,
        "wires": []
    },
    {
        "id": "7186fbb338a8160c",
        "type": "mqtt in",
        "z": "76efdb70933209ac",
        "name": "",
        "topic": "volt/benchmark/temp",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "12e50ad63920a21c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 350,
        "y": 740,
        "wires": [
            [
                "af5a5bdbf9e320eb",
                "17d7264b5cdb9f27"
            ]
        ]
    },
    {
        "id": "b5e64e3d32ee1834",
        "type": "ui_gauge",
        "z": "76efdb70933209ac",
        "name": "",
        "group": "65e942c300ec1ce1",
        "order": 4,
        "width": 11,
        "height": 8,
        "gtype": "gage",
        "title": "Température",
        "label": "C",
        "format": "{{value}}",
        "min": 0,
        "max": "85",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "35",
        "seg2": "50",
        "diff": false,
        "className": "",
        "x": 610,
        "y": 1060,
        "wires": []
    },
    {
        "id": "2cf2a295ee7de67c",
        "type": "mqtt in",
        "z": "76efdb70933209ac",
        "name": "",
        "topic": "nidus/benchmark/temp",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "12e50ad63920a21c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 380,
        "y": 1060,
        "wires": [
            [
                "b5e64e3d32ee1834",
                "efd70bd2950f7343"
            ]
        ]
    },
    {
        "id": "4aa27220845f2949",
        "type": "link out",
        "z": "76efdb70933209ac",
        "name": "MilliWatt",
        "mode": "link",
        "links": [
            "c3bbb85042ce25f8"
        ],
        "x": 795,
        "y": 120,
        "wires": []
    },
    {
        "id": "6bb685f3a7a0f0a5",
        "type": "link out",
        "z": "76efdb70933209ac",
        "name": "MilliVolt",
        "mode": "link",
        "links": [
            "1f33dcf11541ad85"
        ],
        "x": 635,
        "y": 320,
        "wires": []
    },
    {
        "id": "7c257ee5dcd1af4a",
        "type": "link out",
        "z": "76efdb70933209ac",
        "name": "MilliAmp",
        "mode": "link",
        "links": [
            "34a5075b24efbec0"
        ],
        "x": 635,
        "y": 400,
        "wires": []
    },
    {
        "id": "df7d2b80bd59b4fb",
        "type": "link out",
        "z": "76efdb70933209ac",
        "name": "Volt_CPU",
        "mode": "link",
        "links": [
            "ed77962c337bf813"
        ],
        "x": 555,
        "y": 460,
        "wires": []
    },
    {
        "id": "ea92a59ad33b194e",
        "type": "link out",
        "z": "76efdb70933209ac",
        "name": "Volt_RAM",
        "mode": "link",
        "links": [
            "8220b140c1af5a4f"
        ],
        "x": 555,
        "y": 540,
        "wires": []
    },
    {
        "id": "1855f7ba0c1cb43f",
        "type": "link out",
        "z": "76efdb70933209ac",
        "name": "Volt_Processus",
        "mode": "link",
        "links": [
            "54842d7063dfb6b4"
        ],
        "x": 555,
        "y": 620,
        "wires": []
    },
    {
        "id": "17d7264b5cdb9f27",
        "type": "link out",
        "z": "76efdb70933209ac",
        "name": "Volt_Temp",
        "mode": "link",
        "links": [
            "a958a8309bbd6b3d"
        ],
        "x": 555,
        "y": 700,
        "wires": []
    },
    {
        "id": "24edf858449e9c50",
        "type": "link out",
        "z": "76efdb70933209ac",
        "name": "Nidus_CPU",
        "mode": "link",
        "links": [
            "ade602e74c57c476"
        ],
        "x": 555,
        "y": 780,
        "wires": []
    },
    {
        "id": "96bbc5b20c93f61c",
        "type": "link out",
        "z": "76efdb70933209ac",
        "name": "Nidus_RAM",
        "mode": "link",
        "links": [
            "83aeb0d37671184e"
        ],
        "x": 555,
        "y": 860,
        "wires": []
    },
    {
        "id": "def3688a66231ed2",
        "type": "link out",
        "z": "76efdb70933209ac",
        "name": "Nidus_Process",
        "mode": "link",
        "links": [
            "08e95c3bbdfa9e15"
        ],
        "x": 555,
        "y": 940,
        "wires": []
    },
    {
        "id": "efd70bd2950f7343",
        "type": "link out",
        "z": "76efdb70933209ac",
        "name": "Nidus_Temp",
        "mode": "link",
        "links": [
            "7a9b5849173b180a"
        ],
        "x": 555,
        "y": 1020,
        "wires": []
    },
    {
        "id": "4fa73dd9.83cca4",
        "type": "comment",
        "z": "8b4c08f2a705dd79",
        "name": "File Browser",
        "info": "1) Update the default folder in the Init node\n2) Update the default folder in the Reset node as well\n3) You can duplicate the Reset nodes and use them as saved shortcuts\n4) Check the Convert Timestamps function node if you want to see your dates in a different format. I just used the Javascript toISOString format.\n5) The Graph button can read any CSV file which have any number of values, but the first column always contains a timestamp column with javascript timestamp of the data point.",
        "x": 350,
        "y": 120,
        "wires": []
    },
    {
        "id": "d185a45.2327a58",
        "type": "inject",
        "z": "8b4c08f2a705dd79",
        "name": "Init",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "change",
        "payload": "/home/NodeRed/pdf",
        "payloadType": "str",
        "x": 350,
        "y": 280,
        "wires": [
            [
                "3d4e5e51.bdf952"
            ]
        ]
    },
    {
        "id": "a715f7a4.a398a8",
        "type": "ui_button",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "group": "160e81fb.f1c86e",
        "order": 4,
        "width": 4,
        "height": 2,
        "passthru": true,
        "label": "Refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "refresh",
        "payload": "",
        "payloadType": "str",
        "topic": "refresh",
        "topicType": "str",
        "x": 360,
        "y": 320,
        "wires": [
            [
                "3d4e5e51.bdf952"
            ]
        ]
    },
    {
        "id": "638728aa.cd0b08",
        "type": "ui_template",
        "z": "8b4c08f2a705dd79",
        "group": "160e81fb.f1c86e",
        "name": "",
        "order": 1,
        "width": 18,
        "height": "7",
        "format": "<div ng-bind-html=\"msg.payload\" height=\"400\" style=\"height: 400px;\"><br/>\n</div>\n<style>\n/* Applique des styles aux liens */\na[href] {\ncolor: #d93347; /* Couleur du lien */\ntext-decoration: none; /* Pas de soulignement */\n}\n\n/* Applique des styles au survol des liens */\na[href]:hover {\ncolor: #cb0505; /* Couleur du lien au survol */\ntext-decoration: underline; /* Soulignement au survol */\n}\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1340,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "9d27e846.b31db8",
        "type": "template",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<table width=\"100%\">\n    <tr><th>Nom de Fichier</th><th>Taille</th><th>Créer</th><th>Changer</th></tr>\n    {{#payload}}\n        <tr>\n            <td><a href=\"/download?filename={{name}}\" target=\"blank\">{{fname}}</a></td>\n            <td>{{stat.size}}</td>\n            <td>{{stat.created}}</td>\n            <td>{{stat.changed}}</td>\n        </tr>\n    {{/payload}}\n</table>\n",
        "output": "str",
        "x": 1180,
        "y": 320,
        "wires": [
            [
                "638728aa.cd0b08"
            ]
        ]
    },
    {
        "id": "3e094f82.15d6e",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "Convert timestamps",
        "func": "// Parcourir chaque élément dans le tableau \"payload\" du message\nfor (var i = 0; i < msg.payload.length; i++) {\n    // Formater et mettre à jour les propriétés de date/heure dans l'objet \"stat\"\n    msg.payload[i].stat.created = msg.payload[i].stat.created.toISOString().slice(0, 19).replace('T', ' ');\n    msg.payload[i].stat.changed = msg.payload[i].stat.changed.toISOString().slice(0, 19).replace('T', ' ');\n    msg.payload[i].stat.accessed = msg.payload[i].stat.accessed.toISOString().slice(0, 19).replace('T', ' ');\n    msg.payload[i].stat.statusChanged = msg.payload[i].stat.statusChanged.toISOString().slice(0, 19).replace('T', ' ');\n\n    // Extraire le nom de fichier à partir de la propriété \"name\" et mettre à jour \"fname\"\n    msg.payload[i].fname = msg.payload[i].name.replace(/^.*(\\\\|\\/|\\:)/, '');\n}\n\nreturn msg; // Renvoyer le message modifié\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 320,
        "wires": [
            [
                "9d27e846.b31db8"
            ]
        ]
    },
    {
        "id": "aa8c482.93734b8",
        "type": "http in",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "url": "/download",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 440,
        "y": 380,
        "wires": [
            [
                "d969ba04.e24028"
            ]
        ]
    },
    {
        "id": "d19cc7d8.646328",
        "type": "http response",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1230,
        "y": 380,
        "wires": []
    },
    {
        "id": "d969ba04.e24028",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "Get the file name",
        "func": "msg.filename = msg.req.query.filename;\nmsg.contentdisposition = \"attachment; filename=\\\"\" + msg.req.query.filename.replace(/^.*(\\\\|\\/|\\:)/, '') + \"\\\"\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 690,
        "y": 380,
        "wires": [
            [
                "e92381c3.c4cd2"
            ]
        ],
        "outputLabels": [
            "Folder selected",
            "File selected"
        ]
    },
    {
        "id": "e92381c3.c4cd2",
        "type": "file in",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "filename": "",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 880,
        "y": 380,
        "wires": [
            [
                "99ff4953.d0d5c8"
            ]
        ]
    },
    {
        "id": "99ff4953.d0d5c8",
        "type": "change",
        "z": "8b4c08f2a705dd79",
        "name": "Set Headers",
        "rules": [
            {
                "t": "set",
                "p": "headers",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "headers.content-type",
                "pt": "msg",
                "to": "text/csv",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "headers.Content-Disposition",
                "pt": "msg",
                "to": "contentdisposition",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1050,
        "y": 380,
        "wires": [
            [
                "d19cc7d8.646328"
            ]
        ]
    },
    {
        "id": "3d4e5e51.bdf952",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "Folder handling",
        "func": "// Récupérer la valeur de la variable \"folder\" depuis le contexte\nlet folder = context.get(\"folder\");\n// Si la variable \"folder\" n'est pas définie, l'initialiser avec \"/\"\nif (folder === undefined) {\n    folder = \"/\";\n    context.set(\"folder\", folder); // Enregistrer la valeur dans le contexte\n}\n\n// Récupérer la valeur de la variable \"hidden\" depuis le contexte\nlet hidden = context.get(\"hidden\");\n// Si la variable \"hidden\" n'est pas définie, l'initialiser avec \"false\"\nif (hidden === undefined) {\n    hidden = false;\n    context.set(\"hidden\", hidden); // Enregistrer la valeur dans le contexte\n}\n\n// Si le sujet du message est \"up\"\nif (msg.topic === \"up\") {\n    var the_arr = folder.split('/');\n    the_arr.pop(); // Supprimer le dernier élément du tableau\n    folder = the_arr.join('/'); // Rejoindre les éléments du tableau pour former le nouveau chemin\n    context.set(\"folder\", folder); // Enregistrer le nouveau chemin dans le contexte\n}\n\n// Si le sujet du message est \"change\"\nif (msg.topic === \"change\") {\n    folder = msg.payload; // Mettre à jour la valeur de \"folder\" avec le contenu du champ \"payload\"\n    context.set(\"folder\", folder); // Enregistrer la nouvelle valeur dans le contexte\n}\n\n// Si le sujet du message est \"hidden\"\nif (msg.topic === \"hidden\") {\n    hidden = msg.payload; // Mettre à jour la valeur de \"hidden\" avec le contenu du champ \"payload\"\n    context.set(\"hidden\", hidden); // Enregistrer la nouvelle valeur dans le contexte\n}\n\n// Construire un objet JSON contenant les valeurs actuelles de \"folder\" et \"hidden\"\nmsg.payload = { \"start\": folder, \"hidden\": hidden };\n\nreturn msg; // Renvoyer le message modifié\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 320,
        "wires": [
            [
                "993d7272.843ae",
                "5219875b.c070d8"
            ]
        ]
    },
    {
        "id": "993d7272.843ae",
        "type": "fs-file-lister",
        "z": "8b4c08f2a705dd79",
        "name": "Files",
        "start": "/home/pi",
        "pattern": "*.*",
        "folders": "*",
        "hidden": false,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": true,
        "showWarnings": false,
        "x": 750,
        "y": 260,
        "wires": [
            [
                "3e094f82.15d6e"
            ]
        ]
    },
    {
        "id": "5219875b.c070d8",
        "type": "fs-file-lister",
        "z": "8b4c08f2a705dd79",
        "name": "Folders",
        "start": "/home/pi",
        "pattern": "*.*",
        "folders": "*",
        "hidden": false,
        "lstype": "directories",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": true,
        "showWarnings": false,
        "x": 760,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "4ef3788f935e6027",
        "type": "pdfmake",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "outputType": "base64",
        "inputProperty": "payload",
        "options": "{}",
        "outputProperty": "payload",
        "x": 1760,
        "y": 740,
        "wires": [
            [
                "0479ae659b0e83c9"
            ]
        ]
    },
    {
        "id": "0479ae659b0e83c9",
        "type": "file",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "filename": "filepath",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "base64",
        "x": 1900,
        "y": 740,
        "wires": [
            [
                "e8ac5800cefa20d9"
            ]
        ]
    },
    {
        "id": "aa7bc1543a451763",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "Ajoute le chemin du fichier ",
        "func": "var now = new Date();\nvar jour = (\"0\" + now.getDate()).slice(-2);\nvar mois = (\"0\" + (now.getMonth() + 1)).slice(-2);\n\n// Récupérer le nom de fichier de msg.payload.nameFile, ou utiliser \"default\" si absent\nvar nameFile = msg.payload.nameFile || \"default\";\n// Remplacer les caractères interdits dans le nom de fichier par des underscores\nnameFile = nameFile.replace(/[\\\\/:\"*?<>|]+/g, \"_\");\n\n// Construire le chemin du fichier PDF\nmsg.filePath = \"/home/NodeRed/pdf/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \".pdf\";\n\n// Construire les chemins des fichiers graphiques\nmsg.graphPath = {\n    volt: {\n        complet: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"VOLT.png\",\n        cpu: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"vcpu.png\",\n        ram: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"vram.png\",\n        proc: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"vproc.png\",\n        temp: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"vtemp.png\",\n        watt: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"vwatt.png\"\n    },\n    nidus: {\n        complet: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"NIDUS.png\",\n        cpu: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"ncpu.png\",\n        ram: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"nram.png\",\n        proc: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"nproc.png\",\n        temp: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"ntemp.png\"\n    }\n};\n\n// Renvoyer le message modifié\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 800,
        "wires": [
            [
                "f26e31525cd26f5a"
            ]
        ]
    },
    {
        "id": "7428a3bfe4a5a24d",
        "type": "ui_form",
        "z": "8b4c08f2a705dd79",
        "name": "Configuration du Test",
        "label": "",
        "group": "160e81fb.f1c86e",
        "order": 2,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Nom du Fichier",
                "value": "nameFile",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Temps de mesure en minutes",
                "value": "time",
                "type": "number",
                "required": false,
                "rows": null
            },
            {
                "label": "Stress test Nidus",
                "value": "stressNidus",
                "type": "checkbox",
                "required": false,
                "rows": null
            },
            {
                "label": "Stress test Volt",
                "value": "stressVolt",
                "type": "checkbox",
                "required": false,
                "rows": null
            },
            {
                "label": "Temps de Stress test",
                "value": "timeStress",
                "type": "number",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "nameFile": "",
            "time": "",
            "stressNidus": false,
            "stressVolt": false,
            "timeStress": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": true,
        "className": "",
        "x": 160,
        "y": 800,
        "wires": [
            [
                "aa7bc1543a451763",
                "e87001580862758b"
            ]
        ]
    },
    {
        "id": "ce7fc785e5173ede",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "Créer le contenue du fichier",
        "func": "msg.payload = {\n    header: function (currentPage, pageCount, pageSize) {\n        return [\n            {\n                text: \"Tobler Cyril\",\n                alignment: \"left\",\n                fontSize: 10,\n                margin: [15, 10, 0, 0]\n            },\n            {\n                text: \"Nom du projet : Confuse T-Rex\",\n                alignment: \"center\",\n                fontSize: 10,\n                margin: [0, 0, 0, 0]\n            }\n        ];\n    },\n    footer: function (currentPage, pageCount) {\n        return {\n            columns: [\n                {\n                    text: currentPage.toString() + \" / \" + pageCount,\n                    alignment: \"left\",\n                    fontSize: 10,\n                    margin: [15, 0, 0, 10]\n                },\n                {\n                    text: new Date().toLocaleDateString(\"fr-FR\"),\n                    alignment: \"right\",\n                    fontSize: 10,\n                    margin: [0, 0, 15, 10]\n                }\n            ],\n            margin: [0, 0, 0, 10]\n        };\n    },\n    content: [\n        {\n            text: \"Rapport d'utilisation\",\n            style: \"header\",\n            margin: [0, 10, 0, 0]\n        },\n        {\n            text: \"Les valeurs sont des moyennes sur les \" + Math.floor(msg.delay / (1000 * 60)) + \" dèrnière minutes\"\n        },\n        {\n            text: \"Nidus :\",\n            style: \"header2\"\n        },\n        {\n            text: \"CPU :                 \" + msg.payload.moyenne[\"nidus/benchmark/cpu\"]\n        },\n        {\n            text: \"RAM :                 \" + msg.payload.moyenne[\"nidus/benchmark/ram\"]\n        },\n        {\n            text: \"Nombre de processus : \" + msg.payload.moyenne[\"nidus/benchmark/processes\"]\n        },\n        {\n            text: \"Température CPU :     \" + msg.payload.moyenne[\"nidus/benchmark/temp\"]\n        },\n        {\n            image: 'nidusImage',\n            width: 500,\n            pageBreak: 'after',\n        },\n        {\n            text: \"Volt\",\n            style: \"header2\"\n        },\n        {\n            text: \"CPU :                 \" + msg.payload.moyenne[\"volt/benchmark/cpu\"]\n        },\n        {\n            text: \"RAM :                 \" + msg.payload.moyenne[\"volt/benchmark/ram\"]\n        },\n        {\n            text: \"Nombre de processus : \" + msg.payload.moyenne[\"volt/benchmark/processes\"]\n        },\n        {\n            text: \"Température CPU :     \" + msg.payload.moyenne[\"volt/benchmark/temp\"]\n        }, \n        {\n            text: \"MilliWatt :           \" + msg.payload.moyenne[\"volt/benchmark/watt\"]\n        },\n        {\n            image: 'voltImage',\n            width: 500\n        }, \n        {\n            image: 'wattImage',\n            width: 500\n        },\n    ],\n    images: {\n        voltImage: 'data:image/png;base64,' + msg.payload.voltGraph.toString('base64'), // Utilisation du buffer pour l'image Volt\n        wattImage: 'data:image/png;base64,' + msg.payload.wattGraph.toString('base64'),  // Utilisation du buffer pour l'image Watt de volt\n        nidusImage: 'data:image/png;base64,' + msg.payload.nidusGraph.toString('base64'),  // Utilisation du buffer pour l'image Nidus\n    },\n    styles: {\n        header: {\n            fontSize: 22,\n            bold: true,\n            margin: [0, 30, 0, 0]\n        },\n        header2: {\n            fontSize: 18,\n            bold: true,\n            margin: [0, 20, 0, 0]\n        }\n    }\n};\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1960,
        "y": 780,
        "wires": [
            [
                "4ef3788f935e6027"
            ]
        ]
    },
    {
        "id": "69a8a0bed6aeee0e",
        "type": "join",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 1010,
        "y": 640,
        "wires": [
            [
                "437e6a5585d440a9"
            ]
        ]
    },
    {
        "id": "5c69c227d997ff0a",
        "type": "mqtt-plus in",
        "z": "8b4c08f2a705dd79",
        "name": "Volt/CPU",
        "topic": "/",
        "qos": "2",
        "broker": "ae336b538b957769",
        "x": 840,
        "y": 640,
        "wires": [
            [
                "69a8a0bed6aeee0e"
            ],
            []
        ]
    },
    {
        "id": "f26e31525cd26f5a",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "Activate",
        "func": "var delay = msg.payload.time !== null ? msg.payload.time * 60 * 1000 : 30000; // Convertir en millisecondes si nécessaire\n\n// Créer les objets de message pour chaque sortie\nvar msg1 = {\n    cmd: \"subscribe\",\n    topic: \"/\",\n    complete: true,\n    out:1,\n    delay: delay, // Délai en ms\n    filepath: msg.filePath,\n    graphPath: msg.graphPath\n};\n\nvar msg2 = {\n    cmd: \"subscribe\",\n    topic: \"volt/benchmark/cpu\",\n    out: 2\n};\n\nvar msg3 = {\n    cmd: \"subscribe\",\n    topic: \"volt/benchmark/ram\",\n    out: 3\n};\n\nvar msg4 = {\n    cmd: \"subscribe\",\n    topic: \"volt/benchmark/processes\",\n    out: 4\n};\n\nvar msg5 = {\n    cmd: \"subscribe\",\n    topic: \"volt/benchmark/temp\",\n    out: 4\n};\n\n\n\nvar msg6 = {\n    cmd: \"subscribe\",\n    topic: \"nidus/benchmark/cpu\",\n    out: 5\n};\n\nvar msg7 = {\n    cmd: \"subscribe\",\n    topic: \"nidus/benchmark/ram\",\n    out: 6\n};\n\nvar msg8 = {\n    cmd: \"subscribe\",\n    topic: \"nidus/benchmark/processes\",\n    out: 7\n};\nvar msg9 = {\n    cmd: \"subscribe\",\n    topic: \"nidus/benchmark/temp\",\n    out: 4\n};\n\n\n// Envoyer les messages aux sorties correspondantes\n// Les messages seront envoyés dans l'ordre de 0 à 6, correspondant aux sorties activées\n// Assurez-vous que le nœud \"Function\" a sept sorties activées pour recevoir ces messages\nnode.send([msg1, msg2, msg3, msg4, msg5, msg6, msg7,msg8,msg9]);\n",
        "outputs": 9,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 800,
        "wires": [
            [
                "7b65a4353d980a32",
                "1a94997d94eb26fa"
            ],
            [
                "5c69c227d997ff0a"
            ],
            [
                "f4d244933230ca3c"
            ],
            [
                "0133cae69ae5104b"
            ],
            [
                "639890ec7f76a77c"
            ],
            [
                "2f71f2cc59cf73fe"
            ],
            [
                "bd2b8fa03e46740a"
            ],
            [
                "7d68e80e8c88e5f7"
            ],
            [
                "36a3fe1d1cb9d60b"
            ]
        ]
    },
    {
        "id": "7b65a4353d980a32",
        "type": "delay",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "pauseType": "delayv",
        "timeout": "15",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 660,
        "y": 580,
        "wires": [
            [
                "5c69c227d997ff0a",
                "69a8a0bed6aeee0e",
                "f4d244933230ca3c",
                "0133cae69ae5104b",
                "2f71f2cc59cf73fe",
                "bd2b8fa03e46740a",
                "7d68e80e8c88e5f7",
                "346e23e614df9b2f",
                "09be40e07be60911",
                "7e535f8c5b186600",
                "f591304f29200dcd",
                "376177303fee8e6b",
                "639890ec7f76a77c",
                "36a3fe1d1cb9d60b",
                "3b8849fe5c0112fb",
                "16850c4ba1026ed6",
                "1b0aeb2184b98462"
            ]
        ]
    },
    {
        "id": "346e23e614df9b2f",
        "type": "join",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 1010,
        "y": 680,
        "wires": [
            [
                "e8ce72700af4ebf3"
            ]
        ]
    },
    {
        "id": "f4d244933230ca3c",
        "type": "mqtt-plus in",
        "z": "8b4c08f2a705dd79",
        "name": "Volt/Ram",
        "topic": "/",
        "qos": "2",
        "broker": "ae336b538b957769",
        "x": 840,
        "y": 680,
        "wires": [
            [
                "346e23e614df9b2f"
            ],
            []
        ]
    },
    {
        "id": "09be40e07be60911",
        "type": "join",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 1010,
        "y": 720,
        "wires": [
            [
                "b75f1a3ce01ce919"
            ]
        ]
    },
    {
        "id": "0133cae69ae5104b",
        "type": "mqtt-plus in",
        "z": "8b4c08f2a705dd79",
        "name": "Volt/processes",
        "topic": "/",
        "qos": "2",
        "broker": "ae336b538b957769",
        "x": 860,
        "y": 720,
        "wires": [
            [
                "09be40e07be60911"
            ],
            []
        ]
    },
    {
        "id": "7e535f8c5b186600",
        "type": "join",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 1010,
        "y": 800,
        "wires": [
            [
                "7b6671537c22ccbb"
            ]
        ]
    },
    {
        "id": "2f71f2cc59cf73fe",
        "type": "mqtt-plus in",
        "z": "8b4c08f2a705dd79",
        "name": "Nidus/CPU",
        "topic": "/",
        "qos": "2",
        "broker": "ae336b538b957769",
        "x": 850,
        "y": 800,
        "wires": [
            [
                "7e535f8c5b186600"
            ],
            []
        ]
    },
    {
        "id": "f591304f29200dcd",
        "type": "join",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 1010,
        "y": 840,
        "wires": [
            [
                "a4788f45248625c0"
            ]
        ]
    },
    {
        "id": "bd2b8fa03e46740a",
        "type": "mqtt-plus in",
        "z": "8b4c08f2a705dd79",
        "name": "Nidus/Ram",
        "topic": "/",
        "qos": "2",
        "broker": "ae336b538b957769",
        "x": 850,
        "y": 840,
        "wires": [
            [
                "f591304f29200dcd"
            ],
            []
        ]
    },
    {
        "id": "376177303fee8e6b",
        "type": "join",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 1010,
        "y": 880,
        "wires": [
            [
                "c8ba41e1313713fc"
            ]
        ]
    },
    {
        "id": "7d68e80e8c88e5f7",
        "type": "mqtt-plus in",
        "z": "8b4c08f2a705dd79",
        "name": "Nidus/processes",
        "topic": "/",
        "qos": "2",
        "broker": "ae336b538b957769",
        "x": 860,
        "y": 880,
        "wires": [
            [
                "376177303fee8e6b"
            ],
            []
        ]
    },
    {
        "id": "437e6a5585d440a9",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "Rename",
        "func": "// Définir le sujet du message\nmsg.topic = \"volt/benchmark/cpu\";\n\n// Vérifier si le tableau payload existe et n'est pas vide\nif (msg.payload && Array.isArray(msg.payload) && msg.payload.length > 0) {\n    // Convertir les valeurs en chaînes de caractères en nombres entiers\n    var numericValues = msg.payload.map(function (value) {\n        return parseInt(value, 10); // 10 indique la base décimale\n    }).filter(function (value) {\n        return !isNaN(value); // Filtrer les valeurs non numériques\n    });\n\n    // Vérifier si des valeurs numériques ont été trouvées\n    if (numericValues.length > 0) {\n        // Calculer la somme des valeurs numériques dans le tableau\n        var sum = numericValues.reduce(function (acc, value) {\n            return acc + value;\n        }, 0);\n\n        // Calculer la moyenne en divisant la somme par le nombre d'éléments\n        var moyenne = sum / numericValues.length;\n\n        // Arrondir la moyenne à deux chiffres après la virgule et au multiple de 0.05 le plus proche\n        moyenne = Math.round(moyenne * 20) / 20;\n\n        // Ajouter la moyenne au message\n        msg.moyenne = moyenne.toFixed(2);\n    } else {\n        // Si aucune valeur numérique n'a été trouvée, définir la moyenne à 0\n        msg.moyenne = \"0.00\";\n    }\n} else {\n    // Si le tableau est vide ou n'existe pas, définir la moyenne à 0\n    msg.moyenne.volt.benchmark.cpu = \"0.00\";\n}\n\n// Renvoyer le message modifié\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 640,
        "wires": [
            [
                "4e4f4f7a85b8a2cd",
                "9a3d6e47ed36af55"
            ]
        ]
    },
    {
        "id": "e8ce72700af4ebf3",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "Rename",
        "func": "// Définir le sujet du message\nmsg.topic = \"volt/benchmark/ram\";\n\n// Vérifier si le tableau payload existe et n'est pas vide\nif (msg.payload && Array.isArray(msg.payload) && msg.payload.length > 0) {\n    // Convertir les valeurs en chaînes de caractères en nombres entiers\n    var numericValues = msg.payload.map(function (value) {\n        return parseInt(value, 10); // 10 indique la base décimale\n    }).filter(function (value) {\n        return !isNaN(value); // Filtrer les valeurs non numériques\n    });\n\n    // Vérifier si des valeurs numériques ont été trouvées\n    if (numericValues.length > 0) {\n        // Calculer la somme des valeurs numériques dans le tableau\n        var sum = numericValues.reduce(function (acc, value) {\n            return acc + value;\n        }, 0);\n\n        // Calculer la moyenne en divisant la somme par le nombre d'éléments\n        var moyenne = sum / numericValues.length;\n\n        // Arrondir la moyenne à deux chiffres après la virgule et au multiple de 0.05 le plus proche\n        moyenne = Math.round(moyenne * 20) / 20;\n\n        // Ajouter la moyenne au message\n        msg.moyenne = moyenne.toFixed(2);\n    } else {\n        // Si aucune valeur numérique n'a été trouvée, définir la moyenne à 0\n        msg.moyenne = \"0.00\";\n    }\n} else {\n    // Si le tableau est vide ou n'existe pas, définir la moyenne à 0\n    msg.moyenne = \"0.00\";\n}\n\n// Renvoyer le message modifié\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 680,
        "wires": [
            [
                "4e4f4f7a85b8a2cd",
                "9a3d6e47ed36af55"
            ]
        ]
    },
    {
        "id": "b75f1a3ce01ce919",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "Rename",
        "func": "// Définir le sujet du message\nmsg.topic = \"volt/benchmark/processes\";\n\n// Vérifier si le tableau payload existe et n'est pas vide\nif (msg.payload && Array.isArray(msg.payload) && msg.payload.length > 0) {\n    // Convertir les valeurs en chaînes de caractères en nombres entiers\n    var numericValues = msg.payload.map(function (value) {\n        return parseInt(value, 10); // 10 indique la base décimale\n    }).filter(function (value) {\n        return !isNaN(value); // Filtrer les valeurs non numériques\n    });\n\n    // Vérifier si des valeurs numériques ont été trouvées\n    if (numericValues.length > 0) {\n        // Calculer la somme des valeurs numériques dans le tableau\n        var sum = numericValues.reduce(function (acc, value) {\n            return acc + value;\n        }, 0);\n\n        // Calculer la moyenne en divisant la somme par le nombre d'éléments\n        var moyenne = sum / numericValues.length;\n\n        // Arrondir la moyenne à deux chiffres après la virgule et au multiple de 0.05 le plus proche\n        moyenne = Math.round(moyenne * 20) / 20;\n\n        // Ajouter la moyenne au message\n        msg.moyenne = moyenne.toFixed(2);\n    } else {\n        // Si aucune valeur numérique n'a été trouvée, définir la moyenne à 0\n        msg.moyenne = \"0.00\";\n    }\n} else {\n    // Si le tableau est vide ou n'existe pas, définir la moyenne à 0\n    msg.moyenne = \"0.00\";\n}\n\n// Renvoyer le message modifié\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 720,
        "wires": [
            [
                "4e4f4f7a85b8a2cd",
                "9a3d6e47ed36af55"
            ]
        ]
    },
    {
        "id": "7b6671537c22ccbb",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "Rename",
        "func": "// Définir le sujet du message\nmsg.topic = \"nidus/benchmark/cpu\";\n\n// Vérifier si le tableau payload existe et n'est pas vide\nif (msg.payload && Array.isArray(msg.payload) && msg.payload.length > 0) {\n    // Convertir les valeurs en chaînes de caractères en nombres entiers\n    var numericValues = msg.payload.map(function (value) {\n        return parseInt(value, 10); // 10 indique la base décimale\n    }).filter(function (value) {\n        return !isNaN(value); // Filtrer les valeurs non numériques\n    });\n\n    // Vérifier si des valeurs numériques ont été trouvées\n    if (numericValues.length > 0) {\n        // Calculer la somme des valeurs numériques dans le tableau\n        var sum = numericValues.reduce(function (acc, value) {\n            return acc + value;\n        }, 0);\n\n        // Calculer la moyenne en divisant la somme par le nombre d'éléments\n        var moyenne = sum / numericValues.length;\n\n        // Arrondir la moyenne à deux chiffres après la virgule et au multiple de 0.05 le plus proche\n        moyenne = Math.round(moyenne * 20) / 20;\n\n        // Ajouter la moyenne au message\n        msg.moyenne = moyenne.toFixed(2);\n    } else {\n        // Si aucune valeur numérique n'a été trouvée, définir la moyenne à 0\n        msg.moyenne = \"0.00\";\n    }\n} else {\n    // Si le tableau est vide ou n'existe pas, définir la moyenne à 0\n    msg.moyenne = \"0.00\";\n}\n\n// Renvoyer le message modifié\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 800,
        "wires": [
            [
                "4e4f4f7a85b8a2cd",
                "9a3d6e47ed36af55"
            ]
        ]
    },
    {
        "id": "a4788f45248625c0",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "Rename",
        "func": "// Définir le sujet du message\nmsg.topic = \"nidus/benchmark/ram\";\n\n// Vérifier si le tableau payload existe et n'est pas vide\nif (msg.payload && Array.isArray(msg.payload) && msg.payload.length > 0) {\n    // Convertir les valeurs en chaînes de caractères en nombres entiers\n    var numericValues = msg.payload.map(function (value) {\n        return parseInt(value, 10); // 10 indique la base décimale\n    }).filter(function (value) {\n        return !isNaN(value); // Filtrer les valeurs non numériques\n    });\n\n    // Vérifier si des valeurs numériques ont été trouvées\n    if (numericValues.length > 0) {\n        // Calculer la somme des valeurs numériques dans le tableau\n        var sum = numericValues.reduce(function (acc, value) {\n            return acc + value;\n        }, 0);\n\n        // Calculer la moyenne en divisant la somme par le nombre d'éléments\n        var moyenne = sum / numericValues.length;\n\n        // Arrondir la moyenne à deux chiffres après la virgule et au multiple de 0.05 le plus proche\n        moyenne = Math.round(moyenne * 20) / 20;\n\n        // Ajouter la moyenne au message\n        msg.moyenne = moyenne.toFixed(2);\n    } else {\n        // Si aucune valeur numérique n'a été trouvée, définir la moyenne à 0\n        msg.moyenne = \"0.00\";\n    }\n} else {\n    // Si le tableau est vide ou n'existe pas, définir la moyenne à 0\n    msg.moyenne = \"0.00\";\n}\n\n// Renvoyer le message modifié\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 840,
        "wires": [
            [
                "4e4f4f7a85b8a2cd",
                "9a3d6e47ed36af55"
            ]
        ]
    },
    {
        "id": "c8ba41e1313713fc",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "Rename",
        "func": "// Définir le sujet du message\nmsg.topic = \"nidus/benchmark/processes\";\n// Vérifier si le tableau payload existe et n'est pas vide\nif (msg.payload && Array.isArray(msg.payload) && msg.payload.length > 0) {\n    // Convertir les valeurs en chaînes de caractères en nombres entiers\n    var numericValues = msg.payload.map(function (value) {\n        return parseInt(value, 10); // 10 indique la base décimale\n    }).filter(function (value) {\n        return !isNaN(value); // Filtrer les valeurs non numériques\n    });\n\n    // Vérifier si des valeurs numériques ont été trouvées\n    if (numericValues.length > 0) {\n        // Calculer la somme des valeurs numériques dans le tableau\n        var sum = numericValues.reduce(function (acc, value) {\n            return acc + value;\n        }, 0);\n\n        // Calculer la moyenne en divisant la somme par le nombre d'éléments\n        var moyenne = sum / numericValues.length;\n\n        // Arrondir la moyenne à deux chiffres après la virgule et au multiple de 0.05 le plus proche\n        moyenne = Math.round(moyenne * 20) / 20;\n\n        // Ajouter la moyenne au message\n        msg.moyenne = moyenne.toFixed(2);\n    } else {\n        // Si aucune valeur numérique n'a été trouvée, définir la moyenne à 0\n        msg.moyenne = \"0.00\";\n    }\n} else {\n    // Si le tableau est vide ou n'existe pas, définir la moyenne à 0\n    msg.moyenne = \"0.00\";\n}\n\n// Renvoyer le message modifié\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 880,
        "wires": [
            [
                "4e4f4f7a85b8a2cd",
                "9a3d6e47ed36af55"
            ]
        ]
    },
    {
        "id": "4e4f4f7a85b8a2cd",
        "type": "join",
        "z": "8b4c08f2a705dd79",
        "name": "Values",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "8",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1330,
        "y": 540,
        "wires": [
            [
                "5f624f25.98f38",
                "ac62bafd63eb963d",
                "866c4b8b950d47ba",
                "1b1ec814f8b80459"
            ]
        ]
    },
    {
        "id": "9a3d6e47ed36af55",
        "type": "join",
        "z": "8b4c08f2a705dd79",
        "name": "Moyennes",
        "mode": "custom",
        "build": "object",
        "property": "moyenne",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1390,
        "y": 740,
        "wires": [
            [
                "c71d1f39bb911b75"
            ]
        ]
    },
    {
        "id": "e8ac5800cefa20d9",
        "type": "link out",
        "z": "8b4c08f2a705dd79",
        "name": "End_PDF",
        "mode": "link",
        "links": [
            "26a410550aabca72"
        ],
        "x": 1995,
        "y": 740,
        "wires": []
    },
    {
        "id": "26a410550aabca72",
        "type": "link in",
        "z": "8b4c08f2a705dd79",
        "name": "From_PDF",
        "links": [
            "e8ac5800cefa20d9"
        ],
        "x": 265,
        "y": 320,
        "wires": [
            [
                "a715f7a4.a398a8"
            ]
        ]
    },
    {
        "id": "3b8849fe5c0112fb",
        "type": "join",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 1010,
        "y": 760,
        "wires": [
            [
                "11d7e6fa4a405b9d"
            ]
        ]
    },
    {
        "id": "639890ec7f76a77c",
        "type": "mqtt-plus in",
        "z": "8b4c08f2a705dd79",
        "name": "Volt/Temp",
        "topic": "/",
        "qos": "2",
        "broker": "ae336b538b957769",
        "x": 840,
        "y": 760,
        "wires": [
            [
                "3b8849fe5c0112fb"
            ],
            []
        ]
    },
    {
        "id": "11d7e6fa4a405b9d",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "Rename",
        "func": "// Définir le sujet du message\nmsg.topic = \"volt/benchmark/temp\";\n\n// Vérifier si le tableau payload existe et n'est pas vide\nif (msg.payload && Array.isArray(msg.payload) && msg.payload.length > 0) {\n    // Convertir les valeurs en chaînes de caractères en nombres entiers\n    var numericValues = msg.payload.map(function (value) {\n        return parseInt(value, 10); // 10 indique la base décimale\n    }).filter(function (value) {\n        return !isNaN(value); // Filtrer les valeurs non numériques\n    });\n\n    // Vérifier si des valeurs numériques ont été trouvées\n    if (numericValues.length > 0) {\n        // Calculer la somme des valeurs numériques dans le tableau\n        var sum = numericValues.reduce(function (acc, value) {\n            return acc + value;\n        }, 0);\n\n        // Calculer la moyenne en divisant la somme par le nombre d'éléments\n        var moyenne = sum / numericValues.length;\n\n        // Arrondir la moyenne à deux chiffres après la virgule et au multiple de 0.05 le plus proche\n        moyenne = Math.round(moyenne * 20) / 20;\n\n        // Ajouter la moyenne au message\n        msg.moyenne = moyenne.toFixed(2);\n    } else {\n        // Si aucune valeur numérique n'a été trouvée, définir la moyenne à 0\n        msg.moyenne = \"0.00\";\n    }\n} else {\n    // Si le tableau est vide ou n'existe pas, définir la moyenne à 0\n    msg.moyenne = \"0.00\";\n}\n\n// Renvoyer le message modifié\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 760,
        "wires": [
            [
                "4e4f4f7a85b8a2cd",
                "9a3d6e47ed36af55"
            ]
        ]
    },
    {
        "id": "16850c4ba1026ed6",
        "type": "join",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 1010,
        "y": 920,
        "wires": [
            [
                "6aaa0d33e800fed0"
            ]
        ]
    },
    {
        "id": "36a3fe1d1cb9d60b",
        "type": "mqtt-plus in",
        "z": "8b4c08f2a705dd79",
        "name": "Nidus/temp",
        "topic": "/",
        "qos": "2",
        "broker": "ae336b538b957769",
        "x": 850,
        "y": 920,
        "wires": [
            [
                "16850c4ba1026ed6"
            ],
            []
        ]
    },
    {
        "id": "6aaa0d33e800fed0",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "Rename",
        "func": "// Définir le sujet du message\nmsg.topic = \"nidus/benchmark/temp\";\n// Vérifier si le tableau payload existe et n'est pas vide\nif (msg.payload && Array.isArray(msg.payload) && msg.payload.length > 0) {\n    // Convertir les valeurs en chaînes de caractères en nombres entiers\n    var numericValues = msg.payload.map(function (value) {\n        return parseInt(value, 10); // 10 indique la base décimale\n    }).filter(function (value) {\n        return !isNaN(value); // Filtrer les valeurs non numériques\n    });\n\n    // Vérifier si des valeurs numériques ont été trouvées\n    if (numericValues.length > 0) {\n        // Calculer la somme des valeurs numériques dans le tableau\n        var sum = numericValues.reduce(function (acc, value) {\n            return acc + value;\n        }, 0);\n\n        // Calculer la moyenne en divisant la somme par le nombre d'éléments\n        var moyenne = sum / numericValues.length;\n\n        // Arrondir la moyenne à deux chiffres après la virgule et au multiple de 0.05 le plus proche\n        moyenne = Math.round(moyenne * 20) / 20;\n\n        // Ajouter la moyenne au message\n        msg.moyenne = moyenne.toFixed(2);\n    } else {\n        // Si aucune valeur numérique n'a été trouvée, définir la moyenne à 0\n        msg.moyenne = \"0.00\";\n    }\n} else {\n    // Si le tableau est vide ou n'existe pas, définir la moyenne à 0\n    msg.moyenne = \"0.00\";\n}\n\n// Renvoyer le message modifié\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 920,
        "wires": [
            [
                "4e4f4f7a85b8a2cd",
                "9a3d6e47ed36af55"
            ]
        ]
    },
    {
        "id": "45632b1506735cd0",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "MiseAJourDelay",
        "func": "// Vérifier si msg.delay est défini\nif (msg.delay !== undefined) {\n    if(msg.delay === 1){\n        return null;\n    }\n    // Convertir msg.delay en nombre (si c'est une chaîne)\n    const currentDelay = parseFloat(msg.delay);\n\n    // Vérifier si currentDelay est un nombre valide\n    if (!isNaN(currentDelay)) {\n        // Soustraire 250 de currentDelay, mais s'assurer que le résultat est positif\n        const newDelay = Math.max(currentDelay - 250, 0);\n\n        // Mettre à jour msg.delay avec la nouvelle valeur\n        msg.delay = newDelay;\n\n        // Si le nouveau délai est 0, ne rien retourner\n        if (newDelay === 0) {\n            msg.delay = 1;\n            msg.originalDelay = 1;\n            return msg;\n        } else {\n            // Sinon, retourner le message avec le nouveau délai\n            return msg;\n        }\n    } else {\n        // msg.delay n'est pas un nombre valide\n        return null;\n    }\n} else {\n    // msg.delay n'est pas défini\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 640,
        "wires": [
            [
                "66dfc0722fba42f0",
                "cbc0fa7df08ccd70",
                "1c59637f2afd3963",
                "2e815e58756a55d3"
            ]
        ]
    },
    {
        "id": "66dfc0722fba42f0",
        "type": "delay",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "pauseType": "delay",
        "timeout": "250",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 470,
        "y": 640,
        "wires": [
            [
                "45632b1506735cd0"
            ]
        ]
    },
    {
        "id": "1a94997d94eb26fa",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "CopyDelay",
        "func": "// Vérifier si msg.delay est défini\nif (msg.delay !== undefined) {\nmsg.originalDelay = msg.delay;\nreturn msg;\n}else{\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 700,
        "wires": [
            [
                "45632b1506735cd0"
            ]
        ]
    },
    {
        "id": "5f624f25.98f38",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "Vertical Bar Chart ",
        "func": "// Données reçues du flux précédent\nvar rawData = msg.payload;\n\n// Extraction des données nécessaires\nvar voltCpuData = rawData[\"volt/benchmark/cpu\"];\nvar voltRamData = rawData[\"volt/benchmark/ram\"];\nvar voltProcessesData = rawData[\"volt/benchmark/processes\"];\nvar voltTempData = rawData[\"volt/benchmark/temp\"];\nvar nidusCpuData = rawData[\"nidus/benchmark/cpu\"];\nvar nidusRamData = rawData[\"nidus/benchmark/ram\"];\nvar nidusProcessesData = rawData[\"nidus/benchmark/processes\"];\nvar nidusTempData = rawData[\"nidus/benchmark/temp\"];\n\n// Création du graphique\nvar chartData = {\n    type: 'bar',\n    options: {\n        title: {\n            display: true,\n            text: 'Comparaison des performances'\n        },\n        legend: {\n            display: true\n        },\n        chartArea: {\n            backgroundColor: '#d3d7dd'\n        },\n        plugins: {\n            datalabels: {\n                display: true,\n                backgroundColor: 'whitesmoke',\n                borderRadius: 1,\n                padding: 1,\n                align: 'right',\n                anchor: function (context) {\n                    if (context.dataIndex == context.dataset.data.length - 1) {\n                        return 'center';\n                    } else {\n                        return 'end';\n                    }\n                },\n                offset: 8,\n                formatter: function (value) {\n                    return value > 0 ? value.toLocaleString() : '';\n                }\n            }\n        }\n    },\n    data: {\n        datasets: [\n            {\n                label: \"Volt CPU\",\n                backgroundColor: 'rgba(57,97,184,0.8)',\n                data: voltCpuData\n            },\n            {\n                label: \"Volt RAM\",\n                backgroundColor: 'rgba(127, 184, 57,0.8)',\n                data: voltRamData\n            },\n            {\n                label: \"Volt Processes\",\n                backgroundColor: 'rgba(184, 57, 127,0.8)',\n                data: voltProcessesData\n            },\n            {\n                label: \"Volt Temp\",\n                backgroundColor: 'rgba(184, 127, 57,0.8)',\n                data: voltTempData\n            },\n            {\n                label: \"Nidus CPU\",\n                backgroundColor: 'rgba(97, 184, 57,0.8)',\n                data: nidusCpuData\n            },\n            {\n                label: \"Nidus RAM\",\n                backgroundColor: 'rgba(57,97,127,0.8)',\n                data: nidusRamData\n            },\n            {\n                label: \"Nidus Processes\",\n                backgroundColor: 'rgba(57,127,184,0.8)',\n                data: nidusProcessesData\n            },\n            {\n                label: \"Nidus Temp\",\n                backgroundColor: 'rgba(127, 57, 184,0.8)',\n                data: nidusTempData\n            }\n        ]\n    }\n};\n\nmsg.payload = chartData;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 500,
        "wires": [
            [
                "89dfcf39.990ca"
            ]
        ]
    },
    {
        "id": "89dfcf39.990ca",
        "type": "chart-image",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "width": "1000",
        "height": "1000",
        "x": 1730,
        "y": 500,
        "wires": [
            [
                "62271758.c63728"
            ]
        ]
    },
    {
        "id": "62271758.c63728",
        "type": "file",
        "z": "8b4c08f2a705dd79",
        "name": "Image dump",
        "filename": "/home/NodeRed/bar.png",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2010,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "ac62bafd63eb963d",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "Vertical Line Chart",
        "func": "// Données reçues du flux précédent\nvar rawData = msg.payload;\nvar delayInSeconds = msg.delay / 1000; // Conversion en secondes\n\n// Extraction des données nécessaires\nvar voltCpuData = rawData[\"volt/benchmark/cpu\"];\nvar voltRamData = rawData[\"volt/benchmark/ram\"];\nvar voltProcessesData = rawData[\"volt/benchmark/processes\"];\nvar voltTempData = rawData[\"volt/benchmark/temp\"];\nvar nidusCpuData = rawData[\"nidus/benchmark/cpu\"];\nvar nidusRamData = rawData[\"nidus/benchmark/ram\"];\nvar nidusProcessesData = rawData[\"nidus/benchmark/processes\"];\nvar nidusTempData = rawData[\"nidus/benchmark/temp\"];\n\n// Création du graphique\nvar chartData = {\n    type: 'line',  // Changement du type de graphique en \"line\"\n    options: {\n        title: {\n            display: true,\n            text: 'Comparaison des performances'\n        },\n        legend: {\n            display: true\n        },\n        chartArea: {\n            backgroundColor: '#d3d7dd'\n        },\n        plugins: {\n            datalabels: {\n                display: false  // Désactiver l'affichage des étiquettes de données\n            }\n        }\n    },\n    data: {\n        labels: Array.from({ length: voltCpuData.length }, (_, i) => (i * delayInSeconds).toFixed(1)),  // Temps en secondes\n        datasets: [\n            {\n                label: \"Volt CPU\",\n                borderColor: 'rgba(0, 128, 255, 1)',  // Couleur de la ligne (couleur froide pour Volt)\n                fill: false,  // Désactiver le remplissage sous la ligne\n                data: voltCpuData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Volt RAM\",\n                borderColor: 'rgba(0, 255, 128, 1)',\n                fill: false,\n                data: voltRamData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Volt Temp\",\n                borderColor: 'rgba(255, 193, 37, 1)',\n                fill: false,\n                data: voltTempData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Nidus CPU\",\n                borderColor: 'rgba(255, 69, 0, 1)',\n                fill: false,\n                data: nidusCpuData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Nidus RAM\",\n                borderColor: 'rgba(255, 165, 0, 1)',\n                fill: false,\n                data: nidusRamData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Nidus Temp\",\n                borderColor: 'rgba(255, 0, 0, 1)',\n                fill: false,\n                data: nidusTempData,\n                pointRadius: 0,\n            }\n        ]\n    }\n};\n\nmsg.payload = chartData;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 540,
        "wires": [
            [
                "410a379834aff737"
            ]
        ]
    },
    {
        "id": "410a379834aff737",
        "type": "chart-image",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "width": "1920",
        "height": "1080",
        "x": 1730,
        "y": 540,
        "wires": [
            [
                "dfe30fa5a85a4a10"
            ]
        ]
    },
    {
        "id": "dfe30fa5a85a4a10",
        "type": "file",
        "z": "8b4c08f2a705dd79",
        "name": "Image dump",
        "filename": "/home/NodeRed/line.png",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2010,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "0624d850b450f11c",
        "type": "chart-image",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "width": "1920",
        "height": "1920",
        "x": 1730,
        "y": 580,
        "wires": [
            [
                "3c7687d83cf34e96",
                "0cb19cef3d4b79aa"
            ]
        ]
    },
    {
        "id": "3c7687d83cf34e96",
        "type": "file",
        "z": "8b4c08f2a705dd79",
        "name": "Image dump",
        "filename": "graphPath.volt.complet",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2010,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "35ae4744eb6cb342",
        "type": "chart-image",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "width": "1920",
        "height": "1920",
        "x": 1730,
        "y": 620,
        "wires": [
            [
                "d474eb71658b6f9b",
                "0cb19cef3d4b79aa"
            ]
        ]
    },
    {
        "id": "d474eb71658b6f9b",
        "type": "file",
        "z": "8b4c08f2a705dd79",
        "name": "Image dump",
        "filename": "graphPath.nidus.complet",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2010,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "1b1ec814f8b80459",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "Nidus Line Chart",
        "func": "// Données reçues du flux précédent\nvar rawData = msg.payload;\nvar delayInSeconds = msg.delay / 1000; // Conversion en secondes\nmsg.topic = \"NidusLineChart\";\n// Extraction des données nécessaires\nvar nidusCpuData = rawData[\"nidus/benchmark/cpu\"];\nvar nidusRamData = rawData[\"nidus/benchmark/ram\"];\nvar nidusTempData = rawData[\"nidus/benchmark/temp\"];\n\n// Création du graphique\nvar chartData = {\n    type: 'line',  // Changement du type de graphique en \"line\"\n    options: {\n        title: {\n            display: true,\n            text: 'Comparaison des performances'\n        },\n        legend: {\n            display: true\n        },\n        chartArea: {\n            backgroundColor: '#d3d7dd'\n        },\n        plugins: {\n            datalabels: {\n                display: false  // Désactiver l'affichage des étiquettes de données\n            }\n        }\n    },\n    data: {\n        labels: Array.from({ length: nidusCpuData.length }, (_, i) => (i * delayInSeconds).toFixed(1)),  // Temps en secondes\n        datasets: [\n            \n            {\n                label: \"Nidus CPU\",\n                borderColor: 'rgba(255, 69, 0, 1)',\n                fill: false,\n                data: nidusCpuData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Nidus RAM\",\n                borderColor: 'rgba(255, 165, 0, 1)',\n                fill: false,\n                data: nidusRamData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Nidus Temp\",\n                borderColor: 'rgba(255, 0, 0, 1)',\n                fill: false,\n                data: nidusTempData,\n                pointRadius: 0,\n            }\n        ]\n    }\n};\n\nmsg.payload = chartData;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 620,
        "wires": [
            [
                "35ae4744eb6cb342"
            ]
        ]
    },
    {
        "id": "866c4b8b950d47ba",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "Volt Line Chart",
        "func": "// Données reçues du flux précédent\nvar rawData = msg.payload;\nvar delayInSeconds = msg.delay / 1000; // Conversion en secondes\nmsg.topic = \"VoltLineChart\";\n// Extraction des données nécessaires\nvar voltCpuData = rawData[\"volt/benchmark/cpu\"];\nvar voltRamData = rawData[\"volt/benchmark/ram\"];\nvar voltTempData = rawData[\"volt/benchmark/temp\"];\n\n\n// Création du graphique\nvar chartData = {\n    type: 'line',  // Changement du type de graphique en \"line\"\n    options: {\n        title: {\n            display: true,\n            text: 'Comparaison des performances'\n        },\n        legend: {\n            display: true\n        },\n        chartArea: {\n            backgroundColor: '#d3d7dd'\n        },\n        plugins: {\n            datalabels: {\n                display: false  // Désactiver l'affichage des étiquettes de données\n            }\n        }\n    },\n    data: {\n        labels: Array.from({ length: voltCpuData.length }, (_, i) => (i * delayInSeconds).toFixed(1)),  // Temps en secondes\n        datasets: [\n            {\n                label: \"Volt CPU\",\n                borderColor: 'rgba(0, 128, 255, 1)',  // Couleur de la ligne (couleur froide pour Volt)\n                fill: false,  // Désactiver le remplissage sous la ligne\n                data: voltCpuData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Volt RAM\",\n                borderColor: 'rgba(0, 255, 128, 1)',\n                fill: false,\n                data: voltRamData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Volt Temp\",\n                borderColor: 'rgba(0, 173, 0, 1)',\n                fill: false,\n                data: voltTempData,\n                pointRadius: 0,\n            },\n\n        ]\n    }\n};\n\nmsg.payload = chartData;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 580,
        "wires": [
            [
                "0624d850b450f11c"
            ]
        ]
    },
    {
        "id": "e87001580862758b",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "Commmandes de StressTest",
        "func": "const sshNidus = \"ssh tobby@nidus\"; \nconst sshVolt = \"ssh tobby@157.26.228.77\"; \n\n    var stressCommandsNidus;\n    var stressCommandsVolt;\n\n    if (msg.payload.stressNidus) {\n        var msg1 = {\n            payload : `stress-ng --cpu 2 --io 1 --timeout ${msg.payload.timeStress*60}s --cpu-load 100 --vm-bytes 3G`\n        };\n    }\n\n    if (msg.payload.stressVolt) {\n        var msg2 = {\n            payload: `ssh tobby@157.26.228.77 \\\"stress-ng --cpu 2 --io 1 --timeout ${msg.payload.timeStress*60}s --cpu-load 100 --vm-bytes 3G\\\"`\n        };\n    }\n    node.send([msg1, msg2]);\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 840,
        "wires": [
            [
                "5556b3e3ae54080e"
            ],
            [
                "5556b3e3ae54080e"
            ]
        ]
    },
    {
        "id": "5556b3e3ae54080e",
        "type": "exec",
        "z": "8b4c08f2a705dd79",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 610,
        "y": 900,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "cbc0fa7df08ccd70",
        "type": "ui_template",
        "z": "8b4c08f2a705dd79",
        "group": "160e81fb.f1c86e",
        "name": "ProgressBar",
        "order": 3,
        "width": 0,
        "height": 0,
        "format": "<style>\n    .custom-progress-bar .md-progress-linear-fill {\n        height: 20px;\n        /* Définissez la hauteur souhaitée ici */\n    }\n</style>\n\n<div layout=\"column\" layout-align=\"center center\">\n    <md-progress-linear class=\"md-accent custom-progress-bar\" md-mode=\"determinate\"\n        value=\"{{(msg.originalDelay - msg.delay) / msg.originalDelay * 100}}\"\n        ng-show=\"msg.delay !== undefined && msg.originalDelay !== undefined\"></md-progress-linear>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 470,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "0cf627b430aec580",
        "type": "join",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "4",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 1850,
        "y": 840,
        "wires": [
            [
                "e58255ccc7601a18"
            ]
        ]
    },
    {
        "id": "c71d1f39bb911b75",
        "type": "change",
        "z": "8b4c08f2a705dd79",
        "name": "Organise Payload-Topic",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "moyenne",
                "tot": "msg",
                "dc": true
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "moyenne",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1450,
        "y": 800,
        "wires": [
            [
                "0cf627b430aec580",
                "b804feabadb6d67c",
                "58239d73.30c134",
                "5f72196b81b8a6cd"
            ]
        ]
    },
    {
        "id": "696f35b1c89a67f0",
        "type": "change",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "complete",
                "pt": "msg",
                "to": "true",
                "tot": "bool",
                "dc": true
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "ChartComplete",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1860,
        "y": 680,
        "wires": [
            [
                "9a3d6e47ed36af55"
            ]
        ]
    },
    {
        "id": "e58255ccc7601a18",
        "type": "change",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Moyenne_Graph",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1750,
        "y": 780,
        "wires": [
            [
                "ce7fc785e5173ede"
            ]
        ]
    },
    {
        "id": "58239d73.30c134",
        "type": "file in",
        "z": "8b4c08f2a705dd79",
        "name": "Read Graph Nidus Complet",
        "filename": "graphPath.nidus.complet",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1460,
        "y": 1020,
        "wires": [
            [
                "927013c7ac3bd3b3"
            ]
        ]
    },
    {
        "id": "927013c7ac3bd3b3",
        "type": "base64",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "action": "str",
        "property": "msg.payload",
        "x": 1680,
        "y": 1020,
        "wires": [
            [
                "1ae0b1e5953c4dc9"
            ]
        ]
    },
    {
        "id": "b804feabadb6d67c",
        "type": "file in",
        "z": "8b4c08f2a705dd79",
        "name": "Read Graph Volt Complet",
        "filename": "graphPath.volt.complet",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1450,
        "y": 900,
        "wires": [
            [
                "75dba7cb1b841b76"
            ]
        ]
    },
    {
        "id": "75dba7cb1b841b76",
        "type": "base64",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "action": "str",
        "property": "msg.payload",
        "x": 1680,
        "y": 900,
        "wires": [
            [
                "0538fdff5e05960b"
            ]
        ]
    },
    {
        "id": "0538fdff5e05960b",
        "type": "change",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "voltGraph",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1670,
        "y": 860,
        "wires": [
            [
                "0cf627b430aec580"
            ]
        ]
    },
    {
        "id": "1ae0b1e5953c4dc9",
        "type": "change",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "nidusGraph",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1670,
        "y": 1060,
        "wires": [
            [
                "0cf627b430aec580"
            ]
        ]
    },
    {
        "id": "f1879fc3dd7ac416",
        "type": "debug",
        "z": "8b4c08f2a705dd79",
        "name": "CATCH_ERROR",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 1180,
        "wires": []
    },
    {
        "id": "8a147f8e2c4d3ce8",
        "type": "catch",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 160,
        "y": 1180,
        "wires": [
            [
                "f1879fc3dd7ac416"
            ]
        ]
    },
    {
        "id": "0cb19cef3d4b79aa",
        "type": "join",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "3",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1710,
        "y": 680,
        "wires": [
            [
                "696f35b1c89a67f0"
            ]
        ]
    },
    {
        "id": "24fc8fe41b101320",
        "type": "ina-sensor",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "handle": "173c4031bd3a25c0",
        "x": 270,
        "y": 520,
        "wires": [
            [
                "ddb601b1002aee59"
            ],
            [
                "ddb601b1002aee59"
            ]
        ]
    },
    {
        "id": "6a813d78d66370e3",
        "type": "join",
        "z": "8b4c08f2a705dd79",
        "name": "Join_2",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 750,
        "y": 480,
        "wires": [
            [
                "998946691c1cd0c3"
            ]
        ]
    },
    {
        "id": "1c59637f2afd3963",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "USE",
        "func": "msg.use = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 520,
        "wires": [
            [
                "6a813d78d66370e3"
            ]
        ]
    },
    {
        "id": "9d3341bb48f633bc",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "MilliWatt",
        "func": "// Récupérer les valeurs de courant (mA) et de tension (V) depuis les propriétés msg.payload\nvar current_mA = msg.payload.miliamps;\nvar voltage_V = msg.payload.voltage;\n\n// Calculer la puissance en watts (W)\nvar power_W = (current_mA / 1000) * voltage_V;  // Convertir le courant en ampères\n\n// Vérifier si la tension est négative\nif (voltage_V < 0.5) {\n    // Si la tension est négative, ne rien faire et retourner le message inchangé\n    return null;\n}\n\n// Créer un nouvel objet msg avec la puissance en watts comme payload\nmsg.payload = power_W*1000;\nmsg.topic = \"Watt\";\n// Renvoyer le message modifié\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 480,
        "wires": [
            [
                "6a813d78d66370e3"
            ]
        ]
    },
    {
        "id": "ddb601b1002aee59",
        "type": "join",
        "z": "8b4c08f2a705dd79",
        "name": "Join_Amp_Volt",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 440,
        "y": 480,
        "wires": [
            [
                "9d3341bb48f633bc"
            ]
        ]
    },
    {
        "id": "998946691c1cd0c3",
        "type": "switch",
        "z": "8b4c08f2a705dd79",
        "name": "DropWhenNotUse",
        "property": "use",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 930,
        "y": 480,
        "wires": [
            [
                "27123f4d6dd99166"
            ],
            []
        ]
    },
    {
        "id": "1b0aeb2184b98462",
        "type": "join",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 1010,
        "y": 600,
        "wires": [
            [
                "af4c526055903414"
            ]
        ]
    },
    {
        "id": "af4c526055903414",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "Rename",
        "func": "// Définir le sujet du message\nmsg.topic = \"volt/benchmark/watt\";\n\n// Vérifier si le tableau payload existe et n'est pas vide\nif (msg.payload && Array.isArray(msg.payload) && msg.payload.length > 0) {\n    // Convertir les valeurs en chaînes de caractères en nombres entiers\n    var numericValues = msg.payload.map(function (value) {\n        return parseInt(value, 10); // 10 indique la base décimale\n    }).filter(function (value) {\n        return !isNaN(value); // Filtrer les valeurs non numériques\n    });\n\n    // Vérifier si des valeurs numériques ont été trouvées\n    if (numericValues.length > 0) {\n        // Calculer la somme des valeurs numériques dans le tableau\n        var sum = numericValues.reduce(function (acc, value) {\n            return acc + value;\n        }, 0);\n\n        // Calculer la moyenne en divisant la somme par le nombre d'éléments\n        var moyenne = sum / numericValues.length;\n\n        // Arrondir la moyenne à deux chiffres après la virgule et au multiple de 0.05 le plus proche\n        moyenne = Math.round(moyenne * 20) / 20;\n\n        // Ajouter la moyenne au message\n        msg.moyenne = moyenne.toFixed(2);\n    } else {\n        // Si aucune valeur numérique n'a été trouvée, définir la moyenne à 0\n        msg.moyenne = \"0.00\";\n    }\n} else {\n    // Si le tableau est vide ou n'existe pas, définir la moyenne à 0\n    msg.moyenne.volt.benchmark.cpu = \"0.00\";\n}\n\n// Renvoyer le message modifié\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 600,
        "wires": [
            [
                "8783fd80a6da0d24",
                "9a3d6e47ed36af55"
            ]
        ]
    },
    {
        "id": "27123f4d6dd99166",
        "type": "change",
        "z": "8b4c08f2a705dd79",
        "name": "Set Payload Watt",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.Watt",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1150,
        "y": 480,
        "wires": [
            [
                "1b0aeb2184b98462"
            ]
        ]
    },
    {
        "id": "8783fd80a6da0d24",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "Watt Line Chart",
        "func": "// Données reçues du flux précédent\nvar rawData = msg.payload;\nvar delayInSeconds = msg.delay / 1000; // Conversion en secondes\n\n// Extraction des données nécessaires\nvar voltWatt = rawData;\n// Création du graphique\nvar chartData = {\n    type: 'line',  // Changement du type de graphique en \"line\"\n    options: {\n        title: {\n            display: true,\n            text: 'Comparaison des performances'\n        },\n        legend: {\n            display: true\n        },\n        chartArea: {\n            backgroundColor: '#d3d7dd'\n        },\n        plugins: {\n            datalabels: {\n                display: false  // Désactiver l'affichage des étiquettes de données\n            }\n        }\n    },\n    data: {\n        labels: Array.from({ length: voltWatt.length }, (_, i) => (i * delayInSeconds).toFixed(1)),  // Temps en secondes\n        datasets: [\n            \n            {\n                label: \"Volt Watt\",\n                borderColor: 'rgba(0, 255, 255, 1)',\n                fill: false,\n                data: voltWatt,\n                pointRadius: 0,\n            },\n        ]\n    }\n};\n\nmsg.payload = chartData;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 460,
        "wires": [
            [
                "df8c40fc1071e2b0"
            ]
        ]
    },
    {
        "id": "df8c40fc1071e2b0",
        "type": "chart-image",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "width": "1920",
        "height": "1920",
        "x": 1730,
        "y": 460,
        "wires": [
            [
                "72b2cd6c7aeb1dcb",
                "0cb19cef3d4b79aa"
            ]
        ]
    },
    {
        "id": "72b2cd6c7aeb1dcb",
        "type": "file",
        "z": "8b4c08f2a705dd79",
        "name": "Image dump",
        "filename": "graphPath.volt.watt",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2010,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "5f72196b81b8a6cd",
        "type": "file in",
        "z": "8b4c08f2a705dd79",
        "name": "Read Graph Volt Watt",
        "filename": "graphPath.volt.watt",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1440,
        "y": 940,
        "wires": [
            [
                "b671f4bd54bdfe46"
            ]
        ]
    },
    {
        "id": "b671f4bd54bdfe46",
        "type": "base64",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "action": "str",
        "property": "msg.payload",
        "x": 1680,
        "y": 940,
        "wires": [
            [
                "2c0b998967ff7c0d"
            ]
        ]
    },
    {
        "id": "2c0b998967ff7c0d",
        "type": "change",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "wattGraph",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1670,
        "y": 980,
        "wires": [
            [
                "0cf627b430aec580"
            ]
        ]
    },
    {
        "id": "2e815e58756a55d3",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "Prepare Payload Time",
        "func": "// Vérifier si les valeurs sont toutes les deux égales à 1 milliseconde\nif (msg.originalDelay === 1 && msg.delay === 1) {\n    msg.payload = \"00:00\";  // Cas spécial\n} else {\n    // Calculer le temps effectué et le temps total (en millisecondes)\n    var tempsEffectue = msg.originalDelay - msg.delay;\n    var tempsTotal = msg.originalDelay;\n\n    // Convertir les millisecondes en secondes\n    tempsEffectue /= 1000;\n    tempsTotal /= 1000;\n\n    // Arrondir les secondes\n    tempsEffectue = Math.round(tempsEffectue);\n    tempsTotal = Math.round(tempsTotal);\n\n    // Formater les temps dans le format \"mm:ss\"\n    var formatTemps = function (temps) {\n        var minutes = Math.floor(temps / 60);\n        var secondes = temps % 60;\n        return (minutes < 10 ? \"0\" : \"\") + minutes + \":\" + (secondes < 10 ? \"0\" : \"\") + secondes;\n    };\n\n    // Former le résultat\n    var tempsFormate = formatTemps(tempsEffectue) + \"/\" + formatTemps(tempsTotal);\n\n    msg.payload = tempsFormate;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 600,
        "wires": [
            [
                "f1025c377f95d47c"
            ]
        ]
    },
    {
        "id": "f1025c377f95d47c",
        "type": "ui_text",
        "z": "8b4c08f2a705dd79",
        "group": "160e81fb.f1c86e",
        "order": 5,
        "width": 10,
        "height": 2,
        "name": "Time",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "30",
        "color": "#e01b24",
        "x": 250,
        "y": 560,
        "wires": []
    },
    {
        "id": "dadf8df00e8a66e0",
        "type": "ui_toast",
        "z": "8b4c08f2a705dd79",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "Valider",
        "cancel": "Annuler",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 150,
        "y": 900,
        "wires": [
            [
                "73eaf84541d1b946"
            ]
        ]
    },
    {
        "id": "0ea63a06c4580851",
        "type": "ui_button",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "group": "160e81fb.f1c86e",
        "order": 6,
        "width": 4,
        "height": 2,
        "passthru": true,
        "label": "Purge",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "Voulez vous vraiment purger tout les fichier generé par Node-Red ?",
        "payloadType": "str",
        "topic": "Purge des fichier !!!",
        "topicType": "str",
        "x": 130,
        "y": 860,
        "wires": [
            [
                "dadf8df00e8a66e0"
            ]
        ]
    },
    {
        "id": "2eef0c7e57e55032",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "Purge",
        "func": "if (msg.payload === \"Valider\"){\n    msg.payload = \"rm -r /home/NodeRed/*\";\n    return msg;\n}else{\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 980,
        "wires": [
            [
                "5556b3e3ae54080e"
            ]
        ]
    },
    {
        "id": "cd1ab62ecb897dfe",
        "type": "ui_toast",
        "z": "8b4c08f2a705dd79",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "Valider",
        "cancel": "Annuler",
        "raw": false,
        "className": "",
        "topic": "VRAIMENT ???",
        "name": "",
        "x": 150,
        "y": 980,
        "wires": [
            [
                "2eef0c7e57e55032",
                "fcc0e2816a1e8a96"
            ]
        ]
    },
    {
        "id": "73eaf84541d1b946",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "function 2",
        "func": "if (msg.payload === \"Valider\"){\n    msg.payload = \"En êtes vous bien sûr ???\";\n    return msg;\n}else{\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 940,
        "wires": [
            [
                "cd1ab62ecb897dfe"
            ]
        ]
    },
    {
        "id": "fcc0e2816a1e8a96",
        "type": "delay",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 340,
        "y": 1020,
        "wires": [
            [
                "764a61b3fe2e36ab"
            ]
        ]
    },
    {
        "id": "764a61b3fe2e36ab",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "Mkdir",
        "func": "if (msg.payload === \"Valider\"){\n    msg.payload = \"mkdir /home/NodeRed/png /home/NodeRed/pdf\";\n    return msg;\n}else{\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1020,
        "wires": [
            [
                "5556b3e3ae54080e"
            ]
        ]
    },
    {
        "id": "6f25a04902ba1d25",
        "type": "comment",
        "z": "a922dcbcf6a2e8c4",
        "name": "File Browser",
        "info": "1) Update the default folder in the Init node\n2) Update the default folder in the Reset node as well\n3) You can duplicate the Reset nodes and use them as saved shortcuts\n4) Check the Convert Timestamps function node if you want to see your dates in a different format. I just used the Javascript toISOString format.\n5) The Graph button can read any CSV file which have any number of values, but the first column always contains a timestamp column with javascript timestamp of the data point.",
        "x": 530,
        "y": 200,
        "wires": []
    },
    {
        "id": "1c4e8ca2e74e3c5c",
        "type": "inject",
        "z": "a922dcbcf6a2e8c4",
        "name": "Init",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "change",
        "payload": "/home/NodeRed/pdf",
        "payloadType": "str",
        "x": 530,
        "y": 360,
        "wires": [
            [
                "345ba0404594d119"
            ]
        ]
    },
    {
        "id": "79e20eb04483680c",
        "type": "ui_button",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "group": "7a02dc45cdd22958",
        "order": 4,
        "width": 4,
        "height": 2,
        "passthru": true,
        "label": "Refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "refresh",
        "payload": "/home/NodeRed/pdf",
        "payloadType": "str",
        "topic": "change",
        "topicType": "str",
        "x": 540,
        "y": 400,
        "wires": [
            [
                "345ba0404594d119"
            ]
        ]
    },
    {
        "id": "3843583d460371ed",
        "type": "ui_template",
        "z": "a922dcbcf6a2e8c4",
        "group": "7a02dc45cdd22958",
        "name": "",
        "order": 1,
        "width": 18,
        "height": "13",
        "format": "<div ng-bind-html=\"msg.payload\" height=\"400\" style=\"height: 400px;\"><br/>\n</div>\n<style>\n/* Applique des styles aux liens */\na[href] {\ncolor: #d93347; /* Couleur du lien */\ntext-decoration: none; /* Pas de soulignement */\n}\n\n/* Applique des styles au survol des liens */\na[href]:hover {\ncolor: #cb0505; /* Couleur du lien au survol */\ntext-decoration: underline; /* Soulignement au survol */\n}\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1520,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "c6bd58acb05c9d54",
        "type": "template",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<table width=\"100%\">\n    <tr><th>Nom de Fichier</th><th>Taille</th><th>Créer</th><th>Changer</th></tr>\n    {{#payload}}\n        <tr>\n            <td><a href=\"/download?filename={{name}}\" target=\"blank\">{{fname}}</a></td>\n            <td>{{stat.size}}</td>\n            <td>{{stat.created}}</td>\n            <td>{{stat.changed}}</td>\n        </tr>\n    {{/payload}}\n</table>\n",
        "output": "str",
        "x": 1360,
        "y": 400,
        "wires": [
            [
                "3843583d460371ed"
            ]
        ]
    },
    {
        "id": "f95104a3aeee341f",
        "type": "function",
        "z": "a922dcbcf6a2e8c4",
        "name": "Convert timestamps",
        "func": "// Parcourir chaque élément dans le tableau \"payload\" du message\nfor (var i = 0; i < msg.payload.length; i++) {\n    // Formater et mettre à jour les propriétés de date/heure dans l'objet \"stat\"\n    msg.payload[i].stat.created = msg.payload[i].stat.created.toISOString().slice(0, 19).replace('T', ' ');\n    msg.payload[i].stat.changed = msg.payload[i].stat.changed.toISOString().slice(0, 19).replace('T', ' ');\n    msg.payload[i].stat.accessed = msg.payload[i].stat.accessed.toISOString().slice(0, 19).replace('T', ' ');\n    msg.payload[i].stat.statusChanged = msg.payload[i].stat.statusChanged.toISOString().slice(0, 19).replace('T', ' ');\n\n    // Extraire le nom de fichier à partir de la propriété \"name\" et mettre à jour \"fname\"\n    msg.payload[i].fname = msg.payload[i].name.replace(/^.*(\\\\|\\/|\\:)/, '');\n}\n\nreturn msg; // Renvoyer le message modifié\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 400,
        "wires": [
            [
                "c6bd58acb05c9d54"
            ]
        ]
    },
    {
        "id": "7ffab4b6bb62d3ba",
        "type": "http in",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "url": "/download",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 620,
        "y": 460,
        "wires": [
            [
                "1aeacf9bcd562aad"
            ]
        ]
    },
    {
        "id": "a9096e33e13a15fa",
        "type": "http response",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1410,
        "y": 460,
        "wires": []
    },
    {
        "id": "1aeacf9bcd562aad",
        "type": "function",
        "z": "a922dcbcf6a2e8c4",
        "name": "Get the file name",
        "func": "msg.filename = msg.req.query.filename;\nmsg.contentdisposition = \"attachment; filename=\\\"\" + msg.req.query.filename.replace(/^.*(\\\\|\\/|\\:)/, '') + \"\\\"\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 870,
        "y": 460,
        "wires": [
            [
                "0c825041986df20c"
            ]
        ],
        "outputLabels": [
            "Folder selected",
            "File selected"
        ]
    },
    {
        "id": "0c825041986df20c",
        "type": "file in",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "filename": "",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 1060,
        "y": 460,
        "wires": [
            [
                "89587c20b7da1a31"
            ]
        ]
    },
    {
        "id": "89587c20b7da1a31",
        "type": "change",
        "z": "a922dcbcf6a2e8c4",
        "name": "Set Headers",
        "rules": [
            {
                "t": "set",
                "p": "headers",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "headers.content-type",
                "pt": "msg",
                "to": "text/csv",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "headers.Content-Disposition",
                "pt": "msg",
                "to": "contentdisposition",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1230,
        "y": 460,
        "wires": [
            [
                "a9096e33e13a15fa"
            ]
        ]
    },
    {
        "id": "345ba0404594d119",
        "type": "function",
        "z": "a922dcbcf6a2e8c4",
        "name": "Folder handling",
        "func": "// Récupérer la valeur de la variable \"folder\" depuis le contexte\nlet folder = context.get(\"folder\");\n// Si la variable \"folder\" n'est pas définie, l'initialiser avec \"/\"\nif (folder === undefined) {\n    folder = \"/\";\n    context.set(\"folder\", folder); // Enregistrer la valeur dans le contexte\n}\n\n// Récupérer la valeur de la variable \"hidden\" depuis le contexte\nlet hidden = context.get(\"hidden\");\n// Si la variable \"hidden\" n'est pas définie, l'initialiser avec \"false\"\nif (hidden === undefined) {\n    hidden = false;\n    context.set(\"hidden\", hidden); // Enregistrer la valeur dans le contexte\n}\n\n// Si le sujet du message est \"up\"\nif (msg.topic === \"up\") {\n    var the_arr = folder.split('/');\n    the_arr.pop(); // Supprimer le dernier élément du tableau\n    folder = the_arr.join('/'); // Rejoindre les éléments du tableau pour former le nouveau chemin\n    context.set(\"folder\", folder); // Enregistrer le nouveau chemin dans le contexte\n}\n\n// Si le sujet du message est \"change\"\nif (msg.topic === \"change\") {\n    folder = msg.payload; // Mettre à jour la valeur de \"folder\" avec le contenu du champ \"payload\"\n    context.set(\"folder\", folder); // Enregistrer la nouvelle valeur dans le contexte\n}\n\n// Si le sujet du message est \"hidden\"\nif (msg.topic === \"hidden\") {\n    hidden = msg.payload; // Mettre à jour la valeur de \"hidden\" avec le contenu du champ \"payload\"\n    context.set(\"hidden\", hidden); // Enregistrer la nouvelle valeur dans le contexte\n}\n\n// Construire un objet JSON contenant les valeurs actuelles de \"folder\" et \"hidden\"\nmsg.payload = { \"start\": folder, \"hidden\": hidden };\n\nreturn msg; // Renvoyer le message modifié\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 400,
        "wires": [
            [
                "e2bc16ad279f51a2"
            ]
        ]
    },
    {
        "id": "e2bc16ad279f51a2",
        "type": "fs-file-lister",
        "z": "a922dcbcf6a2e8c4",
        "name": "Files",
        "start": "/home/pi",
        "pattern": "*.*",
        "folders": "*",
        "hidden": false,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": true,
        "showWarnings": false,
        "x": 930,
        "y": 400,
        "wires": [
            [
                "f95104a3aeee341f"
            ]
        ]
    },
    {
        "id": "be74b8b65e1283ad",
        "type": "pdfmake",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "outputType": "base64",
        "inputProperty": "payload",
        "options": "{}",
        "outputProperty": "payload",
        "x": 1860,
        "y": 820,
        "wires": [
            [
                "136f6a4ec149ad92"
            ]
        ]
    },
    {
        "id": "136f6a4ec149ad92",
        "type": "file",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "filename": "filepath",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "base64",
        "x": 2000,
        "y": 820,
        "wires": [
            [
                "906750247874af8d"
            ]
        ]
    },
    {
        "id": "ccfddceb0c81ceb6",
        "type": "function",
        "z": "a922dcbcf6a2e8c4",
        "name": "Ajoute le chemin du fichier ",
        "func": "var now = new Date();\nvar jour = (\"0\" + now.getDate()).slice(-2);\nvar mois = (\"0\" + (now.getMonth() + 1)).slice(-2);\n\n// Récupérer le nom de fichier de msg.payload.nameFile, ou utiliser \"default\" si absent\nvar nameFile = msg.payload.nameFile || \"default\";\n// Remplacer les caractères interdits dans le nom de fichier par des underscores\nnameFile = nameFile.replace(/[\\\\/:\"*?<>|]+/g, \"_\");\n\n// Construire le chemin du fichier PDF\nmsg.filePath = \"/home/NodeRed/pdf/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \".pdf\";\n\n// Construire les chemins des fichiers graphiques\nmsg.graphPath = {\n    volt: {\n        complet: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"VOLT.png\",\n        cpu: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"vcpu.png\",\n        ram: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"vram.png\",\n        proc: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"vproc.png\",\n        temp: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"vtemp.png\",\n        watt: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"vwatt.png\"\n    },\n    nidus: {\n        complet: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"NIDUS.png\",\n        cpu: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"ncpu.png\",\n        ram: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"nram.png\",\n        proc: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"nproc.png\",\n        temp: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"ntemp.png\"\n    },\n    gatling: {\n        complet: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"gatling.png\",\n        pass: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"pass.png\",\n        //ram: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"nram.png\",\n        //proc: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"nproc.png\",\n        //temp: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"ntemp.png\"\n    }\n};\n\n// Renvoyer le message modifié\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 880,
        "wires": [
            [
                "2f480a709148df91"
            ]
        ]
    },
    {
        "id": "2764d5f2f9d5d843",
        "type": "ui_form",
        "z": "a922dcbcf6a2e8c4",
        "name": "Configuration du Test",
        "label": "",
        "group": "7a02dc45cdd22958",
        "order": 2,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Nom du Fichier",
                "value": "nameFile",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Temps de mesure en minutes",
                "value": "time",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Stress test Nidus",
                "value": "stressNidus",
                "type": "checkbox",
                "required": true,
                "rows": null
            },
            {
                "label": "Stress test Volt",
                "value": "stressVolt",
                "type": "checkbox",
                "required": true,
                "rows": null
            },
            {
                "label": "Temps de Stress test",
                "value": "timeStress",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Temps de montée",
                "value": "time_gatling",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Nombre d'utilisateur",
                "value": "user_gatling",
                "type": "text",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "nameFile": "",
            "time": "",
            "stressNidus": false,
            "stressVolt": false,
            "timeStress": "",
            "time_gatling": "",
            "user_gatling": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": false,
        "className": "",
        "x": 300,
        "y": 880,
        "wires": [
            [
                "b975eb740154e03e",
                "ccfddceb0c81ceb6",
                "8460edb64649c3a2"
            ]
        ]
    },
    {
        "id": "85f75875ce5072e4",
        "type": "function",
        "z": "a922dcbcf6a2e8c4",
        "name": "Créer le contenue du fichier",
        "func": "// Création des données pour le rapport PDF\nmsg.payload = {\n    header: function (currentPage, pageCount, pageSize) {\n        return [\n            {\n                text: \"Tobler Cyril\", // Votre nom\n                alignment: \"left\",\n                fontSize: 10,\n                margin: [15, 10, 0, 0]\n            },\n            {\n                text: \"Nom du projet : Confuse T-Rex\", // Nom de votre projet\n                alignment: \"center\",\n                fontSize: 10,\n                margin: [0, 0, 0, 0]\n            }\n        ];\n    },\n    footer: function (currentPage, pageCount) {\n        return {\n            columns: [\n                {\n                    text: currentPage.toString() + \" / \" + pageCount, // Numéro de page actuel / Nombre total de pages\n                    alignment: \"left\",\n                    fontSize: 10,\n                    margin: [15, 0, 0, 10]\n                },\n                {\n                    text: new Date().toLocaleDateString(\"fr-FR\"), // Date actuelle au format français\n                    alignment: \"right\",\n                    fontSize: 10,\n                    margin: [0, 0, 15, 10]\n                }\n            ],\n            margin: [0, 0, 0, 10]\n        };\n    },\n    content: [\n        {\n            text: \"Rapport d'utilisation\", // Titre du rapport\n            style: \"header\",\n            margin: [0, 10, 0, 0]\n        },\n        {\n            text: \"Les valeurs sont des moyennes sur les \" + Math.floor(msg.delay / (1000 * 60)) + \" dernières minutes\" // Informations sur les valeurs\n        },\n        {\n            text: \"Nidus :\", // Section Nidus\n            style: \"header2\"\n        },\n        {\n            text: \"CPU :                 \" + msg.payload.moyenne[\"nidus/benchmark/cpu\"] // Valeur CPU de Nidus\n        },\n        {\n            text: \"RAM :                 \" + msg.payload.moyenne[\"nidus/benchmark/ram\"] // Valeur RAM de Nidus\n        },\n        {\n            text: \"Nombre de processus : \" + msg.payload.moyenne[\"nidus/benchmark/processes\"] // Nombre de processus de Nidus\n        },\n        {\n            text: \"Température CPU :     \" + msg.payload.moyenne[\"nidus/benchmark/temp\"] // Température CPU de Nidus\n        },\n        {\n            image: 'nidusImage', // Image de Nidus\n            width: 500,\n            pageBreak: 'after', // Saut de page après l'image\n        },\n        {\n            text: \"Volt\", // Section Volt\n            style: \"header2\"\n        },\n        {\n            text: \"CPU :                 \" + msg.payload.moyenne[\"volt/benchmark/cpu\"] // Valeur CPU de Volt\n        },\n        {\n            text: \"RAM :                 \" + msg.payload.moyenne[\"volt/benchmark/ram\"] // Valeur RAM de Volt\n        },\n        {\n            text: \"Nombre de processus : \" + msg.payload.moyenne[\"volt/benchmark/processes\"] // Nombre de processus de Volt\n        },\n        {\n            text: \"Température CPU :     \" + msg.payload.moyenne[\"volt/benchmark/temp\"] // Température CPU de Volt\n        },\n        {\n            text: \"MilliWatt :           \" + msg.payload.moyenne[\"volt/benchmark/watt\"] // Valeur MilliWatt de Volt\n        },\n        {\n            image: 'voltImage', // Image de Volt\n            width: 500,\n        },\n        {\n            image: 'wattImage', // Image Watt de Volt\n            width: 500,\n            pageBreak: 'after', // Saut de page après l'image\n        },\n        {\n            text: \"Gatling\", // Section Gatling\n            style: \"header2\"\n        },\n        {\n            text: \"Nom de la simulation :                 \" + msg.payload.gatling.Assertion.simulation // Nom de la simulation Gatling\n        },\n        {\n            text: \"Commencée :                 \" + msg.payload.gatling.Assertion.start // Date de début de la simulation Gatling (à formater)\n        },\n        {\n            image: 'gatlingImage', // Image Gatling\n            width: 500,\n        },\n        {\n            image: 'gatlingGraphComplete', // Image graphique complet Gatling\n            width: 500,\n        },\n    ],\n    images: {\n        voltImage: 'data:image/png;base64,' + msg.payload.voltGraph.toString('base64'), // Utilisation du buffer pour l'image Volt\n        wattImage: 'data:image/png;base64,' + msg.payload.wattGraph.toString('base64'),  // Utilisation du buffer pour l'image Watt de Volt\n        nidusImage: 'data:image/png;base64,' + msg.payload.nidusGraph.toString('base64'),  // Utilisation du buffer pour l'image Nidus\n        gatlingImage: 'data:image/png;base64,' + msg.payload.gatlingGraph.toString('base64'),  // Utilisation du buffer pour l'image Gatling\n        gatlingGraphComplete: 'data:image/png;base64,' + msg.payload.gatlingGraphComplete.toString('base64'),  // Utilisation du buffer pour l'image Gatling\n    },\n    styles: {\n        header: {\n            fontSize: 22,\n            bold: true,\n            margin: [0, 30, 0, 0]\n        },\n        header2: {\n            fontSize: 18,\n            bold: true,\n            margin: [0, 20, 0, 0]\n        }\n    }\n};\n\nreturn msg; // Renvoyer le message\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2060,
        "y": 860,
        "wires": [
            [
                "be74b8b65e1283ad"
            ]
        ]
    },
    {
        "id": "2f480a709148df91",
        "type": "function",
        "z": "a922dcbcf6a2e8c4",
        "name": "Activate",
        "func": "var delay = msg.payload.time !== null ? msg.payload.time * 60 * 1000 : 30000; // Convertir en millisecondes si nécessaire\n\n// Créer les objets de message pour chaque sortie\nvar msg1 = {\n    cmd: \"subscribe\",\n    topic: \"/\",\n    complete: true,\n    out:1,\n    delay: delay, // Délai en ms\n    filepath: msg.filePath,\n    graphPath: msg.graphPath\n};\n\nvar msg2 = {\n    cmd: \"subscribe\",\n    topic: \"volt/benchmark/cpu\",\n    out: 2,\n    delay: delay, // Délai en ms\n    filepath: msg.filePath,\n    graphPath: msg.graphPath\n};\n\nvar msg3 = {\n    cmd: \"subscribe\",\n    topic: \"volt/benchmark/ram\",\n    out: 3,\n    delay: delay, // Délai en ms\n    filepath: msg.filePath,\n    graphPath: msg.graphPath\n};\n\nvar msg4 = {\n    cmd: \"subscribe\",\n    topic: \"volt/benchmark/processes\",\n    out: 4,\n    delay: delay, // Délai en ms\n    filepath: msg.filePath,\n    graphPath: msg.graphPath\n};\n\nvar msg5 = {\n    cmd: \"subscribe\",\n    topic: \"volt/benchmark/temp\",\n    out: 5,\n    delay: delay, // Délai en ms\n    filepath: msg.filePath,\n    graphPath: msg.graphPath\n};\n\n\n\nvar msg6 = {\n    cmd: \"subscribe\",\n    topic: \"nidus/benchmark/cpu\",\n    out: 6,\n    delay: delay, // Délai en ms\n    filepath: msg.filePath,\n    graphPath: msg.graphPath\n};\n\nvar msg7 = {\n    cmd: \"subscribe\",\n    topic: \"nidus/benchmark/ram\",\n    out: 7,\n    delay: delay, // Délai en ms\n    filepath: msg.filePath,\n    graphPath: msg.graphPath\n};\n\nvar msg8 = {\n    cmd: \"subscribe\",\n    topic: \"nidus/benchmark/processes\",\n    out: 8,\n    delay: delay, // Délai en ms\n    filepath: msg.filePath,\n    graphPath: msg.graphPath\n};\nvar msg9 = {\n    cmd: \"subscribe\",\n    topic: \"nidus/benchmark/temp\",\n    out: 9,\n    delay: delay, // Délai en ms\n    filepath: msg.filePath,\n    graphPath: msg.graphPath\n};\n\n\n// Envoyer les messages aux sorties correspondantes\n// Les messages seront envoyés dans l'ordre de 0 à 6, correspondant aux sorties activées\n// Assurez-vous que le nœud \"Function\" a sept sorties activées pour recevoir ces messages\nnode.send([msg1, msg2, msg3, msg4, msg5, msg6, msg7,msg8,msg9]);\n",
        "outputs": 9,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 880,
        "wires": [
            [
                "e57c37f6d2304a76",
                "2c32ec0fc5756fa3"
            ],
            [
                "928688dfc7e23a1b"
            ],
            [
                "3d2e6d7d9144dbc8"
            ],
            [
                "94f3bffcc46817ed"
            ],
            [
                "233ac3203df094e7"
            ],
            [
                "9b68fcc68bf63570"
            ],
            [
                "0efa5b24d3d7217a"
            ],
            [
                "70e86e2eaa84fb45"
            ],
            [
                "703e1bffc421d496"
            ]
        ]
    },
    {
        "id": "e57c37f6d2304a76",
        "type": "delay",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "pauseType": "delayv",
        "timeout": "15",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 940,
        "y": 600,
        "wires": [
            [
                "9c1d83d903dfd7c6"
            ]
        ]
    },
    {
        "id": "739d1dee7ab0721f",
        "type": "join",
        "z": "a922dcbcf6a2e8c4",
        "name": "Values",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "9",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1350,
        "y": 720,
        "wires": [
            [
                "d97a7e3571e5c7a3",
                "0dc4013efbfe82f3",
                "eac3d22677e48498",
                "015cd0934fa7211e",
                "988608530bbba437"
            ]
        ]
    },
    {
        "id": "598fe1090c5b4a0f",
        "type": "join",
        "z": "a922dcbcf6a2e8c4",
        "name": "Moyennes",
        "mode": "custom",
        "build": "object",
        "property": "moyenne",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1530,
        "y": 820,
        "wires": [
            [
                "08696f6284b66ed1"
            ]
        ]
    },
    {
        "id": "906750247874af8d",
        "type": "link out",
        "z": "a922dcbcf6a2e8c4",
        "name": "End_PDF",
        "mode": "link",
        "links": [
            "c78fb67e4a0af0ac"
        ],
        "x": 2095,
        "y": 820,
        "wires": []
    },
    {
        "id": "c78fb67e4a0af0ac",
        "type": "link in",
        "z": "a922dcbcf6a2e8c4",
        "name": "From_PDF",
        "links": [
            "906750247874af8d"
        ],
        "x": 445,
        "y": 400,
        "wires": [
            [
                "79e20eb04483680c"
            ]
        ]
    },
    {
        "id": "d184317a0e5101a3",
        "type": "function",
        "z": "a922dcbcf6a2e8c4",
        "name": "MiseAJourDelay",
        "func": "// Vérifier si msg.delay est défini\nif (msg.delay !== undefined) {\n    if(msg.delay === 1){\n        return null;\n    }\n    // Convertir msg.delay en nombre (si c'est une chaîne)\n    const currentDelay = parseFloat(msg.delay);\n\n    // Vérifier si currentDelay est un nombre valide\n    if (!isNaN(currentDelay)) {\n        // Soustraire 250 de currentDelay, mais s'assurer que le résultat est positif\n        const newDelay = Math.max(currentDelay - 250, 0);\n\n        // Mettre à jour msg.delay avec la nouvelle valeur\n        msg.delay = newDelay;\n\n        // Si le nouveau délai est 0, ne rien retourner\n        if (newDelay === 0) {\n            msg.delay = 1;\n            msg.originalDelay = 1;\n            return msg;\n        } else {\n            // Sinon, retourner le message avec le nouveau délai\n            return msg;\n        }\n    } else {\n        // msg.delay n'est pas un nombre valide\n        return null;\n    }\n} else {\n    // msg.delay n'est pas défini\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 720,
        "wires": [
            [
                "9df740cb5948f531",
                "fae046fbf8314952",
                "46ae434f01cfb101",
                "96d571dd904366d8"
            ]
        ]
    },
    {
        "id": "9df740cb5948f531",
        "type": "delay",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "pauseType": "delay",
        "timeout": "250",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 690,
        "y": 720,
        "wires": [
            [
                "d184317a0e5101a3"
            ]
        ]
    },
    {
        "id": "2c32ec0fc5756fa3",
        "type": "function",
        "z": "a922dcbcf6a2e8c4",
        "name": "CopyDelay",
        "func": "// Vérifier si msg.delay est défini\nif (msg.delay !== undefined) {\nmsg.originalDelay = msg.delay;\nreturn msg;\n}else{\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 780,
        "wires": [
            [
                "d184317a0e5101a3"
            ]
        ]
    },
    {
        "id": "d97a7e3571e5c7a3",
        "type": "function",
        "z": "a922dcbcf6a2e8c4",
        "name": "Gatling line chart Complet",
        "func": "// Assurez-vous que msg.payload.gatling.Log est un tableau\nvar logEntries = Array.isArray(msg.payload.gatling.Log) ? msg.payload.gatling.Log : [];\n\n// Création du graphique\nvar chartData = {\n    type: 'line', // Utilisez un graphique de type \"line\"\n    options: {\n        title: {\n            display: true,\n            text: 'Comparaison des performances' // Titre du graphique\n        },\n        legend: {\n            display: true // Affichez la légende du graphique\n        },\n        chartArea: {\n            backgroundColor: '#d3d7dd' // Couleur de fond du graphique\n        },\n        plugins: {\n            datalabels: {\n                display: false // Désactivez l'affichage des étiquettes de données\n            }\n        }\n    },\n    data: {\n        labels: logEntries.map(function (entry) {\n            if (entry.type === 'RUN') {\n                return 'Début de la Simulation'; // Label pour les opérations de type \"RUN\"\n            } else if (entry.type === 'REQUEST') {\n                // Calcul de la différence en millisecondes entre le début de la simulation et le début de la requête\n                var simulationStart = logEntries.find(function (item) {\n                    return item.type === 'RUN';\n                });\n                if (simulationStart) {\n                    var startTime = simulationStart.start;\n                    var requestTime = entry.start;\n                    var timeDiff = requestTime - startTime;\n                    return (timeDiff / 1000).toFixed(0) + ' s'; // Temps en secondes\n                } else {\n                    return 'N/A'; // Si aucune opération de type \"RUN\" n'est trouvée\n                }\n            } else {\n                return ''; // Autres types d'opérations (USER, etc.) sans label\n            }\n        }),\n        datasets: [\n            {\n                label: \"Temps de Réponse\", // Légende de l'ensemble de données\n                borderColor: 'rgba(0, 128, 255, 1)', // Couleur de la ligne du graphique\n                fill: false, // Désactivez le remplissage sous la ligne\n                data: logEntries.map(function (entry) {\n                    if (entry.type === 'REQUEST') {\n                        // Calcul de la différence en millisecondes entre le début et la fin de la requête\n                        var requestStart = entry.start;\n                        var requestEnd = entry.end;\n                        var requestTime = requestEnd - requestStart;\n                        return requestTime;\n                    } else {\n                        return 0; // Valeurs pour les opérations de type \"RUN\" ou autres\n                    }\n                }),\n                pointRadius: 0, // Diamètre des points sur le graphique\n            }\n        ]\n    }\n};\n\nmsg.payload = chartData; // Attribuez les données du graphique au message\n\nreturn msg; // Renvoyez le message\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 500,
        "wires": [
            [
                "b1f6c0a2b59f3166"
            ]
        ]
    },
    {
        "id": "b1f6c0a2b59f3166",
        "type": "chart-image",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "width": "1920",
        "height": "1920",
        "x": 1850,
        "y": 500,
        "wires": [
            [
                "a7517383bc84984d"
            ]
        ]
    },
    {
        "id": "a7517383bc84984d",
        "type": "file",
        "z": "a922dcbcf6a2e8c4",
        "name": "Gatling Complet",
        "filename": "graphPath.gatling.complet",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2100,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "0dc4013efbfe82f3",
        "type": "function",
        "z": "a922dcbcf6a2e8c4",
        "name": "Vertical Line Chart",
        "func": "// Données reçues du flux précédent\nvar rawData = msg.payload;\nvar delayInSeconds = msg.delay / 1000; // Conversion en secondes\n\n// Extraction des données nécessaires\nvar voltCpuData = rawData[\"volt/benchmark/cpu\"];\nvar voltRamData = rawData[\"volt/benchmark/ram\"];\nvar voltProcessesData = rawData[\"volt/benchmark/processes\"];\nvar voltTempData = rawData[\"volt/benchmark/temp\"];\nvar nidusCpuData = rawData[\"nidus/benchmark/cpu\"];\nvar nidusRamData = rawData[\"nidus/benchmark/ram\"];\nvar nidusProcessesData = rawData[\"nidus/benchmark/processes\"];\nvar nidusTempData = rawData[\"nidus/benchmark/temp\"];\n\n// Création du graphique\nvar chartData = {\n    type: 'line',  // Changement du type de graphique en \"line\"\n    options: {\n        title: {\n            display: true,\n            text: 'Comparaison des performances'\n        },\n        legend: {\n            display: true\n        },\n        chartArea: {\n            backgroundColor: '#d3d7dd'\n        },\n        plugins: {\n            datalabels: {\n                display: false  // Désactiver l'affichage des étiquettes de données\n            }\n        }\n    },\n    data: {\n        labels: Array.from({ length: voltCpuData.length }, (_, i) => (i * delayInSeconds).toFixed(1)),  // Temps en secondes\n        datasets: [\n            {\n                label: \"Volt CPU\",\n                borderColor: 'rgba(0, 128, 255, 1)',  // Couleur de la ligne (couleur froide pour Volt)\n                fill: false,  // Désactiver le remplissage sous la ligne\n                data: voltCpuData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Volt RAM\",\n                borderColor: 'rgba(0, 255, 128, 1)',\n                fill: false,\n                data: voltRamData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Volt Temp\",\n                borderColor: 'rgba(255, 193, 37, 1)',\n                fill: false,\n                data: voltTempData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Nidus CPU\",\n                borderColor: 'rgba(255, 69, 0, 1)',\n                fill: false,\n                data: nidusCpuData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Nidus RAM\",\n                borderColor: 'rgba(255, 165, 0, 1)',\n                fill: false,\n                data: nidusRamData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Nidus Temp\",\n                borderColor: 'rgba(255, 0, 0, 1)',\n                fill: false,\n                data: nidusTempData,\n                pointRadius: 0,\n            }\n        ]\n    }\n};\n\nmsg.payload = chartData;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 620,
        "wires": [
            [
                "cb25325db959a379"
            ]
        ]
    },
    {
        "id": "cb25325db959a379",
        "type": "chart-image",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "width": "1920",
        "height": "1080",
        "x": 1830,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "76413a7f1a82bb8c",
        "type": "file",
        "z": "a922dcbcf6a2e8c4",
        "name": "Image dump",
        "filename": "/home/NodeRed/line.png",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2110,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "603fed50adeb7c76",
        "type": "chart-image",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "width": "1920",
        "height": "1920",
        "x": 1830,
        "y": 660,
        "wires": [
            [
                "57970209259779ad",
                "0430440efc580a59"
            ]
        ]
    },
    {
        "id": "57970209259779ad",
        "type": "file",
        "z": "a922dcbcf6a2e8c4",
        "name": "volt.complet",
        "filename": "graphPath.volt.complet",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2110,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "1e88c8e297e90be9",
        "type": "chart-image",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "width": "1920",
        "height": "1920",
        "x": 1830,
        "y": 700,
        "wires": [
            [
                "c6029531073cca5b",
                "0430440efc580a59"
            ]
        ]
    },
    {
        "id": "c6029531073cca5b",
        "type": "file",
        "z": "a922dcbcf6a2e8c4",
        "name": "volt.complet",
        "filename": "graphPath.nidus.complet",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2110,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "015cd0934fa7211e",
        "type": "function",
        "z": "a922dcbcf6a2e8c4",
        "name": "Nidus Line Chart",
        "func": "// Données reçues du flux précédent\nvar rawData = msg.payload;\nvar delayInSeconds = msg.delay / 1000; // Conversion en secondes\nmsg.topic = \"NidusLineChart\";\n// Extraction des données nécessaires\nvar nidusCpuData = rawData[\"nidus/benchmark/cpu\"];\nvar nidusRamData = rawData[\"nidus/benchmark/ram\"];\nvar nidusTempData = rawData[\"nidus/benchmark/temp\"];\n\n// Création du graphique\nvar chartData = {\n    type: 'line',  // Changement du type de graphique en \"line\"\n    options: {\n        title: {\n            display: true,\n            text: 'Comparaison des performances'\n        },\n        legend: {\n            display: true\n        },\n        chartArea: {\n            backgroundColor: '#d3d7dd'\n        },\n        plugins: {\n            datalabels: {\n                display: false  // Désactiver l'affichage des étiquettes de données\n            }\n        }\n    },\n    data: {\n        labels: Array.from({ length: nidusCpuData.length }, (_, i) => (i * delayInSeconds).toFixed(1)),  // Temps en secondes\n        datasets: [\n            \n            {\n                label: \"Nidus CPU\",\n                borderColor: 'rgba(255, 69, 0, 1)',\n                fill: false,\n                data: nidusCpuData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Nidus RAM\",\n                borderColor: 'rgba(255, 165, 0, 1)',\n                fill: false,\n                data: nidusRamData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Nidus Temp\",\n                borderColor: 'rgba(255, 0, 0, 1)',\n                fill: false,\n                data: nidusTempData,\n                pointRadius: 0,\n            }\n        ]\n    }\n};\n\nmsg.payload = chartData;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 700,
        "wires": [
            [
                "1e88c8e297e90be9"
            ]
        ]
    },
    {
        "id": "eac3d22677e48498",
        "type": "function",
        "z": "a922dcbcf6a2e8c4",
        "name": "Volt Line Chart",
        "func": "// Données reçues du flux précédent\nvar rawData = msg.payload;\nvar delayInSeconds = msg.delay / 1000; // Conversion en secondes\nmsg.topic = \"VoltLineChart\";\n// Extraction des données nécessaires\nvar voltCpuData = rawData[\"volt/benchmark/cpu\"];\nvar voltRamData = rawData[\"volt/benchmark/ram\"];\nvar voltTempData = rawData[\"volt/benchmark/temp\"];\n\n\n// Création du graphique\nvar chartData = {\n    type: 'line',  // Changement du type de graphique en \"line\"\n    options: {\n        title: {\n            display: true,\n            text: 'Comparaison des performances'\n        },\n        legend: {\n            display: true\n        },\n        chartArea: {\n            backgroundColor: '#d3d7dd'\n        },\n        plugins: {\n            datalabels: {\n                display: false  // Désactiver l'affichage des étiquettes de données\n            }\n        }\n    },\n    data: {\n        labels: Array.from({ length: voltCpuData.length }, (_, i) => (i * delayInSeconds).toFixed(1)),  // Temps en secondes\n        datasets: [\n            {\n                label: \"Volt CPU\",\n                borderColor: 'rgba(0, 128, 255, 1)',  // Couleur de la ligne (couleur froide pour Volt)\n                fill: false,  // Désactiver le remplissage sous la ligne\n                data: voltCpuData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Volt RAM\",\n                borderColor: 'rgba(0, 255, 128, 1)',\n                fill: false,\n                data: voltRamData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Volt Temp\",\n                borderColor: 'rgba(0, 173, 0, 1)',\n                fill: false,\n                data: voltTempData,\n                pointRadius: 0,\n            },\n\n        ]\n    }\n};\n\nmsg.payload = chartData;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 660,
        "wires": [
            [
                "603fed50adeb7c76"
            ]
        ]
    },
    {
        "id": "8460edb64649c3a2",
        "type": "function",
        "z": "a922dcbcf6a2e8c4",
        "name": "Commmandes de StressTest",
        "func": "const sshNidus = \"ssh tobby@nidus\"; \nconst sshVolt = \"ssh tobby@157.26.228.77\"; \n\n    var stressCommandsNidus;\n    var stressCommandsVolt;\n\n    if (msg.payload.stressNidus) {\n        var msg1 = {\n            payload : `stress-ng --cpu 2 --io 1 --timeout ${msg.payload.timeStress*60}s --cpu-load 100 --vm-bytes 3G`\n        };\n    }\n\n    if (msg.payload.stressVolt) {\n        var msg2 = {\n            payload: `ssh tobby@157.26.228.77 \\\"stress-ng --cpu 2 --io 1 --timeout ${msg.payload.timeStress*60}s --cpu-load 100 --vm-bytes 3G\\\"`\n        };\n    }\n    node.send([msg1, msg2]);\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 920,
        "wires": [
            [
                "ef49101dcb56820d"
            ],
            [
                "ef49101dcb56820d"
            ]
        ]
    },
    {
        "id": "ef49101dcb56820d",
        "type": "exec",
        "z": "a922dcbcf6a2e8c4",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 790,
        "y": 980,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "fae046fbf8314952",
        "type": "ui_template",
        "z": "a922dcbcf6a2e8c4",
        "group": "7a02dc45cdd22958",
        "name": "ProgressBar",
        "order": 3,
        "width": 0,
        "height": 0,
        "format": "<style>\n    .custom-progress-bar .md-progress-linear-fill {\n        height: 20px;\n        /* Définissez la hauteur souhaitée ici */\n    }\n</style>\n\n<div layout=\"column\" layout-align=\"center center\">\n    <md-progress-linear class=\"md-accent custom-progress-bar\" md-mode=\"determinate\"\n        value=\"{{(msg.originalDelay - msg.delay) / msg.originalDelay * 100}}\"\n        ng-show=\"msg.delay !== undefined && msg.originalDelay !== undefined\"></md-progress-linear>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 690,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "b1da83a2a3862753",
        "type": "join",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "7",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 1970,
        "y": 900,
        "wires": [
            [
                "6b3f454dbe69b14f"
            ]
        ]
    },
    {
        "id": "08696f6284b66ed1",
        "type": "change",
        "z": "a922dcbcf6a2e8c4",
        "name": "Organise Payload-Topic",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "moyenne",
                "tot": "msg",
                "dc": true
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "moyenne",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1550,
        "y": 880,
        "wires": [
            [
                "b1da83a2a3862753",
                "7cbe2c5767d519af",
                "ac0a9fbac6663571",
                "acd8521fb2d3d1e9",
                "6604a1a9e5c5b180",
                "43c8dd92a5c31e0a"
            ]
        ]
    },
    {
        "id": "98b45eb91516072f",
        "type": "change",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "complete",
                "pt": "msg",
                "to": "true",
                "tot": "bool",
                "dc": true
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "ChartComplete",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1960,
        "y": 760,
        "wires": [
            [
                "598fe1090c5b4a0f"
            ]
        ]
    },
    {
        "id": "6b3f454dbe69b14f",
        "type": "change",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Moyenne_Graph",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1850,
        "y": 860,
        "wires": [
            [
                "85f75875ce5072e4"
            ]
        ]
    },
    {
        "id": "ac0a9fbac6663571",
        "type": "file in",
        "z": "a922dcbcf6a2e8c4",
        "name": "Read Graph Nidus Complet",
        "filename": "graphPath.nidus.complet",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1560,
        "y": 1100,
        "wires": [
            [
                "d978bc6f789e8521"
            ]
        ]
    },
    {
        "id": "d978bc6f789e8521",
        "type": "base64",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "action": "str",
        "property": "msg.payload",
        "x": 1780,
        "y": 1100,
        "wires": [
            [
                "fb6a13e3a14f15c5"
            ]
        ]
    },
    {
        "id": "7cbe2c5767d519af",
        "type": "file in",
        "z": "a922dcbcf6a2e8c4",
        "name": "Read Graph Volt Complet",
        "filename": "graphPath.volt.complet",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1550,
        "y": 980,
        "wires": [
            [
                "ae3866eff55ca64b"
            ]
        ]
    },
    {
        "id": "ae3866eff55ca64b",
        "type": "base64",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "action": "str",
        "property": "msg.payload",
        "x": 1780,
        "y": 980,
        "wires": [
            [
                "ae146adec9b9a032"
            ]
        ]
    },
    {
        "id": "ae146adec9b9a032",
        "type": "change",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "voltGraph",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1770,
        "y": 940,
        "wires": [
            [
                "b1da83a2a3862753"
            ]
        ]
    },
    {
        "id": "fb6a13e3a14f15c5",
        "type": "change",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "nidusGraph",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1770,
        "y": 1140,
        "wires": [
            [
                "b1da83a2a3862753"
            ]
        ]
    },
    {
        "id": "2f38cc5b57afe5b8",
        "type": "debug",
        "z": "a922dcbcf6a2e8c4",
        "name": "CATCH_ERROR",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 1260,
        "wires": []
    },
    {
        "id": "727e8e57d05b142b",
        "type": "catch",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 340,
        "y": 1260,
        "wires": [
            [
                "2f38cc5b57afe5b8"
            ]
        ]
    },
    {
        "id": "0430440efc580a59",
        "type": "join",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "4",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1790,
        "y": 760,
        "wires": [
            [
                "98b45eb91516072f"
            ]
        ]
    },
    {
        "id": "5832f222acb611c6",
        "type": "ina-sensor",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "handle": "173c4031bd3a25c0",
        "x": 430,
        "y": 560,
        "wires": [
            [
                "b26ae55967e0b99e"
            ],
            [
                "b26ae55967e0b99e"
            ]
        ]
    },
    {
        "id": "e7f84c7008ec3606",
        "type": "join",
        "z": "a922dcbcf6a2e8c4",
        "name": "Join_2",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 930,
        "y": 560,
        "wires": [
            [
                "306223d02a96192b"
            ]
        ]
    },
    {
        "id": "46ae434f01cfb101",
        "type": "function",
        "z": "a922dcbcf6a2e8c4",
        "name": "USE",
        "func": "msg.use = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 600,
        "wires": [
            [
                "e7f84c7008ec3606"
            ]
        ]
    },
    {
        "id": "eb6ea2ed3a088172",
        "type": "function",
        "z": "a922dcbcf6a2e8c4",
        "name": "MilliWatt",
        "func": "// Récupérer les valeurs de courant (mA) et de tension (V) depuis les propriétés msg.payload\nvar current_mA = msg.payload.miliamps;\nvar voltage_V = msg.payload.voltage;\n\n// Calculer la puissance en watts (W)\nvar power_W = (current_mA / 1000) * voltage_V;  // Convertir le courant en ampères\n\n// Vérifier si la tension est négative\nif (voltage_V < 0.5) {\n    // Si la tension est négative, ne rien faire et retourner le message inchangé\n    return null;\n}\n\n// Créer un nouvel objet msg avec la puissance en watts comme payload\nmsg.payload = power_W*1000;\nmsg.topic = \"Watt\";\n// Renvoyer le message modifié\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 560,
        "wires": [
            [
                "e7f84c7008ec3606"
            ]
        ]
    },
    {
        "id": "b26ae55967e0b99e",
        "type": "join",
        "z": "a922dcbcf6a2e8c4",
        "name": "Join_Amp_Volt",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 620,
        "y": 560,
        "wires": [
            [
                "eb6ea2ed3a088172"
            ]
        ]
    },
    {
        "id": "306223d02a96192b",
        "type": "switch",
        "z": "a922dcbcf6a2e8c4",
        "name": "DropWhenNotUse",
        "property": "use",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1110,
        "y": 560,
        "wires": [
            [
                "7e85c4fd50f858cd"
            ],
            []
        ]
    },
    {
        "id": "9c1d83d903dfd7c6",
        "type": "join",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 1150,
        "y": 600,
        "wires": [
            [
                "954b20e3d5ce1feb"
            ]
        ]
    },
    {
        "id": "954b20e3d5ce1feb",
        "type": "function",
        "z": "a922dcbcf6a2e8c4",
        "name": "Rename",
        "func": "// Définir le sujet du message\nmsg.topic = \"volt/benchmark/watt\";\n\n// Vérifier si le tableau payload existe et n'est pas vide\nif (msg.payload && Array.isArray(msg.payload) && msg.payload.length > 0) {\n    // Convertir les valeurs en chaînes de caractères en nombres entiers\n    var numericValues = msg.payload.map(function (value) {\n        return parseInt(value, 10); // 10 indique la base décimale\n    }).filter(function (value) {\n        return !isNaN(value); // Filtrer les valeurs non numériques\n    });\n\n    // Vérifier si des valeurs numériques ont été trouvées\n    if (numericValues.length > 0) {\n        // Calculer la somme des valeurs numériques dans le tableau\n        var sum = numericValues.reduce(function (acc, value) {\n            return acc + value;\n        }, 0);\n\n        // Calculer la moyenne en divisant la somme par le nombre d'éléments\n        var moyenne = sum / numericValues.length;\n\n        // Arrondir la moyenne à deux chiffres après la virgule et au multiple de 0.05 le plus proche\n        moyenne = Math.round(moyenne * 20) / 20;\n\n        // Ajouter la moyenne au message\n        msg.moyenne = moyenne.toFixed(2);\n    } else {\n        // Si aucune valeur numérique n'a été trouvée, définir la moyenne à 0\n        msg.moyenne = \"0.00\";\n    }\n} else {\n    // Si le tableau est vide ou n'existe pas, définir la moyenne à 0\n    msg.moyenne.volt.benchmark.cpu = \"0.00\";\n}\n\n// Renvoyer le message modifié\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 600,
        "wires": [
            [
                "2066f01c2c7ae07f",
                "598fe1090c5b4a0f"
            ]
        ]
    },
    {
        "id": "7e85c4fd50f858cd",
        "type": "change",
        "z": "a922dcbcf6a2e8c4",
        "name": "Set Payload Watt",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.Watt",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1330,
        "y": 560,
        "wires": [
            [
                "9c1d83d903dfd7c6"
            ]
        ]
    },
    {
        "id": "2066f01c2c7ae07f",
        "type": "function",
        "z": "a922dcbcf6a2e8c4",
        "name": "Watt Line Chart",
        "func": "// Données reçues du flux précédent\nvar rawData = msg.payload;\nvar delayInSeconds = msg.delay / 1000; // Conversion en secondes\n\n// Extraction des données nécessaires\nvar voltWatt = rawData;\n// Création du graphique\nvar chartData = {\n    type: 'line',  // Changement du type de graphique en \"line\"\n    options: {\n        title: {\n            display: true,\n            text: 'Comparaison des performances'\n        },\n        legend: {\n            display: true\n        },\n        chartArea: {\n            backgroundColor: '#d3d7dd'\n        },\n        plugins: {\n            datalabels: {\n                display: false  // Désactiver l'affichage des étiquettes de données\n            }\n        }\n    },\n    data: {\n        labels: Array.from({ length: voltWatt.length }, (_, i) => (i * delayInSeconds).toFixed(1)),  // Temps en secondes\n        datasets: [\n            \n            {\n                label: \"Volt Watt\",\n                borderColor: 'rgba(0, 255, 255, 1)',\n                fill: false,\n                data: voltWatt,\n                pointRadius: 0,\n            },\n        ]\n    }\n};\n\nmsg.payload = chartData;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 540,
        "wires": [
            [
                "045abdd5d7ffb815"
            ]
        ]
    },
    {
        "id": "045abdd5d7ffb815",
        "type": "chart-image",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "width": "1920",
        "height": "1920",
        "x": 1850,
        "y": 540,
        "wires": [
            [
                "69eacb13e42212e2",
                "0430440efc580a59"
            ]
        ]
    },
    {
        "id": "69eacb13e42212e2",
        "type": "file",
        "z": "a922dcbcf6a2e8c4",
        "name": "volt.watt",
        "filename": "graphPath.volt.watt",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2100,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "acd8521fb2d3d1e9",
        "type": "file in",
        "z": "a922dcbcf6a2e8c4",
        "name": "Read Graph Volt Watt",
        "filename": "graphPath.volt.watt",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1540,
        "y": 1020,
        "wires": [
            [
                "91130d44ce2261fa"
            ]
        ]
    },
    {
        "id": "91130d44ce2261fa",
        "type": "base64",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "action": "str",
        "property": "msg.payload",
        "x": 1780,
        "y": 1020,
        "wires": [
            [
                "b198efa470dc9a78"
            ]
        ]
    },
    {
        "id": "b198efa470dc9a78",
        "type": "change",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "wattGraph",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1770,
        "y": 1060,
        "wires": [
            [
                "b1da83a2a3862753"
            ]
        ]
    },
    {
        "id": "96d571dd904366d8",
        "type": "function",
        "z": "a922dcbcf6a2e8c4",
        "name": "Prepare Payload Time",
        "func": "// Vérifier si les valeurs sont toutes les deux égales à 1 milliseconde\nif (msg.originalDelay === 1 && msg.delay === 1) {\n    msg.payload = \"00:00\";  // Cas spécial\n} else {\n    // Calculer le temps effectué et le temps total (en millisecondes)\n    var tempsEffectue = msg.originalDelay - msg.delay;\n    var tempsTotal = msg.originalDelay;\n\n    // Convertir les millisecondes en secondes\n    tempsEffectue /= 1000;\n    tempsTotal /= 1000;\n\n    // Arrondir les secondes\n    tempsEffectue = Math.round(tempsEffectue);\n    tempsTotal = Math.round(tempsTotal);\n\n    // Formater les temps dans le format \"mm:ss\"\n    var formatTemps = function (temps) {\n        var minutes = Math.floor(temps / 60);\n        var secondes = temps % 60;\n        return (minutes < 10 ? \"0\" : \"\") + minutes + \":\" + (secondes < 10 ? \"0\" : \"\") + secondes;\n    };\n\n    // Former le résultat\n    var tempsFormate = formatTemps(tempsEffectue) + \"/\" + formatTemps(tempsTotal);\n\n    msg.payload = tempsFormate;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 660,
        "wires": [
            [
                "998dbf39131946cb"
            ]
        ]
    },
    {
        "id": "998dbf39131946cb",
        "type": "ui_text",
        "z": "a922dcbcf6a2e8c4",
        "group": "7a02dc45cdd22958",
        "order": 5,
        "width": 10,
        "height": 2,
        "name": "Time",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "30",
        "color": "#e01b24",
        "x": 430,
        "y": 600,
        "wires": []
    },
    {
        "id": "4573ffb6c4528aeb",
        "type": "ui_toast",
        "z": "a922dcbcf6a2e8c4",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "Valider",
        "cancel": "Annuler",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 330,
        "y": 980,
        "wires": [
            [
                "7b4f3b6bf52fe0c5"
            ]
        ]
    },
    {
        "id": "5143686e3921674e",
        "type": "ui_button",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "group": "7a02dc45cdd22958",
        "order": 6,
        "width": 4,
        "height": 2,
        "passthru": true,
        "label": "Purge",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "Voulez vous vraiment purger tout les fichier generé par Node-Red ?",
        "payloadType": "str",
        "topic": "Purge des fichier !!!",
        "topicType": "str",
        "x": 310,
        "y": 940,
        "wires": [
            [
                "4573ffb6c4528aeb"
            ]
        ]
    },
    {
        "id": "bc2d12ad39c8a821",
        "type": "function",
        "z": "a922dcbcf6a2e8c4",
        "name": "Purge",
        "func": "if (msg.payload === \"Valider\"){\n    msg.payload = \"rm -r /home/NodeRed/* && rm -r /home/tobby/.gatling/gatling-charts-highcharts-bundle-3.9.5/results/*\";\n    return msg;\n}else{\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1060,
        "wires": [
            [
                "ef49101dcb56820d"
            ]
        ]
    },
    {
        "id": "2a33fab123820cb9",
        "type": "ui_toast",
        "z": "a922dcbcf6a2e8c4",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "Valider",
        "cancel": "Annuler",
        "raw": false,
        "className": "",
        "topic": "VRAIMENT ???",
        "name": "",
        "x": 330,
        "y": 1060,
        "wires": [
            [
                "bc2d12ad39c8a821",
                "f4a52e8692a83d01"
            ]
        ]
    },
    {
        "id": "7b4f3b6bf52fe0c5",
        "type": "function",
        "z": "a922dcbcf6a2e8c4",
        "name": "function 3",
        "func": "if (msg.payload === \"Valider\"){\n    msg.payload = \"En êtes vous bien sûr ???\";\n    return msg;\n}else{\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 1020,
        "wires": [
            [
                "2a33fab123820cb9"
            ]
        ]
    },
    {
        "id": "f4a52e8692a83d01",
        "type": "delay",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 520,
        "y": 1100,
        "wires": [
            [
                "d1ad6d659335c295"
            ]
        ]
    },
    {
        "id": "d1ad6d659335c295",
        "type": "function",
        "z": "a922dcbcf6a2e8c4",
        "name": "Mkdir",
        "func": "if (msg.payload === \"Valider\"){\n    msg.payload = \"mkdir /home/NodeRed/png /home/NodeRed/pdf\";\n    return msg;\n}else{\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1100,
        "wires": [
            [
                "ef49101dcb56820d"
            ]
        ]
    },
    {
        "id": "b975eb740154e03e",
        "type": "function",
        "z": "a922dcbcf6a2e8c4",
        "name": "Command_Gatling",
        "func": "msg.original = msg.payload;\nif (msg.topic !== \"inject\" && msg.payload.time_gatling !== undefined && msg.payload.user_gatling !== undefined) {\n    // Crée la commande en utilisant les valeurs spécifiées\n    msg.payload.time = msg.payload.time_gatling * 60;\n    msg.payload = `/home/tobby/.gatling/gatling-charts-highcharts-bundle-3.9.5/bin/gatling.sh -s CuriusTRex -bm --run-mode local -erjo \"-Dusers=${msg.payload.user_gatling} -Dramp=${msg.payload.time_gatling}\"`;\n} else {\n    // Utilise la commande d'origine car il ne s'agit pas d'un noeud inject ou les valeurs ne sont pas fournies\n    // Par défaut, utilisez la commande actuelle\n    msg.payload = \"/home/tobby/.gatling/gatling-charts-highcharts-bundle-3.9.5/bin/gatling.sh -s CuriusTRex -bm --run-mode local -erjo \\\" -Dusers=5 -Dramp=5\\\"\";\n}\n\n// Renvoie le message modifié\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1180,
        "wires": [
            [
                "e80abad9260c1ef3"
            ]
        ]
    },
    {
        "id": "e80abad9260c1ef3",
        "type": "exec",
        "z": "a922dcbcf6a2e8c4",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 710,
        "y": 1160,
        "wires": [
            [
                "5c4ef43f4797fcea"
            ],
            [],
            []
        ]
    },
    {
        "id": "93b81e31bea6ad80",
        "type": "inject",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "payload.gatling",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "inject",
        "x": 330,
        "y": 1180,
        "wires": [
            [
                "b975eb740154e03e"
            ]
        ]
    },
    {
        "id": "5c4ef43f4797fcea",
        "type": "function",
        "z": "a922dcbcf6a2e8c4",
        "name": "extractFilePathsAndCreateJsonKeyValue",
        "func": "// Fonction pour extraire le chemin après \"file://\"\nvar inputPayload = msg.payload;\n\n// Recherche de l'index de \"file://\"\nvar fileIndex = inputPayload.indexOf(\"file://\");\n\n// Si \"file://\" est trouvé, extrayez le chemin après\nif (fileIndex !== -1) {\n    // Extraire le chemin après \"file://\"\n    var filePath = inputPayload.substring(fileIndex + 7); // +7 pour sauter \"file://\"\n\n    // Supprimer le fichier index.html du chemin, s'il est présent\n        filePath = filePath.substring(0, filePath.length - 12); // -11 pour enlever \"/index.html\"\n\n    // Mettre le chemin extrait dans le message de sortie\n    msg.payload = filePath;\n\n    // Tableau de noms de fichiers .json\n    var jsonFilesList = [\n        \"assertions.json\",\n        \"global_stats.json\",\n        \"stats.json\"\n    ];\n\n    // Créer un tableau de clé-valeurs pour les fichiers .json\n    var jsonFilesKeyValue = {};\n\n    // Parcourir la liste des noms de fichiers et construire les chemins complets\n    for (var i = 0; i < jsonFilesList.length; i++) {\n        var jsonFileName = jsonFilesList[i];\n        var jsonFilePath = filePath + '/js/' + jsonFileName;\n        jsonFilesKeyValue[jsonFileName] = jsonFilePath;\n    }\n\n    // Ajouter le tableau de clé-valeurs au message\n    msg.jsonFiles = jsonFilesKeyValue;\n\n    // Renvoyer le message modifié\n    return msg;\n} else {\n    // Aucun \"file://\" trouvé, renvoyer le message d'origine\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 1220,
        "wires": [
            [
                "7a32d8f0501731ad",
                "53ed3b7bd0332155",
                "14a5c0936050c6ec",
                "363883f6259139cf"
            ]
        ]
    },
    {
        "id": "c5268070.c55a3",
        "type": "ui_template",
        "z": "a922dcbcf6a2e8c4",
        "group": "7a02dc45cdd22958",
        "name": "Upload Btn",
        "order": 8,
        "width": 4,
        "height": 2,
        "format": "<body>\n  <!-- Bouton pour déclencher l'importation des données -->\n  <button class=\"md-raised md-button md-ink-ripple\" onclick=\"importerDonnees()\">Télécharger</button>\n\n  <script>\n    // Conservez la portée originale\n    let restaureScope = scope;\n\n    // Fonction pour importer les données\n    function importerDonnees() {\n      // Créez un élément d'entrée de type fichier\n      let input = document.createElement('input');\n      input.type = 'file';\n      input.id = 'boutonRestaurer';\n\n      // Définissez l'événement onchange\n      input.onchange = _ => {\n        // Obtenez le nom du fichier choisi\n        let nomFichier = input.files[0].name;\n\n        // Vous pouvez utiliser cette méthode pour obtenir le fichier et effectuer les opérations respectives\n        let lecteurFichier = new FileReader();\n        lecteurFichier.readAsText(input.files[0]);\n\n        // Gérez la fin du chargement du fichier\n        lecteurFichier.onloadend = function(event){\n          // Envoyez les données lues et le nom du fichier à la portée originale\n          restaureScope.send({payload: event.target.result});\n        };\n      };\n\n      // Déclenchez le clic sur l'élément d'entrée de type fichier\n      input.click();\n    }\n  </script>\n</body>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 270,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "7a32d8f0501731ad",
        "type": "file in",
        "z": "a922dcbcf6a2e8c4",
        "name": "Assertion Json",
        "filename": "jsonFiles[\"assertions.json\"]",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1120,
        "y": 1360,
        "wires": [
            [
                "d647b33c6d2e3f19"
            ]
        ]
    },
    {
        "id": "53ed3b7bd0332155",
        "type": "file in",
        "z": "a922dcbcf6a2e8c4",
        "name": "Global Stats Json",
        "filename": "jsonFiles[\"global_stats.json\"]",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1130,
        "y": 1400,
        "wires": [
            [
                "10727eec043e4c37"
            ]
        ]
    },
    {
        "id": "14a5c0936050c6ec",
        "type": "file in",
        "z": "a922dcbcf6a2e8c4",
        "name": "Stats Json",
        "filename": "jsonFiles[\"stats.json\"]",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1110,
        "y": 1440,
        "wires": [
            [
                "65f34127c479865e"
            ]
        ]
    },
    {
        "id": "65f34127c479865e",
        "type": "json",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1270,
        "y": 1440,
        "wires": [
            [
                "cbe083e30bbcd848"
            ]
        ]
    },
    {
        "id": "10727eec043e4c37",
        "type": "json",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1290,
        "y": 1400,
        "wires": [
            [
                "ac8d781897d82aa4"
            ]
        ]
    },
    {
        "id": "d647b33c6d2e3f19",
        "type": "json",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1270,
        "y": 1360,
        "wires": [
            [
                "f66f595e08543684"
            ]
        ]
    },
    {
        "id": "f66f595e08543684",
        "type": "change",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Assertion",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1410,
        "y": 1360,
        "wires": [
            [
                "8d75011f3e4a61cd"
            ]
        ]
    },
    {
        "id": "ac8d781897d82aa4",
        "type": "change",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Global",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1430,
        "y": 1400,
        "wires": [
            [
                "8d75011f3e4a61cd"
            ]
        ]
    },
    {
        "id": "cbe083e30bbcd848",
        "type": "change",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Stats",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1410,
        "y": 1440,
        "wires": [
            [
                "8d75011f3e4a61cd"
            ]
        ]
    },
    {
        "id": "8d75011f3e4a61cd",
        "type": "join",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "4",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1630,
        "y": 1400,
        "wires": [
            [
                "be1f566e551634ca"
            ]
        ]
    },
    {
        "id": "be1f566e551634ca",
        "type": "change",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "gatling",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1850,
        "y": 1400,
        "wires": [
            [
                "b1da83a2a3862753",
                "c145436e5b13e4fd"
            ]
        ]
    },
    {
        "id": "6604a1a9e5c5b180",
        "type": "file in",
        "z": "a922dcbcf6a2e8c4",
        "name": "Read Graph Gatling",
        "filename": "graphPath.gatling.pass",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1540,
        "y": 1180,
        "wires": [
            [
                "c9f7d6d1520e3533"
            ]
        ]
    },
    {
        "id": "c9f7d6d1520e3533",
        "type": "base64",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "action": "str",
        "property": "msg.payload",
        "x": 1780,
        "y": 1180,
        "wires": [
            [
                "f1ba256aaea77915"
            ]
        ]
    },
    {
        "id": "f1ba256aaea77915",
        "type": "change",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "gatlingGraph",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1790,
        "y": 1220,
        "wires": [
            [
                "b1da83a2a3862753"
            ]
        ]
    },
    {
        "id": "c145436e5b13e4fd",
        "type": "link out",
        "z": "a922dcbcf6a2e8c4",
        "name": "gatling",
        "mode": "link",
        "links": [
            "5ffd96eafaccc18a"
        ],
        "x": 1975,
        "y": 1260,
        "wires": []
    },
    {
        "id": "5ffd96eafaccc18a",
        "type": "link in",
        "z": "a922dcbcf6a2e8c4",
        "name": "link in 1",
        "links": [
            "c145436e5b13e4fd"
        ],
        "x": 1085,
        "y": 720,
        "wires": [
            [
                "739d1dee7ab0721f"
            ]
        ]
    },
    {
        "id": "9c9b12491f34115a",
        "type": "chart-image",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "width": "1920",
        "height": "1920",
        "x": 1850,
        "y": 460,
        "wires": [
            [
                "c021639bf321ede6",
                "0430440efc580a59"
            ]
        ]
    },
    {
        "id": "988608530bbba437",
        "type": "function",
        "z": "a922dcbcf6a2e8c4",
        "name": "Gatling bar chart",
        "func": "// Données reçues du flux précédent\nvar rawData = msg.payload.gatling.Global;  // Utilisez les données de msg.payload.gatling.Global\nmsg.topic = \"VoltBarChart\"; // Définir le sujet du message\n\n// Extraction des données nécessaires\nvar groupData = [\n    rawData.group1,\n    rawData.group2,\n    rawData.group3,\n    rawData.group4\n];\n\nvar labels = [];\nvar percentages = [];\n\n// Parcourir les données des groupes et extraire les informations\nfor (var i = 1; i <= groupData.length; i++) {\n    var groupName = \"group\" + i;\n    labels.push(rawData[groupName].htmlName);\n    percentages.push(rawData[groupName].percentage);\n}\n\n// Création du graphique\nvar chartData = {\n    type: 'bar',  // Utiliser un graphique de type \"bar\"\n    options: {\n        title: {\n            display: true,\n            text: 'Répartition des performances par groupe' // Titre du graphique\n        },\n        chartArea: {\n            backgroundColor: '#d3d7dd' // Couleur de fond du graphique\n        },\n        scales: {\n            x: {\n                beginAtZero: true,\n                title: {\n                    display: true,\n                    text: 'Groupes' // Titre de l'axe des X\n                }\n            },\n            y: {\n                beginAtZero: true,\n                title: {\n                    display: true,\n                    text: 'Pourcentage' // Titre de l'axe des Y\n                }\n            }\n        },\n        plugins: {\n            datalabels: {\n                anchor: 'end',\n                align: 'top',\n                formatter: function (value) {\n                    return value + '%';  // Ajouter le symbole de pourcentage à l'étiquette\n                }\n            }\n        }\n    },\n    data: {\n        labels: labels,\n        datasets: [\n            {\n                label: \"Pourcentage\", // Légende de l'ensemble de données\n                backgroundColor: 'rgba(0, 128, 255, 0.7)',  // Couleur du remplissage des barres\n                data: percentages\n            }\n        ]\n    }\n};\n\nmsg.payload = chartData; // Attribuer les données du graphique au message\n\nreturn msg; // Renvoyer le message\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 460,
        "wires": [
            [
                "9c9b12491f34115a"
            ]
        ]
    },
    {
        "id": "c021639bf321ede6",
        "type": "file",
        "z": "a922dcbcf6a2e8c4",
        "name": "gatling.pass",
        "filename": "graphPath.gatling.pass",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2090,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "43e78b5d682b70c3",
        "type": "file in",
        "z": "a922dcbcf6a2e8c4",
        "name": "Log",
        "filename": "payload",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1090,
        "y": 1480,
        "wires": [
            [
                "1c372d625e08d8fc"
            ]
        ]
    },
    {
        "id": "4f883d95b4ab02fd",
        "type": "change",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Log",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1450,
        "y": 1480,
        "wires": [
            [
                "8d75011f3e4a61cd"
            ]
        ]
    },
    {
        "id": "363883f6259139cf",
        "type": "function",
        "z": "a922dcbcf6a2e8c4",
        "name": "function 4",
        "func": "msg.payload = msg.payload + \"/simulation.log\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1480,
        "wires": [
            [
                "43e78b5d682b70c3"
            ]
        ]
    },
    {
        "id": "1c372d625e08d8fc",
        "type": "function",
        "z": "a922dcbcf6a2e8c4",
        "name": "Log TO JSObject",
        "func": "// Fonction pour analyser les lignes du journal Gatling\nvar lines = msg.payload.split('\\n'); // Divise la charge utile en lignes individuelles et les stocke dans un tableau\nvar logs = []; // Initialise un tableau vide pour stocker les journaux analysés\n\nfor (var i = 0; i < lines.length; i++) { // Parcourt chaque ligne du journal\n    var line = lines[i].trim(); // Supprime les espaces inutiles autour de la ligne\n\n    if (line !== \"\") { // Vérifie si la ligne n'est pas vide\n        var parts = line.split('\\t'); // Divise la ligne en morceaux en utilisant la tabulation comme séparateur\n        var logObject = {}; // Initialise un objet vide pour stocker les informations du journal\n\n        // Définir des noms de clés significatives en fonction de votre format\n        logObject.type = parts[0]; // Type de journal\n        logObject.name = parts[1]; // Nom de la requête\n        logObject.start = parseInt(parts[3]); // Heure de début convertie en nombre entier\n        logObject.end = parseInt(parts[4]); // Heure de fin convertie en nombre entier\n        logObject.status = parts[5]; // Statut de la requête\n        logObject.error = parts[6]; // Message d'erreur en cas d'échec\n\n        logs.push(logObject); // Ajoute l'objet de journal au tableau des journaux analysés\n    }\n}\n\n// Envoyer les journaux analysés en sortie\nmsg.payload = logs; // Stocke les journaux analysés dans msg.logs\nreturn msg; // Renvoie le message modifié avec les journaux analysés\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 1480,
        "wires": [
            [
                "4f883d95b4ab02fd"
            ]
        ]
    },
    {
        "id": "928688dfc7e23a1b",
        "type": "subflow:4e666803b8f3f742",
        "z": "a922dcbcf6a2e8c4",
        "name": "Volt CPU",
        "x": 1040,
        "y": 760,
        "wires": [
            [
                "739d1dee7ab0721f",
                "598fe1090c5b4a0f"
            ]
        ]
    },
    {
        "id": "3d2e6d7d9144dbc8",
        "type": "subflow:4e666803b8f3f742",
        "z": "a922dcbcf6a2e8c4",
        "name": "Volt RAM",
        "x": 1040,
        "y": 800,
        "wires": [
            [
                "739d1dee7ab0721f",
                "598fe1090c5b4a0f"
            ]
        ]
    },
    {
        "id": "94f3bffcc46817ed",
        "type": "subflow:4e666803b8f3f742",
        "z": "a922dcbcf6a2e8c4",
        "name": "Volt Process",
        "x": 1050,
        "y": 840,
        "wires": [
            [
                "739d1dee7ab0721f",
                "598fe1090c5b4a0f"
            ]
        ]
    },
    {
        "id": "233ac3203df094e7",
        "type": "subflow:4e666803b8f3f742",
        "z": "a922dcbcf6a2e8c4",
        "name": "Volt Température",
        "x": 1070,
        "y": 880,
        "wires": [
            [
                "739d1dee7ab0721f",
                "598fe1090c5b4a0f"
            ]
        ]
    },
    {
        "id": "9b68fcc68bf63570",
        "type": "subflow:4e666803b8f3f742",
        "z": "a922dcbcf6a2e8c4",
        "name": "Nidus CPU",
        "x": 1050,
        "y": 920,
        "wires": [
            [
                "739d1dee7ab0721f",
                "598fe1090c5b4a0f"
            ]
        ]
    },
    {
        "id": "0efa5b24d3d7217a",
        "type": "subflow:4e666803b8f3f742",
        "z": "a922dcbcf6a2e8c4",
        "name": "Nidus RAM",
        "x": 1050,
        "y": 960,
        "wires": [
            [
                "739d1dee7ab0721f",
                "598fe1090c5b4a0f"
            ]
        ]
    },
    {
        "id": "70e86e2eaa84fb45",
        "type": "subflow:4e666803b8f3f742",
        "z": "a922dcbcf6a2e8c4",
        "name": "Nidus Process",
        "x": 1060,
        "y": 1000,
        "wires": [
            [
                "739d1dee7ab0721f",
                "598fe1090c5b4a0f"
            ]
        ]
    },
    {
        "id": "703e1bffc421d496",
        "type": "subflow:4e666803b8f3f742",
        "z": "a922dcbcf6a2e8c4",
        "name": "Nidus Température",
        "x": 1070,
        "y": 1040,
        "wires": [
            [
                "739d1dee7ab0721f",
                "598fe1090c5b4a0f"
            ]
        ]
    },
    {
        "id": "43c8dd92a5c31e0a",
        "type": "file in",
        "z": "a922dcbcf6a2e8c4",
        "name": "Read Graph Gatling",
        "filename": "graphPath.gatling.complet",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1540,
        "y": 1260,
        "wires": [
            [
                "4ffd1b52948d9cda"
            ]
        ]
    },
    {
        "id": "4ffd1b52948d9cda",
        "type": "base64",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "action": "str",
        "property": "msg.payload",
        "x": 1780,
        "y": 1260,
        "wires": [
            [
                "d90f0834e3b1ccbc"
            ]
        ]
    },
    {
        "id": "d90f0834e3b1ccbc",
        "type": "change",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "gatlingGraphComplete",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1790,
        "y": 1300,
        "wires": [
            [
                "b1da83a2a3862753"
            ]
        ]
    },
    {
        "id": "01cb020c87fc1c20",
        "type": "comment",
        "z": "3ddecfbaabd60ba5",
        "name": "File Browser",
        "info": "1) Update the default folder in the Init node\n2) Update the default folder in the Reset node as well\n3) You can duplicate the Reset nodes and use them as saved shortcuts\n4) Check the Convert Timestamps function node if you want to see your dates in a different format. I just used the Javascript toISOString format.\n5) The Graph button can read any CSV file which have any number of values, but the first column always contains a timestamp column with javascript timestamp of the data point.",
        "x": 470,
        "y": 60,
        "wires": []
    },
    {
        "id": "b685764fb0ce343d",
        "type": "inject",
        "z": "3ddecfbaabd60ba5",
        "name": "Init",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "change",
        "payload": "/home/NodeRed/pdf",
        "payloadType": "str",
        "x": 470,
        "y": 180,
        "wires": [
            [
                "c773d0965f829785"
            ]
        ]
    },
    {
        "id": "3ea9945f5d2c5f21",
        "type": "ui_button",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "group": "7db53a0c4211bca9",
        "order": 4,
        "width": 4,
        "height": 2,
        "passthru": true,
        "label": "Refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "refresh",
        "payload": "/home/NodeRed/pdf",
        "payloadType": "str",
        "topic": "change",
        "topicType": "str",
        "x": 480,
        "y": 260,
        "wires": [
            [
                "c773d0965f829785"
            ]
        ]
    },
    {
        "id": "13353a6e292fe860",
        "type": "ui_template",
        "z": "3ddecfbaabd60ba5",
        "group": "7db53a0c4211bca9",
        "name": "",
        "order": 1,
        "width": "20",
        "height": "8",
        "format": "<div ng-bind-html=\"msg.payload\" height=\"400\" style=\"height: 400px;\"><br/>\n</div>\n<style>\n/* Applique des styles aux liens */\na[href] {\ncolor: #d93347; /* Couleur du lien */\ntext-decoration: none; /* Pas de soulignement */\n}\n\n/* Applique des styles au survol des liens */\na[href]:hover {\ncolor: #cb0505; /* Couleur du lien au survol */\ntext-decoration: underline; /* Soulignement au survol */\n}\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1320,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "957a956e25f8e711",
        "type": "template",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<table width=\"100%\">\n    <tr><th>Nom de Fichier</th><th>Taille</th><th>Créer</th><th>Changer</th></tr>\n    {{#payload}}\n        <tr>\n            <td><a href=\"/download?filename={{name}}\" target=\"blank\">{{fname}}</a></td>\n            <td>{{stat.size}}</td>\n            <td>{{stat.created}}</td>\n            <td>{{stat.changed}}</td>\n        </tr>\n    {{/payload}}\n</table>\n",
        "output": "str",
        "x": 1300,
        "y": 260,
        "wires": [
            [
                "13353a6e292fe860"
            ]
        ]
    },
    {
        "id": "9e2071ea86cb94f6",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "Convert timestamps",
        "func": "// Fonction pour formater une date en fonction de la timezone de Zurich\nfunction formatToZurichTimezone(date) {\n    var options = {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n        timeZone: 'Europe/Zurich'\n    };\n    return new Intl.DateTimeFormat('fr-CH', options).format(date);\n}\n\n// Parcourir chaque élément dans le tableau \"payload\" du message\nfor (var i = 0; i < msg.payload.length; i++) {\n    // Convertir les propriétés de date/heure dans l'objet \"stat\" au format de Zurich\n    msg.payload[i].stat.created = formatToZurichTimezone(new Date(msg.payload[i].stat.created));\n    msg.payload[i].stat.changed = formatToZurichTimezone(new Date(msg.payload[i].stat.changed));\n    msg.payload[i].stat.accessed = formatToZurichTimezone(new Date(msg.payload[i].stat.accessed));\n    msg.payload[i].stat.statusChanged = formatToZurichTimezone(new Date(msg.payload[i].stat.statusChanged));\n\n    // Extraire le nom de fichier à partir de la propriété \"name\" et mettre à jour \"fname\"\n    msg.payload[i].fname = msg.payload[i].name.replace(/^.*(\\\\|\\/|\\:)/, '');\n}\n\nreturn msg; // Renvoyer le message modifié\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 260,
        "wires": [
            [
                "957a956e25f8e711"
            ]
        ]
    },
    {
        "id": "75572f78ae68fa31",
        "type": "http in",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "url": "/download",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 560,
        "y": 320,
        "wires": [
            [
                "daad9ddc6919835f"
            ]
        ]
    },
    {
        "id": "73c319f32ed934b0",
        "type": "http response",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1350,
        "y": 320,
        "wires": []
    },
    {
        "id": "daad9ddc6919835f",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "Get the file name",
        "func": "msg.filename = msg.req.query.filename;\nmsg.contentdisposition = \"attachment; filename=\\\"\" + msg.req.query.filename.replace(/^.*(\\\\|\\/|\\:)/, '') + \"\\\"\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 810,
        "y": 320,
        "wires": [
            [
                "0bd9eb0dd5d155fc"
            ]
        ],
        "outputLabels": [
            "Folder selected",
            "File selected"
        ]
    },
    {
        "id": "0bd9eb0dd5d155fc",
        "type": "file in",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "filename": "",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 1000,
        "y": 320,
        "wires": [
            [
                "27c43d8078bd45de"
            ]
        ]
    },
    {
        "id": "27c43d8078bd45de",
        "type": "change",
        "z": "3ddecfbaabd60ba5",
        "name": "Set Headers",
        "rules": [
            {
                "t": "set",
                "p": "headers",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "headers.content-type",
                "pt": "msg",
                "to": "text/csv",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "headers.Content-Disposition",
                "pt": "msg",
                "to": "contentdisposition",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1170,
        "y": 320,
        "wires": [
            [
                "73c319f32ed934b0"
            ]
        ]
    },
    {
        "id": "c773d0965f829785",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "Folder handling",
        "func": "// Récupérer la valeur de la variable \"folder\" depuis le contexte\nlet folder = context.get(\"folder\");\n// Si la variable \"folder\" n'est pas définie, l'initialiser avec \"/\"\nif (folder === undefined) {\n    folder = \"/\";\n    context.set(\"folder\", folder); // Enregistrer la valeur dans le contexte\n}\n\n// Récupérer la valeur de la variable \"hidden\" depuis le contexte\nlet hidden = context.get(\"hidden\");\n// Si la variable \"hidden\" n'est pas définie, l'initialiser avec \"false\"\nif (hidden === undefined) {\n    hidden = false;\n    context.set(\"hidden\", hidden); // Enregistrer la valeur dans le contexte\n}\n\n// Si le sujet du message est \"up\"\nif (msg.topic === \"up\") {\n    var the_arr = folder.split('/');\n    the_arr.pop(); // Supprimer le dernier élément du tableau\n    folder = the_arr.join('/'); // Rejoindre les éléments du tableau pour former le nouveau chemin\n    context.set(\"folder\", folder); // Enregistrer le nouveau chemin dans le contexte\n}\n\n// Si le sujet du message est \"change\"\nif (msg.topic === \"change\") {\n    folder = msg.payload; // Mettre à jour la valeur de \"folder\" avec le contenu du champ \"payload\"\n    context.set(\"folder\", folder); // Enregistrer la nouvelle valeur dans le contexte\n}\n\n// Si le sujet du message est \"hidden\"\nif (msg.topic === \"hidden\") {\n    hidden = msg.payload; // Mettre à jour la valeur de \"hidden\" avec le contenu du champ \"payload\"\n    context.set(\"hidden\", hidden); // Enregistrer la nouvelle valeur dans le contexte\n}\n\n// Construire un objet JSON contenant les valeurs actuelles de \"folder\" et \"hidden\"\nmsg.payload = { \"start\": folder, \"hidden\": hidden };\n\nreturn msg; // Renvoyer le message modifié\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 260,
        "wires": [
            [
                "5f8e5eb5277f43f8"
            ]
        ]
    },
    {
        "id": "5f8e5eb5277f43f8",
        "type": "fs-file-lister",
        "z": "3ddecfbaabd60ba5",
        "name": "Files",
        "start": "/home/pi",
        "pattern": "*.*",
        "folders": "*",
        "hidden": false,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": true,
        "showWarnings": false,
        "x": 870,
        "y": 260,
        "wires": [
            [
                "9e2071ea86cb94f6"
            ]
        ]
    },
    {
        "id": "185b6166af84320d",
        "type": "pdfmake",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "outputType": "base64",
        "inputProperty": "payload",
        "options": "{}",
        "outputProperty": "payload",
        "x": 1800,
        "y": 680,
        "wires": [
            [
                "568c67e01ff8c37c"
            ]
        ]
    },
    {
        "id": "568c67e01ff8c37c",
        "type": "file",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "filename": "filepath",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "base64",
        "x": 1940,
        "y": 680,
        "wires": [
            [
                "a74b27989ec4408a"
            ]
        ]
    },
    {
        "id": "2ac0d272272f951b",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "Ajoute le chemin du fichier ",
        "func": "var now = new Date();\nvar jour = (\"0\" + now.getDate()).slice(-2);\nvar mois = (\"0\" + (now.getMonth() + 1)).slice(-2);\n\n// Récupérer le nom de fichier de msg.payload.nameFile, ou utiliser \"default\" si absent\nvar nameFile = msg.payload.nameFile || \"default\";\n// Remplacer les caractères interdits dans le nom de fichier par des underscores\nnameFile = nameFile.replace(/[\\\\/:\"*?<>|]+/g, \"_\");\n\n// Construire le chemin du fichier PDF\nmsg.filePath = \"/home/NodeRed/pdf/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \".pdf\";\n\n// Construire les chemins des fichiers graphiques\nmsg.graphPath = {\n    volt: {\n        complet: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"VOLT.png\",\n        cpu: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"vcpu.png\",\n        ram: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"vram.png\",\n        proc: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"vproc.png\",\n        temp: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"vtemp.png\",\n        watt: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"vwatt.png\"\n    },\n    nidus: {\n        complet: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"NIDUS.png\",\n        cpu: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"ncpu.png\",\n        ram: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"nram.png\",\n        proc: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"nproc.png\",\n        temp: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"ntemp.png\"\n    },\n    gatling: {\n        complet: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"gatling.png\",\n        pass: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"pass.png\",\n        bySeconds: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"bySeconds.png\",\n        //proc: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"nproc.png\",\n        //temp: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"ntemp.png\"\n    }\n};\nglobal.set('path', msg.graphPath);\n// Renvoyer le message modifié\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 740,
        "wires": [
            [
                "4f40317345f06680"
            ]
        ]
    },
    {
        "id": "5147fbe4a671b9e3",
        "type": "ui_form",
        "z": "3ddecfbaabd60ba5",
        "name": "Configuration du Test",
        "label": "",
        "group": "7db53a0c4211bca9",
        "order": 2,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Nom du Fichier pdf",
                "value": "nameFile",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Temps de mesure en minutes",
                "value": "time",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Stress test Volt",
                "value": "stressVolt",
                "type": "checkbox",
                "required": true,
                "rows": null
            },
            {
                "label": "Stress test Nidus",
                "value": "stressNidus",
                "type": "checkbox",
                "required": true,
                "rows": null
            },
            {
                "label": "Temps de Stress test en minutes",
                "value": "timeStress",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Nombre d'utilisateur",
                "value": "user_gatling",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Ventilateur activée ?",
                "value": "flow",
                "type": "checkbox",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "nameFile": "",
            "time": "",
            "stressVolt": false,
            "stressNidus": false,
            "timeStress": "",
            "user_gatling": "",
            "flow": false
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": false,
        "className": "",
        "x": 240,
        "y": 740,
        "wires": [
            [
                "71d1b35c803dd600",
                "2ac0d272272f951b",
                "843f23c9472dcd82"
            ]
        ]
    },
    {
        "id": "61d24da92c494fff",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "Créer le contenue du fichier",
        "func": "//Formatage du ventilateur\nvar ventilateur = msg.payload.gatling.Original.flow ? \"Ventilateur activé\" : \"Ventilateur non-activé\";\n// Formatage de la date de début\nvar timestamp = msg.payload.gatling.Assertion.start;\n\n// Créez un objet Date à partir du timestamp\nvar date = new Date(timestamp);\n\n// Définissez le format de date souhaité\nvar options = {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit'\n};\n\n// Formatez la date en une chaîne de caractères\nvar formattedDate = date.toLocaleDateString(\"fr-FR\", options);\n\n\n// Création des données pour le rapport PDF\nmsg.payload = {\n    header: function (currentPage, pageCount, pageSize) {\n        return [\n            {\n                text: \"Tobler Cyril\", // Votre nom\n                alignment: \"left\",\n                fontSize: 10,\n                margin: [15, 10, 0, 0]\n            },\n            {\n                text: \"Nom du projet : Confuse T-Rex\", // Nom de votre projet\n                alignment: \"center\",\n                fontSize: 10,\n                margin: [0, 0, 0, 0]\n            }\n        ];\n    },\n    footer: function (currentPage, pageCount) {\n        return {\n            columns: [\n                {\n                    text: currentPage.toString() + \" / \" + pageCount, // Numéro de page actuel / Nombre total de pages\n                    alignment: \"left\",\n                    fontSize: 10,\n                    margin: [15, 0, 0, 10]\n                },\n                {\n                    text: new Date().toLocaleDateString(\"fr-FR\"), // Date actuelle au format français\n                    alignment: \"right\",\n                    fontSize: 10,\n                    margin: [0, 0, 15, 10]\n                }\n            ],\n            margin: [0, 0, 0, 10]\n        };\n    },\n    content: [\n        {\n            text: \"Rapport d'utilisation : \" + msg.original.nameFile , // Titre du rapport\n            style: \"header\",\n            margin: [0, 10, 0, 0]\n        },\n        {\n            text: \"Les valeurs sont des moyennes sur les \" + Math.floor(msg.delay / (1000 * 60)) + \" dernières minutes\" // Informations sur les valeurs\n        }, \n        {\n            text: ventilateur\n        },\n        {\n            text: \"Nidus :\", // Section Nidus\n            style: \"header2\"\n        },\n        {\n            text: \"CPU :                 \" + msg.payload.moyenne[\"nidus/benchmark/cpu\"] // Valeur CPU de Nidus\n        },\n        {\n            text: \"RAM :                 \" + msg.payload.moyenne[\"nidus/benchmark/ram\"] // Valeur RAM de Nidus\n        },\n        {\n            text: \"Nombre de processus : \" + msg.payload.moyenne[\"nidus/benchmark/processes\"] // Nombre de processus de Nidus\n        },\n        {\n            text: \"Température CPU :     \" + msg.payload.moyenne[\"nidus/benchmark/temp\"] // Température CPU de Nidus\n        },\n        {\n            image: 'nidusImage', // Image de Nidus\n            width: 500,\n            pageBreak: 'after', // Saut de page après l'image\n        },\n        {\n            text: \"Volt\", // Section Volt\n            style: \"header2\"\n        },\n        {\n            text: \"CPU :                 \" + msg.payload.moyenne[\"volt/benchmark/cpu\"] // Valeur CPU de Volt\n        },\n        {\n            text: \"RAM :                 \" + msg.payload.moyenne[\"volt/benchmark/ram\"] // Valeur RAM de Volt\n        },\n        {\n            text: \"Nombre de processus : \" + msg.payload.moyenne[\"volt/benchmark/processes\"] // Nombre de processus de Volt\n        },\n        {\n            text: \"Température CPU :     \" + msg.payload.moyenne[\"volt/benchmark/temp\"] // Température CPU de Volt\n        },\n        {\n            text: \"MilliWatt :           \" + msg.payload.moyenne[\"volt/benchmark/watt\"] // Valeur MilliWatt de Volt\n        },\n        {\n            image: 'voltImage', // Image de Volt\n            width: 500,\n        },\n        {\n            image: 'wattImage', // Image Watt de Volt\n            width: 500,\n            pageBreak: 'after', // Saut de page après l'image\n        },\n        {\n            text: \"Gatling\", // Section Gatling\n            style: \"header2\"\n        },\n        {\n            text: \"Nom de la simulation :                 \" + msg.payload.gatling.Assertion.simulation // Nom de la simulation Gatling\n        },\n        {\n            text: \"Commencée :                            \" + formattedDate // Date de début de la simulation Gatling (à formater)\n        },\n        {\n            text: \"Nombre d'utilisateur :                 \" + msg.original.user_gatling // Nom de la simulation Gatling\n        },\n        {\n            text: \"Durée prévu :                          \" + msg.payload.gatling.Original.time/60 + \"Min\" // Nom de la simulation Gatling\n        },\n        {\n            image: 'gatlingImage', // Image Gatling\n            width: 500,\n        },\n        {\n            image: 'gatlingGraphComplete', // Image graphique complet Gatling\n            width: 500,\n        }, \n        {\n            image: 'gatlingGraphBySeconds', // Image graphique complet Gatling\n            width: 500,\n        },\n    ],\n    images: {\n        voltImage: 'data:image/png;base64,' + msg.payload.voltGraph.toString('base64'), // Utilisation du buffer pour l'image Volt\n        wattImage: 'data:image/png;base64,' + msg.payload.wattGraph.toString('base64'),  // Utilisation du buffer pour l'image Watt de Volt\n        nidusImage: 'data:image/png;base64,' + msg.payload.nidusGraph.toString('base64'),  // Utilisation du buffer pour l'image Nidus\n        gatlingImage: 'data:image/png;base64,' + msg.payload.gatlingGraph.toString('base64'),  // Utilisation du buffer pour l'image Gatling\n        gatlingGraphComplete: 'data:image/png;base64,' + msg.payload.gatlingGraphComplete.toString('base64'),  // Utilisation du buffer pour l'image Gatling\n        gatlingGraphBySeconds: 'data:image/png;base64,' + msg.payload.gatlingGraphBySeconds.toString('base64'),  // Utilisation du buffer pour l'image Gatling\n    },\n    styles: {\n        header: {\n            fontSize: 22,\n            bold: true,\n            margin: [0, 30, 0, 0]\n        },\n        header2: {\n            fontSize: 18,\n            bold: true,\n            margin: [0, 20, 0, 0]\n        }\n    }\n};\n\nreturn msg; // Renvoyer le message\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2000,
        "y": 720,
        "wires": [
            [
                "185b6166af84320d"
            ]
        ]
    },
    {
        "id": "4f40317345f06680",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "Activate",
        "func": "var delay = msg.payload.time !== null ? msg.payload.time * 60 * 1000 : 30000; // Convertir en millisecondes si nécessaire\n\n// Créer les objets de message pour chaque sortie\nvar msg1 = {\n    cmd: \"subscribe\",\n    topic: \"/\",\n    complete: true,\n    out:1,\n    delay: delay, // Délai en ms\n    filepath: msg.filePath,\n    graphPath: msg.graphPath\n};\n\nvar msg2 = {\n    cmd: \"subscribe\",\n    topic: \"volt/benchmark/cpu\",\n    out: 2,\n    delay: delay, // Délai en ms\n    filepath: msg.filePath,\n    graphPath: msg.graphPath\n};\n\nvar msg3 = {\n    cmd: \"subscribe\",\n    topic: \"volt/benchmark/ram\",\n    out: 3,\n    delay: delay, // Délai en ms\n    filepath: msg.filePath,\n    graphPath: msg.graphPath\n};\n\nvar msg4 = {\n    cmd: \"subscribe\",\n    topic: \"volt/benchmark/processes\",\n    out: 4,\n    delay: delay, // Délai en ms\n    filepath: msg.filePath,\n    graphPath: msg.graphPath\n};\n\nvar msg5 = {\n    cmd: \"subscribe\",\n    topic: \"volt/benchmark/temp\",\n    out: 5,\n    delay: delay, // Délai en ms\n    filepath: msg.filePath,\n    graphPath: msg.graphPath\n};\n\n\n\nvar msg6 = {\n    cmd: \"subscribe\",\n    topic: \"nidus/benchmark/cpu\",\n    out: 6,\n    delay: delay, // Délai en ms\n    filepath: msg.filePath,\n    graphPath: msg.graphPath\n};\n\nvar msg7 = {\n    cmd: \"subscribe\",\n    topic: \"nidus/benchmark/ram\",\n    out: 7,\n    delay: delay, // Délai en ms\n    filepath: msg.filePath,\n    graphPath: msg.graphPath\n};\n\nvar msg8 = {\n    cmd: \"subscribe\",\n    topic: \"nidus/benchmark/processes\",\n    out: 8,\n    delay: delay, // Délai en ms\n    filepath: msg.filePath,\n    graphPath: msg.graphPath\n};\nvar msg9 = {\n    cmd: \"subscribe\",\n    topic: \"nidus/benchmark/temp\",\n    out: 9,\n    delay: delay, // Délai en ms\n    filepath: msg.filePath,\n    graphPath: msg.graphPath\n};\n\n\n// Envoyer les messages aux sorties correspondantes\n// Les messages seront envoyés dans l'ordre de 0 à 6, correspondant aux sorties activées\n// Assurez-vous que le nœud \"Function\" a sept sorties activées pour recevoir ces messages\nnode.send([msg1, msg2, msg3, msg4, msg5, msg6, msg7,msg8,msg9]);\n",
        "outputs": 9,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 740,
        "wires": [
            [
                "c8c3e29825d49861",
                "fc6746ed9e645fed"
            ],
            [
                "905380c4f5bb1ad1"
            ],
            [
                "e26c12ee046503ba"
            ],
            [
                "b254ad9010121dee"
            ],
            [
                "3715c3bb37e69748"
            ],
            [
                "2bbbedfa3bc935ab"
            ],
            [
                "6cabf479e38ccb4f"
            ],
            [
                "2e76fec4dafc9e0e"
            ],
            [
                "538ecbc87e2091c4"
            ]
        ]
    },
    {
        "id": "c8c3e29825d49861",
        "type": "delay",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "pauseType": "delayv",
        "timeout": "15",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 880,
        "y": 460,
        "wires": [
            [
                "edb017f1c8523846"
            ]
        ]
    },
    {
        "id": "4e2b38fbcc7da674",
        "type": "join",
        "z": "3ddecfbaabd60ba5",
        "name": "Values_Volt",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "4",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1330,
        "y": 560,
        "wires": [
            [
                "8e88bc82f50cac2f",
                "7be259fe9744c2ef",
                "716e30395513dde2"
            ]
        ]
    },
    {
        "id": "47bc06039d5e9985",
        "type": "join",
        "z": "3ddecfbaabd60ba5",
        "name": "Moyennes",
        "mode": "custom",
        "build": "object",
        "property": "moyenne",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1470,
        "y": 680,
        "wires": [
            [
                "4b6c6f050d038ee7"
            ]
        ]
    },
    {
        "id": "a74b27989ec4408a",
        "type": "link out",
        "z": "3ddecfbaabd60ba5",
        "name": "End_PDF",
        "mode": "link",
        "links": [
            "e30a7bb45bf64a45",
            "61ea260f9c0b6ef6"
        ],
        "x": 2035,
        "y": 680,
        "wires": []
    },
    {
        "id": "e30a7bb45bf64a45",
        "type": "link in",
        "z": "3ddecfbaabd60ba5",
        "name": "From_PDF",
        "links": [
            "a74b27989ec4408a"
        ],
        "x": 385,
        "y": 260,
        "wires": [
            [
                "3ea9945f5d2c5f21"
            ]
        ]
    },
    {
        "id": "d91af9dfcf3f0f53",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "MiseAJourDelay",
        "func": "// Vérifier si msg.delay est défini\nif (msg.delay !== undefined) {\n    if(msg.delay === 1){\n        return null;\n    }\n    // Convertir msg.delay en nombre (si c'est une chaîne)\n    const currentDelay = parseFloat(msg.delay);\n\n    // Vérifier si currentDelay est un nombre valide\n    if (!isNaN(currentDelay)) {\n        // Soustraire 250 de currentDelay, mais s'assurer que le résultat est positif\n        const newDelay = Math.max(currentDelay - 250, 0);\n\n        // Mettre à jour msg.delay avec la nouvelle valeur\n        msg.delay = newDelay;\n\n        // Si le nouveau délai est 0, ne rien retourner\n        if (newDelay === 0) {\n            msg.delay = 1;\n            msg.originalDelay = 1;\n            return msg;\n        } else {\n            // Sinon, retourner le message avec le nouveau délai\n            return msg;\n        }\n    } else {\n        // msg.delay n'est pas un nombre valide\n        return null;\n    }\n} else {\n    // msg.delay n'est pas défini\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 580,
        "wires": [
            [
                "64e1851e14688fd8",
                "2c1b89a63b33039b",
                "ff91089fd9f9e149",
                "cdbce0d39485d9da"
            ]
        ]
    },
    {
        "id": "64e1851e14688fd8",
        "type": "delay",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "pauseType": "delay",
        "timeout": "250",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 630,
        "y": 580,
        "wires": [
            [
                "d91af9dfcf3f0f53"
            ]
        ]
    },
    {
        "id": "fc6746ed9e645fed",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "CopyDelay",
        "func": "// Vérifier si msg.delay est défini\nif (msg.delay !== undefined) {\nmsg.originalDelay = msg.delay;\nreturn msg;\n}else{\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 640,
        "wires": [
            [
                "d91af9dfcf3f0f53"
            ]
        ]
    },
    {
        "id": "9a915e3fcad82fe5",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "Gatling line chart Time_Response",
        "func": "// Assurez-vous que msg.payload.gatling.Log est un tableau\nvar logEntries = Array.isArray(msg.payload.Log) ? msg.payload.Log : [];\n\n// Création du graphique\nvar chartData = {\n    \n    type: 'line', // Utilisez un graphique de type \"line\"\n    options: {\n        scales: {\n            yAxes: [{\n                ticks: {\n                    fontSize: 30\n                }\n            }],\n            xAxes: [{\n                ticks: {\n                    fontSize: 30\n                }\n            }]\n        },\n        dataset :{\n            labels: {\n                // This more specific font property overrides the global property\n                fontSize: 30,\n                fontColor: 'black',\n                family: 'Arial'\n            },\n            font: {\n                size: 30\n            },\n        },\n        title: {\n            labels: {\n                // This more specific font property overrides the global property\n                fontSize: 30,\n                fontColor: 'black',\n                family: 'Arial'\n            },\n            font: {\n                size: 30\n            },\n            display: true,\n            text: 'Comparaison des performances', // Titre du graphique,\n            fontSize: 40 \n        },\n        legend: {\n            labels: {\n                // This more specific font property overrides the global property\n                fontSize: 30,\n                fontColor: 'black',\n                family: 'Arial'\n            },\n            font: {\n                size: 30\n            },\n            display: true // Affichez la légende du graphique\n        },\n        chartArea: {\n            backgroundColor: '#d3d7dd' // Couleur de fond du graphique\n        },\n        plugins: {\n            datalabels: {\n                display: false // Désactivez l'affichage des étiquettes de données\n            }\n        }\n    },\n    data: {\n        labels: msg.payload.Log.timeResponse.data.labels,\n\n        datasets: msg.payload.Log.timeResponse.data.datasets,\n    }\n};\n\nmsg.payload = chartData; // Attribuez les données du graphique au message\nmsg.topic = \"CompletGatling\";\nmsg.graphPath = global.get('path') || 0;\nreturn msg; // Renvoyez le message\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1800,
        "y": 340,
        "wires": [
            [
                "1a702c563ebe672c",
                "f17409208b3c21e8"
            ]
        ]
    },
    {
        "id": "1a702c563ebe672c",
        "type": "chart-image",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "width": "1920",
        "height": "1920",
        "x": 2030,
        "y": 340,
        "wires": [
            [
                "3de8c7b1973545bb",
                "648931f9266586ae"
            ]
        ]
    },
    {
        "id": "3de8c7b1973545bb",
        "type": "file",
        "z": "3ddecfbaabd60ba5",
        "name": "Gatling Complet",
        "filename": "graphPath.gatling.complet",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2260,
        "y": 340,
        "wires": [
            [
                "c1b5d9552a6292e9"
            ]
        ]
    },
    {
        "id": "174a1101b2f9c22a",
        "type": "chart-image",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "width": "1920",
        "height": "1920",
        "x": 1970,
        "y": 540,
        "wires": [
            [
                "dd1e6a5c8dd54193",
                "648931f9266586ae"
            ]
        ]
    },
    {
        "id": "dd1e6a5c8dd54193",
        "type": "file",
        "z": "3ddecfbaabd60ba5",
        "name": "volt.complet",
        "filename": "graphPath.volt.complet",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2250,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "22465f6cd8c94555",
        "type": "chart-image",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "width": "1920",
        "height": "1920",
        "x": 1970,
        "y": 580,
        "wires": [
            [
                "306f405893baae9d",
                "648931f9266586ae"
            ]
        ]
    },
    {
        "id": "306f405893baae9d",
        "type": "file",
        "z": "3ddecfbaabd60ba5",
        "name": "volt.complet",
        "filename": "graphPath.nidus.complet",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2250,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "5fcb7ef9b29fa1d1",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "Nidus Line Chart",
        "func": "// Données reçues du flux précédent\nvar rawData = msg.payload;\nvar delayInSeconds = msg.delay / 1000; // Conversion en secondes\nmsg.topic = \"NidusLineChart\";\n// Extraction des données nécessaires\nvar nidusCpuData = rawData[\"nidus/benchmark/cpu\"];\nvar nidusRamData = rawData[\"nidus/benchmark/ram\"];\nvar nidusTempData = rawData[\"nidus/benchmark/temp\"];\n\n// Création du graphique\nvar chartData = {\n    type: 'line',  // Changement du type de graphique en \"line\"\n    options: {\n        scales: {\n            yAxes: [{\n                ticks: {\n                    fontSize: 30\n                }\n            }],\n            xAxes: [{\n                ticks: {\n                    fontSize: 30\n                }\n            }]\n        },\n        title: {\n            display: true,\n            text: 'Comparaison des performances',\n            fontSize: 40 // Définir la taille de la police ici\n        },\n        legend: {\n            display: true,\n            labels: {\n                // This more specific font property overrides the global property\n                fontSize: 30,\n                fontColor: 'black',\n                family: 'Arial'\n            },\n            font: {\n                size: 30\n            },\n        },\n        chartArea: {\n            backgroundColor: '#d3d7dd'\n        },\n        plugins: {\n            datalabels: {\n                display: false  // Désactiver l'affichage des étiquettes de données\n            }\n        }\n    },\n    data: {\n        labels: Array.from({ length: nidusCpuData.length }, (_, i) => {\n            // Calculer le délai réel entre chaque valeur en millisecondes\n            var realDelay = msg.delay / (nidusCpuData.length - 1);\n\n            // Calculer le temps en millisecondes à partir de l'index\n            var timeMillis = i * realDelay;\n\n            // Convertir le temps en minutes et secondes\n            var minutes = Math.floor(timeMillis / 60000); // 60000 millisecondes équivalent à 1 minute\n            var seconds = ((timeMillis % 60000) / 1000).toFixed(0);\n\n            // Créer le label en fonction de la durée\n            if (minutes === 0) {\n                return seconds + ' s'; // Temps en secondes si inférieur à 1 minute\n            } else {\n                return minutes + ' min ' + seconds + ' s'; // Temps en minute:secondes si supérieur à 1 minute\n            }\n        }),\n\n\n        datasets: [\n            \n            {\n                label: \"Nidus CPU\",\n                borderColor: 'rgba(255, 69, 0, 1)',\n                fill: false,\n                data: nidusCpuData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Nidus RAM\",\n                borderColor: 'rgba(255, 165, 0, 1)',\n                fill: false,\n                data: nidusRamData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Nidus Temp\",\n                borderColor: 'rgba(255, 0, 0, 1)',\n                fill: false,\n                data: nidusTempData,\n                pointRadius: 0,\n            }\n        ]\n    }\n};\n\nmsg.payload = chartData;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 580,
        "wires": [
            [
                "22465f6cd8c94555"
            ]
        ]
    },
    {
        "id": "8e88bc82f50cac2f",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "Volt Line Chart",
        "func": "// Données reçues du flux précédent\nvar rawData = msg.payload;\nvar delayInSeconds = msg.delay / 1000; // Conversion en secondes\nmsg.topic = \"VoltLineChart\";\n// Extraction des données nécessaires\nvar voltCpuData = rawData[\"volt/benchmark/cpu\"];\nvar voltRamData = rawData[\"volt/benchmark/ram\"];\nvar voltTempData = rawData[\"volt/benchmark/temp\"];\n\n\n// Création du graphique\nvar chartData = {\n    type: 'line',  // Changement du type de graphique en \"line\"\n    options: {\n        scales: {\n            yAxes: [{\n                ticks: {\n                    fontSize: 30\n                }\n            }],\n            xAxes: [{\n                ticks: {\n                    fontSize: 30\n                }\n            }]\n        },\n        title: {\n            display: true,\n            text: 'Comparaison des performances',\n            fontSize: 40 \n        },\n        legend: {\n            display: true,\n            labels: {\n                // This more specific font property overrides the global property\n                fontSize: 30,\n                fontColor: 'black',\n                family: 'Arial'\n            },\n            font: {\n                size: 30\n            },\n        },\n        chartArea: {\n            backgroundColor: '#d3d7dd'\n        },\n        plugins: {\n            datalabels: {\n                display: false  // Désactiver l'affichage des étiquettes de données\n            }\n        }\n    },\n    data: {\n        labels: Array.from({ length: voltCpuData.length }, (_, i) => {\n            // Calculer le délai réel entre chaque valeur en millisecondes\n            var realDelay = msg.delay / (voltCpuData.length - 1);\n\n            // Calculer le temps en millisecondes à partir de l'index\n            var timeMillis = i * realDelay;\n\n            // Convertir le temps en minutes et secondes\n            var minutes = Math.floor(timeMillis / 60000); // 60000 millisecondes équivalent à 1 minute\n            var seconds = ((timeMillis % 60000) / 1000).toFixed(0);\n\n            // Créer le label en fonction de la durée\n            if (minutes === 0) {\n                return seconds + ' s'; // Temps en secondes si inférieur à 1 minute\n            } else {\n                return minutes + ' min ' + seconds + ' s'; // Temps en minute:secondes si supérieur à 1 minute\n            }\n        }),datasets: [\n            {\n                label: \"Volt CPU\",\n                borderColor: 'rgba(0, 128, 255, 1)',  // Couleur de la ligne (couleur froide pour Volt)\n                fill: false,  // Désactiver le remplissage sous la ligne\n                data: voltCpuData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Volt RAM\",\n                borderColor: 'rgba(0, 255, 128, 1)',\n                fill: false,\n                data: voltRamData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Volt Temp\",\n                borderColor: 'rgba(0, 173, 0, 1)',\n                fill: false,\n                data: voltTempData,\n                pointRadius: 0,\n            },\n\n        ]\n    }\n};\n\nmsg.payload = chartData;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1740,
        "y": 540,
        "wires": [
            [
                "174a1101b2f9c22a"
            ]
        ]
    },
    {
        "id": "843f23c9472dcd82",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "Commmandes de StressTest",
        "func": "const sshNidus = \"ssh tobby@nidus\"; \nconst sshVolt = \"ssh tobby@157.26.228.77\"; \n\n    var stressCommandsNidus;\n    var stressCommandsVolt;\n\n    if (msg.payload.stressNidus) {\n        var msg1 = {\n            payload : `stress-ng --cpu 2 --io 1 --timeout ${msg.payload.timeStress*60}s --cpu-load 100 --vm-bytes 3G`\n        };\n    }\n\n    if (msg.payload.stressVolt) {\n        var msg2 = {\n            payload: `ssh tobby@157.26.228.77 \\\"stress-ng --cpu 2 --io 1 --timeout ${msg.payload.timeStress*60}s --cpu-load 100 --vm-bytes 3G\\\"`\n        };\n    }\n    node.send([msg1, msg2]);\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 780,
        "wires": [
            [
                "53935ce83ac7114d"
            ],
            [
                "53935ce83ac7114d"
            ]
        ]
    },
    {
        "id": "53935ce83ac7114d",
        "type": "exec",
        "z": "3ddecfbaabd60ba5",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 730,
        "y": 840,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "2c1b89a63b33039b",
        "type": "ui_template",
        "z": "3ddecfbaabd60ba5",
        "group": "7db53a0c4211bca9",
        "name": "ProgressBar",
        "order": 3,
        "width": 0,
        "height": 0,
        "format": "<style>\n    .custom-progress-bar .md-progress-linear-fill {\n        height: 20px;\n        /* Définissez la hauteur souhaitée ici */\n    }\n</style>\n\n<div layout=\"column\" layout-align=\"center center\">\n    <md-progress-linear class=\"md-accent custom-progress-bar\" md-mode=\"determinate\"\n        value=\"{{(msg.originalDelay - msg.delay) / msg.originalDelay * 100}}\"\n        ng-show=\"msg.delay !== undefined && msg.originalDelay !== undefined\"></md-progress-linear>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 630,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "3f9aa754e519b6bf",
        "type": "join",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "8",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 1910,
        "y": 760,
        "wires": [
            [
                "b410e022596a76a9",
                "d582ac8785f743fc"
            ]
        ]
    },
    {
        "id": "4b6c6f050d038ee7",
        "type": "change",
        "z": "3ddecfbaabd60ba5",
        "name": "Organise Payload-Topic",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "moyenne",
                "tot": "msg",
                "dc": true
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "moyenne",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1490,
        "y": 740,
        "wires": [
            [
                "3f9aa754e519b6bf",
                "0e7f197bf1565d7d",
                "34a2fc5b8d7b23f5",
                "2e398589767e8c31",
                "7abe58379969346a",
                "27d07c312e196c9d",
                "cb58717ad99b6f27"
            ]
        ]
    },
    {
        "id": "f19dd33d0ea2556f",
        "type": "change",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "complete",
                "pt": "msg",
                "to": "true",
                "tot": "bool",
                "dc": true
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "ChartComplete",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1900,
        "y": 620,
        "wires": [
            [
                "47bc06039d5e9985",
                "9f079d47abbdb7dc"
            ]
        ]
    },
    {
        "id": "b410e022596a76a9",
        "type": "change",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Moyenne_Graph",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1790,
        "y": 720,
        "wires": [
            [
                "61d24da92c494fff",
                "30f8ec37c86dd727"
            ]
        ]
    },
    {
        "id": "34a2fc5b8d7b23f5",
        "type": "file in",
        "z": "3ddecfbaabd60ba5",
        "name": "Read Graph Nidus Complet",
        "filename": "graphPath.nidus.complet",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1500,
        "y": 960,
        "wires": [
            [
                "4d1dc0b82f1f1fc7"
            ]
        ]
    },
    {
        "id": "4d1dc0b82f1f1fc7",
        "type": "base64",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "action": "str",
        "property": "msg.payload",
        "x": 1720,
        "y": 960,
        "wires": [
            [
                "880fa3757ad43cf0"
            ]
        ]
    },
    {
        "id": "0e7f197bf1565d7d",
        "type": "file in",
        "z": "3ddecfbaabd60ba5",
        "name": "Read Graph Volt Complet",
        "filename": "graphPath.volt.complet",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1490,
        "y": 840,
        "wires": [
            [
                "c7adcd216ef822e7"
            ]
        ]
    },
    {
        "id": "c7adcd216ef822e7",
        "type": "base64",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "action": "str",
        "property": "msg.payload",
        "x": 1720,
        "y": 840,
        "wires": [
            [
                "43a3c100f421df13"
            ]
        ]
    },
    {
        "id": "43a3c100f421df13",
        "type": "change",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "voltGraph",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1710,
        "y": 800,
        "wires": [
            [
                "3f9aa754e519b6bf"
            ]
        ]
    },
    {
        "id": "880fa3757ad43cf0",
        "type": "change",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "nidusGraph",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1710,
        "y": 1000,
        "wires": [
            [
                "3f9aa754e519b6bf"
            ]
        ]
    },
    {
        "id": "e3d7396a7875a998",
        "type": "debug",
        "z": "3ddecfbaabd60ba5",
        "name": "CATCH_ERROR",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 1120,
        "wires": []
    },
    {
        "id": "46ed706987bdb120",
        "type": "catch",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 280,
        "y": 1120,
        "wires": [
            [
                "e3d7396a7875a998"
            ]
        ]
    },
    {
        "id": "648931f9266586ae",
        "type": "join",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "6",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1730,
        "y": 620,
        "wires": [
            [
                "f19dd33d0ea2556f"
            ]
        ]
    },
    {
        "id": "9cca8b6d34885bce",
        "type": "ina-sensor",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "handle": "173c4031bd3a25c0",
        "x": 370,
        "y": 420,
        "wires": [
            [
                "9448fba42d2b5bb9"
            ],
            [
                "9448fba42d2b5bb9"
            ]
        ]
    },
    {
        "id": "f294c4f82c5e3b12",
        "type": "join",
        "z": "3ddecfbaabd60ba5",
        "name": "Join_2",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 870,
        "y": 420,
        "wires": [
            [
                "028a865d49be24af"
            ]
        ]
    },
    {
        "id": "ff91089fd9f9e149",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "USE",
        "func": "msg.use = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 460,
        "wires": [
            [
                "f294c4f82c5e3b12"
            ]
        ]
    },
    {
        "id": "2333e58dfc902ea5",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "MilliWatt",
        "func": "// Récupérer les valeurs de courant (mA) et de tension (V) depuis les propriétés msg.payload\nvar current_mA = msg.payload.miliamps;\nvar voltage_V = msg.payload.voltage;\n\n// Calculer la puissance en watts (W)\nvar power_W = (current_mA / 1000) * voltage_V;  // Convertir le courant en ampères\n\n// Vérifier si la tension est négative\nif (voltage_V < 0.5) {\n    // Si la tension est négative, ne rien faire et retourner le message inchangé\n    return null;\n}\n\n// Créer un nouvel objet msg avec la puissance en watts comme payload\nmsg.payload = power_W*1000;\nmsg.topic = \"Watt\";\n// Renvoyer le message modifié\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 420,
        "wires": [
            [
                "f294c4f82c5e3b12"
            ]
        ]
    },
    {
        "id": "9448fba42d2b5bb9",
        "type": "join",
        "z": "3ddecfbaabd60ba5",
        "name": "Join_Amp_Volt",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 560,
        "y": 420,
        "wires": [
            [
                "2333e58dfc902ea5"
            ]
        ]
    },
    {
        "id": "028a865d49be24af",
        "type": "switch",
        "z": "3ddecfbaabd60ba5",
        "name": "DropWhenNotUse",
        "property": "use",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1050,
        "y": 420,
        "wires": [
            [
                "746cac8a393dad70"
            ],
            []
        ]
    },
    {
        "id": "edb017f1c8523846",
        "type": "join",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 1090,
        "y": 460,
        "wires": [
            [
                "0b4111c93adf9346"
            ]
        ]
    },
    {
        "id": "0b4111c93adf9346",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "Rename",
        "func": "// Définir le sujet du message\nmsg.topic = \"volt/benchmark/watt\";\n\n// Vérifier si le tableau payload existe et n'est pas vide\nif (msg.payload && Array.isArray(msg.payload) && msg.payload.length > 0) {\n    // Convertir les valeurs en chaînes de caractères en nombres entiers\n    var numericValues = msg.payload.map(function (value) {\n        return parseInt(value, 10); // 10 indique la base décimale\n    }).filter(function (value) {\n        return !isNaN(value); // Filtrer les valeurs non numériques\n    });\n\n    // Vérifier si des valeurs numériques ont été trouvées\n    if (numericValues.length > 0) {\n        // Calculer la somme des valeurs numériques dans le tableau\n        var sum = numericValues.reduce(function (acc, value) {\n            return acc + value;\n        }, 0);\n\n        // Calculer la moyenne en divisant la somme par le nombre d'éléments\n        var moyenne = sum / numericValues.length;\n\n        // Arrondir la moyenne à deux chiffres après la virgule et au multiple de 0.05 le plus proche\n        moyenne = Math.round(moyenne * 20) / 20;\n\n        // Ajouter la moyenne au message\n        msg.moyenne = moyenne.toFixed(2);\n    } else {\n        // Si aucune valeur numérique n'a été trouvée, définir la moyenne à 0\n        msg.moyenne = \"0.00\";\n    }\n} else {\n    // Si le tableau est vide ou n'existe pas, définir la moyenne à 0\n    msg.moyenne.volt.benchmark.cpu = \"0.00\";\n}\n\n// Renvoyer le message modifié\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 460,
        "wires": [
            [
                "661cbaab578efee6",
                "47bc06039d5e9985"
            ]
        ]
    },
    {
        "id": "746cac8a393dad70",
        "type": "change",
        "z": "3ddecfbaabd60ba5",
        "name": "Set Payload Watt",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.Watt",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1270,
        "y": 420,
        "wires": [
            [
                "edb017f1c8523846"
            ]
        ]
    },
    {
        "id": "661cbaab578efee6",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "Watt Line Chart",
        "func": "// Données reçues du flux précédent\nvar rawData = msg.payload;\nvar delayInSeconds = msg.delay / 1000; // Conversion en secondes\n\n// Extraction des données nécessaires\nvar voltWatt = rawData;\n\n// Fonction pour calculer la moyenne mobile\nfunction movingAverage(data, windowSize) {\n    var smoothedData = [];\n    for (var i = 0; i < data.length; i++) {\n        var start = Math.max(0, i - Math.floor(windowSize / 2));\n        var end = Math.min(data.length - 1, i + Math.floor(windowSize / 2));\n        var sum = 0;\n        for (var j = start; j <= end; j++) {\n            sum += data[j];\n        }\n        smoothedData.push(sum / (end - start + 1));\n    }\n    return smoothedData;\n}\n\n// Appliquer la moyenne mobile avec une fenêtre de 5 échantillons (vous pouvez ajuster la taille de la fenêtre si nécessaire)\nvar smoothedVoltWatt = movingAverage(voltWatt, 5);\n\n// Création du graphique\nvar chartData = {\n    type: 'line',  // Changement du type de graphique en \"line\"\n    options: {\n        scales: {\n            yAxes: [{\n                ticks: {\n                    fontSize: 30\n                }\n            }],\n            xAxes: [{\n                ticks: {\n                    fontSize: 30\n                }\n            }]\n        },\n        title: {\n            display: true,\n            text: 'Comparaison des performances',\n            fontSize: 40\n        },\n        legend: {\n            display: true,\n            labels: {\n                // This more specific font property overrides the global property\n                fontSize: 30,\n                fontColor: 'black',\n                family: 'Arial'\n            },\n            font: {\n                size: 30\n            },\n        },\n        chartArea: {\n            backgroundColor: '#d3d7dd'\n        },\n        plugins: {\n            datalabels: {\n                display: false  // Désactiver l'affichage des étiquettes de données\n            }\n        }\n    },\n    data: {\n        labels: Array.from({ length: smoothedVoltWatt.length }, (_, i) => {\n            // Calculer le délai réel entre chaque valeur en millisecondes\n            var realDelay = msg.delay / (smoothedVoltWatt.length - 1);\n\n            // Calculer le temps en millisecondes à partir de l'index\n            var timeMillis = i * realDelay;\n\n            // Convertir le temps en minutes et secondes\n            var minutes = Math.floor(timeMillis / 60000); // 60000 millisecondes équivalent à 1 minute\n            var seconds = ((timeMillis % 60000) / 1000).toFixed(0);\n\n            // Créer le label en fonction de la durée\n            if (minutes === 0) {\n                return seconds + ' s'; // Temps en secondes si inférieur à 1 minute\n            } else {\n                return minutes + ' min ' + seconds + ' s'; // Temps en minute:secondes si supérieur à 1 minute\n            }\n        }),\n        datasets: [\n            {\n                label: \"Volt Watt\",\n                borderColor: 'rgba(0, 255, 255, 1)',\n                fill: false,\n                data: smoothedVoltWatt, // Utilisation des données lissées\n                pointRadius: 0,\n            },\n        ]\n    }\n};\n\nmsg.payload = chartData;\nmsg.topic = \"Watt\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1740,
        "y": 460,
        "wires": [
            [
                "73659a47db81fffa"
            ]
        ]
    },
    {
        "id": "73659a47db81fffa",
        "type": "chart-image",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "width": "1920",
        "height": "1920",
        "x": 2030,
        "y": 460,
        "wires": [
            [
                "f53a9c270f0476dd",
                "648931f9266586ae"
            ]
        ]
    },
    {
        "id": "f53a9c270f0476dd",
        "type": "file",
        "z": "3ddecfbaabd60ba5",
        "name": "volt.watt",
        "filename": "graphPath.volt.watt",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2240,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "2e398589767e8c31",
        "type": "file in",
        "z": "3ddecfbaabd60ba5",
        "name": "Read Graph Volt Watt",
        "filename": "graphPath.volt.watt",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1480,
        "y": 880,
        "wires": [
            [
                "b536d3599aa2f9d1"
            ]
        ]
    },
    {
        "id": "b536d3599aa2f9d1",
        "type": "base64",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "action": "str",
        "property": "msg.payload",
        "x": 1720,
        "y": 880,
        "wires": [
            [
                "b0c62acec8c6f52e"
            ]
        ]
    },
    {
        "id": "b0c62acec8c6f52e",
        "type": "change",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "wattGraph",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1710,
        "y": 920,
        "wires": [
            [
                "3f9aa754e519b6bf"
            ]
        ]
    },
    {
        "id": "cdbce0d39485d9da",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "Prepare Payload Time",
        "func": "// Vérifier si les valeurs sont toutes les deux égales à 1 milliseconde\nif (msg.originalDelay === 1 && msg.delay === 1) {\n    msg.payload = \"00:00\";  // Cas spécial\n} else {\n    // Calculer le temps effectué et le temps total (en millisecondes)\n    var tempsEffectue = msg.originalDelay - msg.delay;\n    var tempsTotal = msg.originalDelay;\n\n    // Convertir les millisecondes en secondes\n    tempsEffectue /= 1000;\n    tempsTotal /= 1000;\n\n    // Arrondir les secondes\n    tempsEffectue = Math.round(tempsEffectue);\n    tempsTotal = Math.round(tempsTotal);\n\n    // Formater les temps dans le format \"mm:ss\"\n    var formatTemps = function (temps) {\n        var minutes = Math.floor(temps / 60);\n        var secondes = temps % 60;\n        return (minutes < 10 ? \"0\" : \"\") + minutes + \":\" + (secondes < 10 ? \"0\" : \"\") + secondes;\n    };\n\n    // Former le résultat\n    var tempsFormate = formatTemps(tempsEffectue) + \"/\" + formatTemps(tempsTotal);\n\n    msg.payload = tempsFormate;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 520,
        "wires": [
            [
                "53715ad9209c9206"
            ]
        ]
    },
    {
        "id": "53715ad9209c9206",
        "type": "ui_text",
        "z": "3ddecfbaabd60ba5",
        "group": "7db53a0c4211bca9",
        "order": 5,
        "width": 12,
        "height": 2,
        "name": "Time",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "30",
        "color": "#e01b24",
        "x": 370,
        "y": 460,
        "wires": []
    },
    {
        "id": "90f06f2e3314dc04",
        "type": "ui_toast",
        "z": "3ddecfbaabd60ba5",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "Valider",
        "cancel": "Annuler",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 270,
        "y": 840,
        "wires": [
            [
                "43879f6f68a19b72"
            ]
        ]
    },
    {
        "id": "c31b16e09ed16fb6",
        "type": "ui_button",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "group": "7db53a0c4211bca9",
        "order": 6,
        "width": 4,
        "height": 2,
        "passthru": true,
        "label": "Purge",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "Voulez vous vraiment purger tout les fichier generé par Node-Red ?",
        "payloadType": "str",
        "topic": "Purge des fichier !!!",
        "topicType": "str",
        "x": 250,
        "y": 800,
        "wires": [
            [
                "90f06f2e3314dc04"
            ]
        ]
    },
    {
        "id": "8812246b7bf96e92",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "Purge",
        "func": "if (msg.payload === \"Valider\"){\n    msg.payload = \"rm -r /home/NodeRed/* && rm -r /home/tobby/.gatling/gatling-charts-highcharts-bundle-3.9.5/results/*\";\n    return msg;\n}else{\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 920,
        "wires": [
            [
                "53935ce83ac7114d"
            ]
        ]
    },
    {
        "id": "942e569b3f3c24be",
        "type": "ui_toast",
        "z": "3ddecfbaabd60ba5",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "Valider",
        "cancel": "Annuler",
        "raw": false,
        "className": "",
        "topic": "VRAIMENT ???",
        "name": "",
        "x": 270,
        "y": 920,
        "wires": [
            [
                "8812246b7bf96e92",
                "8d8e28367d18d7d7"
            ]
        ]
    },
    {
        "id": "43879f6f68a19b72",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "function 5",
        "func": "if (msg.payload === \"Valider\"){\n    msg.payload = \"En êtes vous bien sûr ???\";\n    return msg;\n}else{\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 880,
        "wires": [
            [
                "942e569b3f3c24be"
            ]
        ]
    },
    {
        "id": "8d8e28367d18d7d7",
        "type": "delay",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 460,
        "y": 960,
        "wires": [
            [
                "e80c81ac6518e905"
            ]
        ]
    },
    {
        "id": "e80c81ac6518e905",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "Mkdir",
        "func": "if (msg.payload === \"Valider\"){\n    msg.payload = \"mkdir /home/NodeRed/png /home/NodeRed/pdf\";\n    return msg;\n}else{\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 960,
        "wires": [
            [
                "53935ce83ac7114d"
            ]
        ]
    },
    {
        "id": "71d1b35c803dd600",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "Command_Gatling",
        "func": "msg.original = msg.payload;\nif (msg.topic !== \"inject\" && msg.payload.time !== undefined && msg.payload.user_gatling !== undefined) {\n        // Crée la commande en utilisant les valeurs spécifiées\n    msg.payload.time = msg.payload.time * 60;\n    msg.payload = `/home/tobby/.gatling/gatling-charts-highcharts-bundle-3.9.5/bin/gatling.sh -s CuriusTRex -bm --run-mode local -erjo \"-Dusers=${msg.payload.user_gatling} -Dramp=${msg.payload.time} -Xms2G -Xmx4G\" | tail -1`;\n    } else {\n        // Utilise la commande d'origine car il ne s'agit pas d'un noeud inject ou les valeurs ne sont pas fournies\n        // Par défaut, utilisez la commande actuelle\n        msg.payload = \"/home/tobby/.gatling/gatling-charts-highcharts-bundle-3.9.5/bin/gatling.sh -s CuriusTRex -bm --run-mode local -erjo \\\" -Dusers=5 -Dramp=5\\\"\";\n    }\n\n    // Renvoie le message modifié\n    return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1040,
        "wires": [
            [
                "94a5562c2961dfd4"
            ]
        ]
    },
    {
        "id": "94a5562c2961dfd4",
        "type": "exec",
        "z": "3ddecfbaabd60ba5",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 650,
        "y": 1020,
        "wires": [
            [
                "d11f7afdc4889557",
                "752215d4be43422d"
            ],
            [
                "752215d4be43422d"
            ],
            [
                "752215d4be43422d"
            ]
        ]
    },
    {
        "id": "250bc45cdae0b36f",
        "type": "inject",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "payload.gatling",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "inject",
        "x": 270,
        "y": 1040,
        "wires": [
            [
                "71d1b35c803dd600"
            ]
        ]
    },
    {
        "id": "d11f7afdc4889557",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "extractFilePathsAndCreateJsonKeyValue",
        "func": "// Fonction pour extraire le chemin après \"file://\"\nvar inputPayload = msg.payload;\n\n// Recherche de l'index de \"file://\"\nvar fileIndex = inputPayload.indexOf(\"file://\");\n\n// Si \"file://\" est trouvé, extrayez le chemin après\nif (fileIndex !== -1) {\n    // Extraire le chemin après \"file://\"\n    var filePath = inputPayload.substring(fileIndex + 7); // +7 pour sauter \"file://\"\n\n    // Supprimer le fichier index.html du chemin, s'il est présent\n        filePath = filePath.substring(0, filePath.length - 12); // -11 pour enlever \"/index.html\"\n\n    // Mettre le chemin extrait dans le message de sortie\n    msg.payload = filePath;\n\n    // Tableau de noms de fichiers .json\n    var jsonFilesList = [\n        \"assertions.json\",\n        \"global_stats.json\",\n        \"stats.json\"\n    ];\n\n    // Créer un tableau de clé-valeurs pour les fichiers .json\n    var jsonFilesKeyValue = {};\n\n    // Parcourir la liste des noms de fichiers et construire les chemins complets\n    for (var i = 0; i < jsonFilesList.length; i++) {\n        var jsonFileName = jsonFilesList[i];\n        var jsonFilePath = filePath + '/js/' + jsonFileName;\n        jsonFilesKeyValue[jsonFileName] = jsonFilePath;\n    }\n\n    // Ajouter le tableau de clé-valeurs au message\n    msg.jsonFiles = jsonFilesKeyValue;\n\n    // Renvoyer le message modifié\n    return msg;\n} else {\n    // Aucun \"file://\" trouvé, renvoyer le message d'origine\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 1020,
        "wires": [
            [
                "9197964b7793ca79",
                "46daa1258fe41e08",
                "53c70d418773723d",
                "7964135626c90274",
                "84709e11a6bfa921"
            ]
        ]
    },
    {
        "id": "9197964b7793ca79",
        "type": "file in",
        "z": "3ddecfbaabd60ba5",
        "name": "Assertion Json",
        "filename": "jsonFiles[\"assertions.json\"]",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1060,
        "y": 1320,
        "wires": [
            [
                "11d925bcc7cda83a",
                "debd3e6aa42b46f3"
            ]
        ]
    },
    {
        "id": "46daa1258fe41e08",
        "type": "file in",
        "z": "3ddecfbaabd60ba5",
        "name": "Global Stats Json",
        "filename": "jsonFiles[\"global_stats.json\"]",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1070,
        "y": 1360,
        "wires": [
            [
                "95ed665ca3423482"
            ]
        ]
    },
    {
        "id": "53c70d418773723d",
        "type": "file in",
        "z": "3ddecfbaabd60ba5",
        "name": "Stats Json",
        "filename": "jsonFiles[\"stats.json\"]",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1050,
        "y": 1400,
        "wires": [
            [
                "35a5648a451bfded"
            ]
        ]
    },
    {
        "id": "35a5648a451bfded",
        "type": "json",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1210,
        "y": 1400,
        "wires": [
            [
                "6a6ebdee55ae4406"
            ]
        ]
    },
    {
        "id": "95ed665ca3423482",
        "type": "json",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1230,
        "y": 1360,
        "wires": [
            [
                "623af51c16473252"
            ]
        ]
    },
    {
        "id": "11d925bcc7cda83a",
        "type": "json",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1210,
        "y": 1320,
        "wires": [
            [
                "a1254d1ea617fcfe"
            ]
        ]
    },
    {
        "id": "a1254d1ea617fcfe",
        "type": "change",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Assertion",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1350,
        "y": 1320,
        "wires": [
            [
                "5f7d9a95d0c65757",
                "8fe707821cdbec6e"
            ]
        ]
    },
    {
        "id": "623af51c16473252",
        "type": "change",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Global",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1370,
        "y": 1360,
        "wires": [
            [
                "5f7d9a95d0c65757",
                "8fe707821cdbec6e"
            ]
        ]
    },
    {
        "id": "6a6ebdee55ae4406",
        "type": "change",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Stats",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1350,
        "y": 1400,
        "wires": [
            [
                "5f7d9a95d0c65757",
                "8fe707821cdbec6e"
            ]
        ]
    },
    {
        "id": "5f7d9a95d0c65757",
        "type": "join",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "4",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1570,
        "y": 1360,
        "wires": [
            [
                "7aea4a31c908237b",
                "392721ce831207db"
            ]
        ]
    },
    {
        "id": "8ff2cbbf96cb265b",
        "type": "change",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "gatling",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1750,
        "y": 1360,
        "wires": [
            [
                "c89add291df1506b",
                "9be4361d76b75f12",
                "d24bae8e139f2096"
            ]
        ]
    },
    {
        "id": "7abe58379969346a",
        "type": "file in",
        "z": "3ddecfbaabd60ba5",
        "name": "Read Graph Gatling",
        "filename": "graphPath.gatling.pass",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1480,
        "y": 1040,
        "wires": [
            [
                "af3509726586fd8a"
            ]
        ]
    },
    {
        "id": "af3509726586fd8a",
        "type": "base64",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "action": "str",
        "property": "msg.payload",
        "x": 1720,
        "y": 1040,
        "wires": [
            [
                "b8596cff6176e5e9"
            ]
        ]
    },
    {
        "id": "b8596cff6176e5e9",
        "type": "change",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "gatlingGraph",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1730,
        "y": 1080,
        "wires": [
            [
                "3f9aa754e519b6bf"
            ]
        ]
    },
    {
        "id": "c89add291df1506b",
        "type": "link out",
        "z": "3ddecfbaabd60ba5",
        "name": "gatling",
        "mode": "link",
        "links": [
            "476457a3a2a870ea"
        ],
        "x": 1875,
        "y": 1400,
        "wires": []
    },
    {
        "id": "476457a3a2a870ea",
        "type": "link in",
        "z": "3ddecfbaabd60ba5",
        "name": "link in 2",
        "links": [
            "c89add291df1506b"
        ],
        "x": 1465,
        "y": 320,
        "wires": [
            [
                "4f2f7a8aa9ba24bb",
                "9a915e3fcad82fe5",
                "035632eacefbd3cd",
                "716e30395513dde2"
            ]
        ]
    },
    {
        "id": "e83ee25f95ec96b8",
        "type": "chart-image",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "width": "1920",
        "height": "1920",
        "x": 2030,
        "y": 300,
        "wires": [
            [
                "96510d6bc4a88a3c",
                "648931f9266586ae"
            ]
        ]
    },
    {
        "id": "4f2f7a8aa9ba24bb",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "Gatling bar chart",
        "func": "// Données reçues du flux précédent\nvar rawData = msg.payload.Global;  // Utilisez les données de msg.payload.gatling.Global\nmsg.topic = \"GatlingPass\"; // Définir le sujet du message\n\n// Extraction des données nécessaires\nvar groupData = [\n    rawData.group1,\n    rawData.group2,\n    rawData.group3,\n    rawData.group4\n];\n\nvar labels = [];\nvar percentages = [];\n\n// Parcourir les données des groupes et extraire les informations\nfor (var i = 1; i <= groupData.length; i++) {\n    var groupName = \"group\" + i;\n    labels.push(rawData[groupName].htmlName);\n    percentages.push(rawData[groupName].percentage);\n}\n\n// Création du graphique\nvar chartData = {\n    type: 'bar',  // Utiliser un graphique de type \"bar\"\n    options: {\n        title: {\n            display: true,\n            text: 'Répartition des performances par groupe', // Titre du graphique,\n            fontSize: 40 \n        },\n        legend: {\n            display: true,\n            labels: {\n                // This more specific font property overrides the global property\n                fontSize: 30,\n                fontColor: 'black',\n                family: 'Arial'\n            },\n            font: {\n                size: 30\n            },\n        },\n        chartArea: {\n            backgroundColor: '#d3d7dd' // Couleur de fond du graphique\n        },\n        scales: {\n            x: {\n                beginAtZero: true,\n                title: {\n                    display: true,\n                    text: 'Groupes' // Titre de l'axe des X\n                }\n            },\n\n            xAxes: [{\n                ticks: {\n                    fontSize: 30\n                }\n            }],\n            y: {\n                beginAtZero: true,\n                title: {\n                    display: true,\n                    text: 'Pourcentage' // Titre de l'axe des Y\n                }\n            },\n            yAxes: [{\n                ticks: {\n                    fontSize: 30\n                }\n            }],\n        },\n        plugins: {\n            datalabels: {\n                anchor: 'end',\n                align: 'top',\n                formatter: function (value) {\n                    return value + '%';  // Ajouter le symbole de pourcentage à l'étiquette\n                }\n            }\n        }\n    },\n    data: {\n        labels: labels,\n        datasets: [\n            {\n                label: \"Pourcentage\", // Légende de l'ensemble de données\n                backgroundColor: 'rgba(0, 128, 255, 0.7)',  // Couleur du remplissage des barres\n                data: percentages,\n                \n            }\n        ]\n    }\n};\nmsg.graphPath = global.get('path') || 0;\nmsg.payload = chartData; // Attribuer les données du graphique au message\nreturn msg; // Renvoyer le message\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1740,
        "y": 300,
        "wires": [
            [
                "e83ee25f95ec96b8",
                "f17409208b3c21e8"
            ]
        ]
    },
    {
        "id": "96510d6bc4a88a3c",
        "type": "file",
        "z": "3ddecfbaabd60ba5",
        "name": "gatling.pass",
        "filename": "graphPath.gatling.pass",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2250,
        "y": 300,
        "wires": [
            [
                "c1b5d9552a6292e9"
            ]
        ]
    },
    {
        "id": "8b690f4ccb97858f",
        "type": "file in",
        "z": "3ddecfbaabd60ba5",
        "name": "Log",
        "filename": "payload",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1050,
        "y": 1440,
        "wires": [
            [
                "e00f65533336a5f7",
                "fb916f6d288fd361"
            ]
        ]
    },
    {
        "id": "1a1358f228cfd1ff",
        "type": "change",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Log",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1450,
        "y": 1460,
        "wires": [
            [
                "5f7d9a95d0c65757"
            ]
        ]
    },
    {
        "id": "7964135626c90274",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "function 6",
        "func": "msg.payload = msg.payload + \"/simulation.log\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 1440,
        "wires": [
            [
                "8b690f4ccb97858f"
            ]
        ]
    },
    {
        "id": "8cf6c16261947a90",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "Log TO JSObject",
        "func": "// Fonction pour analyser les lignes du journal Gatling\nvar lines = msg.payload.split('\\n'); // Divise la charge utile en lignes individuelles et les stocke dans un tableau\nvar logs = []; // Initialise un tableau vide pour stocker les journaux analysés\n\nfor (var i = 0; i < lines.length; i++) { // Parcourt chaque ligne du journal\n    var line = lines[i].trim(); // Supprime les espaces inutiles autour de la ligne\n\n    if (line !== \"\") { // Vérifie si la ligne n'est pas vide\n        var parts = line.split('\\t'); // Divise la ligne en morceaux en utilisant la tabulation comme séparateur\n        var logObject = {}; // Initialise un objet vide pour stocker les informations du journal\n\n        // Définir des noms de clés significatives en fonction de votre format\n        logObject.type = parts[0]; // Type de journal\n        logObject.name = parts[1]; // Nom de la requête\n        logObject.start = parseInt(parts[3]); // Heure de début convertie en nombre entier\n        logObject.end = parseInt(parts[4]); // Heure de fin convertie en nombre entier\n        logObject.status = parts[5]; // Statut de la requête\n        logObject.error = parts[6]; // Message d'erreur en cas d'échec\n\n        logs.push(logObject); // Ajoute l'objet de journal au tableau des journaux analysés\n    }\n}\n\n// Envoyer les journaux analysés en sortie\nmsg.payload = logs; // Stocke les journaux analysés dans msg.logs\nreturn msg; // Renvoie le message modifié avec les journaux analysés\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 1440,
        "wires": [
            [
                "ffcfdf0ac04ea861"
            ]
        ]
    },
    {
        "id": "905380c4f5bb1ad1",
        "type": "subflow:4e666803b8f3f742",
        "z": "3ddecfbaabd60ba5",
        "name": "Volt CPU",
        "x": 980,
        "y": 600,
        "wires": [
            [
                "4e2b38fbcc7da674",
                "47bc06039d5e9985"
            ]
        ]
    },
    {
        "id": "e26c12ee046503ba",
        "type": "subflow:4e666803b8f3f742",
        "z": "3ddecfbaabd60ba5",
        "name": "Volt RAM",
        "x": 980,
        "y": 640,
        "wires": [
            [
                "4e2b38fbcc7da674",
                "47bc06039d5e9985"
            ]
        ]
    },
    {
        "id": "b254ad9010121dee",
        "type": "subflow:4e666803b8f3f742",
        "z": "3ddecfbaabd60ba5",
        "name": "Volt Process",
        "x": 990,
        "y": 680,
        "wires": [
            [
                "4e2b38fbcc7da674",
                "47bc06039d5e9985"
            ]
        ]
    },
    {
        "id": "3715c3bb37e69748",
        "type": "subflow:4e666803b8f3f742",
        "z": "3ddecfbaabd60ba5",
        "name": "Volt Température",
        "x": 1010,
        "y": 720,
        "wires": [
            [
                "4e2b38fbcc7da674",
                "47bc06039d5e9985"
            ]
        ]
    },
    {
        "id": "2bbbedfa3bc935ab",
        "type": "subflow:4e666803b8f3f742",
        "z": "3ddecfbaabd60ba5",
        "name": "Nidus CPU",
        "x": 990,
        "y": 780,
        "wires": [
            [
                "47bc06039d5e9985",
                "14ee02e87481c6b6"
            ]
        ]
    },
    {
        "id": "6cabf479e38ccb4f",
        "type": "subflow:4e666803b8f3f742",
        "z": "3ddecfbaabd60ba5",
        "name": "Nidus RAM",
        "x": 990,
        "y": 820,
        "wires": [
            [
                "47bc06039d5e9985",
                "14ee02e87481c6b6"
            ]
        ]
    },
    {
        "id": "2e76fec4dafc9e0e",
        "type": "subflow:4e666803b8f3f742",
        "z": "3ddecfbaabd60ba5",
        "name": "Nidus Process",
        "x": 1000,
        "y": 860,
        "wires": [
            [
                "47bc06039d5e9985",
                "14ee02e87481c6b6"
            ]
        ]
    },
    {
        "id": "538ecbc87e2091c4",
        "type": "subflow:4e666803b8f3f742",
        "z": "3ddecfbaabd60ba5",
        "name": "Nidus Température",
        "x": 1010,
        "y": 900,
        "wires": [
            [
                "47bc06039d5e9985",
                "14ee02e87481c6b6"
            ]
        ]
    },
    {
        "id": "27d07c312e196c9d",
        "type": "file in",
        "z": "3ddecfbaabd60ba5",
        "name": "Read Graph Gatling",
        "filename": "graphPath.gatling.complet",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1480,
        "y": 1120,
        "wires": [
            [
                "2c1bf4e7042ee3c8"
            ]
        ]
    },
    {
        "id": "2c1bf4e7042ee3c8",
        "type": "base64",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "action": "str",
        "property": "msg.payload",
        "x": 1720,
        "y": 1120,
        "wires": [
            [
                "5add3707313e9f2e"
            ]
        ]
    },
    {
        "id": "5add3707313e9f2e",
        "type": "change",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "gatlingGraphComplete",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1730,
        "y": 1160,
        "wires": [
            [
                "3f9aa754e519b6bf"
            ]
        ]
    },
    {
        "id": "7be259fe9744c2ef",
        "type": "debug",
        "z": "3ddecfbaabd60ba5",
        "name": "Values_Chart",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1520,
        "y": 160,
        "wires": []
    },
    {
        "id": "30f8ec37c86dd727",
        "type": "debug",
        "z": "3ddecfbaabd60ba5",
        "name": "Values_PDF",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2150,
        "y": 780,
        "wires": []
    },
    {
        "id": "7aea4a31c908237b",
        "type": "change",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.Original",
                "pt": "msg",
                "to": "original",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1670,
        "y": 1320,
        "wires": [
            [
                "8ff2cbbf96cb265b"
            ]
        ]
    },
    {
        "id": "035632eacefbd3cd",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "Gatling line chart By_Seconds",
        "func": "// Assurez-vous que msg.payload.gatling.Log est un tableau\nvar logEntries = Array.isArray(msg.payload.Log) ? msg.payload.Log : [];\n\n// Création du graphique\nvar chartData = {\n    type: 'line', // Utilisez un graphique de type \"line\"\n    options: {\n        scales: {\n            yAxes: [{\n                ticks: {\n                    fontSize: 30\n                }\n            }],\n            xAxes: [{\n                ticks: {\n                    fontSize: 30\n                }\n            }]\n        },\n        dataset: {\n            labels: {\n                // This more specific font property overrides the global property\n                fontSize: 30,\n                fontColor: 'black',\n                family: 'Arial'\n            },\n            font: {\n                size: 30\n            },\n        },\n        title: {\n            labels: {\n                // This more specific font property overrides the global property\n                fontSize: 30,\n                fontColor: 'black',\n                family: 'Arial'\n            },\n            font: {\n                size: 30\n            },\n            display: true,\n            text: 'Nombre de Requêtes Simultanées', // Titre du graphique\n            fontSize: 40\n        },\n        legend: {\n            labels: {\n                // This more specific font property overrides the global property\n                fontSize: 30,\n                fontColor: 'black',\n                family: 'Arial'\n            },\n            font: {\n                size: 30\n            },\n            display: true // Affichez la légende du graphique\n        },\n        chartArea: {\n            backgroundColor: '#d3d7dd' // Couleur de fond du graphique\n        },\n        plugins: {\n            datalabels: {\n                display: false // Désactivez l'affichage des étiquettes de données\n            }\n        }\n    },\n    data: {\n        labels: msg.payload.Log.bySeconds.data.labels,\n        datasets: msg.payload.Log.bySeconds.data.datasets,\n    }\n};\n\nmsg.payload = chartData; // Attribuez les données du graphique au message\nmsg.topic = \"bySeconds\";\nmsg.graphPath = global.get('path') || 0;\nreturn msg; // Renvoyez le message\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 380,
        "wires": [
            [
                "a83bcdc5677662ee",
                "f17409208b3c21e8"
            ]
        ]
    },
    {
        "id": "a83bcdc5677662ee",
        "type": "chart-image",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "width": "1920",
        "height": "1920",
        "x": 2030,
        "y": 380,
        "wires": [
            [
                "c17822d4517e2dae",
                "648931f9266586ae"
            ]
        ]
    },
    {
        "id": "c17822d4517e2dae",
        "type": "file",
        "z": "3ddecfbaabd60ba5",
        "name": "Gatling RequeteParSeconde",
        "filename": "graphPath.gatling.bySeconds",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2300,
        "y": 380,
        "wires": [
            [
                "c1b5d9552a6292e9"
            ]
        ]
    },
    {
        "id": "cb58717ad99b6f27",
        "type": "file in",
        "z": "3ddecfbaabd60ba5",
        "name": "Read Graph Gatling",
        "filename": "graphPath.gatling.bySeconds",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1480,
        "y": 1200,
        "wires": [
            [
                "26990d2e7aea2b2c"
            ]
        ]
    },
    {
        "id": "26990d2e7aea2b2c",
        "type": "base64",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "action": "str",
        "property": "msg.payload",
        "x": 1720,
        "y": 1200,
        "wires": [
            [
                "9e06d1cd375a5890"
            ]
        ]
    },
    {
        "id": "9e06d1cd375a5890",
        "type": "change",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "gatlingGraphBySeconds",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1730,
        "y": 1240,
        "wires": [
            [
                "3f9aa754e519b6bf",
                "94af00ebb5a5ce16"
            ]
        ]
    },
    {
        "id": "716e30395513dde2",
        "type": "debug",
        "z": "3ddecfbaabd60ba5",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1800,
        "y": 180,
        "wires": []
    },
    {
        "id": "9f079d47abbdb7dc",
        "type": "debug",
        "z": "3ddecfbaabd60ba5",
        "name": "debug 3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2220,
        "y": 620,
        "wires": []
    },
    {
        "id": "94af00ebb5a5ce16",
        "type": "debug",
        "z": "3ddecfbaabd60ba5",
        "name": "debug 4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2060,
        "y": 1180,
        "wires": []
    },
    {
        "id": "d582ac8785f743fc",
        "type": "debug",
        "z": "3ddecfbaabd60ba5",
        "name": "debug 5",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2080,
        "y": 860,
        "wires": []
    },
    {
        "id": "752215d4be43422d",
        "type": "debug",
        "z": "3ddecfbaabd60ba5",
        "name": "ERROR_Gatling",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 1100,
        "wires": []
    },
    {
        "id": "84709e11a6bfa921",
        "type": "debug",
        "z": "3ddecfbaabd60ba5",
        "name": "debug 6",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 1000,
        "wires": []
    },
    {
        "id": "debd3e6aa42b46f3",
        "type": "debug",
        "z": "3ddecfbaabd60ba5",
        "name": "debug 7",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 1260,
        "wires": []
    },
    {
        "id": "8fe707821cdbec6e",
        "type": "debug",
        "z": "3ddecfbaabd60ba5",
        "name": "debug 8",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1480,
        "y": 1260,
        "wires": []
    },
    {
        "id": "392721ce831207db",
        "type": "debug",
        "z": "3ddecfbaabd60ba5",
        "name": "debug 9",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1680,
        "y": 1400,
        "wires": []
    },
    {
        "id": "9be4361d76b75f12",
        "type": "debug",
        "z": "3ddecfbaabd60ba5",
        "name": "debug 10",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1920,
        "y": 1360,
        "wires": []
    },
    {
        "id": "14ee02e87481c6b6",
        "type": "join",
        "z": "3ddecfbaabd60ba5",
        "name": "Values_Nidus",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "4",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1340,
        "y": 600,
        "wires": [
            [
                "5fcb7ef9b29fa1d1",
                "716e30395513dde2"
            ]
        ]
    },
    {
        "id": "f17409208b3c21e8",
        "type": "debug",
        "z": "3ddecfbaabd60ba5",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2020,
        "y": 180,
        "wires": []
    },
    {
        "id": "c1b5d9552a6292e9",
        "type": "debug",
        "z": "3ddecfbaabd60ba5",
        "name": "debug 12",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2520,
        "y": 340,
        "wires": []
    },
    {
        "id": "d24bae8e139f2096",
        "type": "change",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "payload.log",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1970,
        "y": 1320,
        "wires": [
            [
                "3f9aa754e519b6bf"
            ]
        ]
    },
    {
        "id": "fb916f6d288fd361",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "function 7",
        "func": "// Fonction pour analyser une ligne du journal Gatling\nfunction parseLogLine(line) {\n    const parts = line.split('\\t');\n    return {\n        type: parts[0],\n        name: parts[1],\n        start: parseInt(parts[3]),\n        end: parseInt(parts[4]),\n        status: parts[5],\n        error: parts[6],\n        user: parts[7],\n    };\n}\n\n// Fonction pour calculer le temps de réponse en fonction du début de la simulation\nfunction calculateResponseTime(logEntries, entry) {\n    const simulationStart = logEntries.find((item) => item.type === 'RUN');\n    if (simulationStart) {\n        const startTime = simulationStart.start;\n        const requestTime = entry.start;\n        const timeDiff = requestTime - startTime;\n\n        if (timeDiff >= 60000) {\n            const minutes = Math.floor(timeDiff / 60000);\n            const seconds = ((timeDiff % 60000) / 1000).toFixed(0);\n            return minutes + ' min ' + seconds + ' s';\n        } else {\n            return (timeDiff / 1000).toFixed(0) + ' s';\n        }\n    } else {\n        return 'N/A';\n    }\n}\n\n// Fonction pour traiter les journaux Gatling\nfunction processGatlingLogs(msg) {\n    const logEntries = msg.payload.split('\\n')\n        .map((line) => line.trim())\n        .filter((line) => line !== \"\")\n        .map(parseLogLine)\n        .filter((logObject) => logObject.type === 'RUN' || logEntries.length > 0);\n\n    const timeResponseLabels = logEntries.map((entry) => {\n        if (entry.type === 'RUN') {\n            return 'Début de la Simulation';\n        } else if (entry.type === 'REQUEST') {\n            return calculateResponseTime(logEntries, entry);\n        } else {\n            return '';\n        }\n    });\n\n    const timeResponseData = logEntries.map((entry) => {\n        if (entry.type === 'REQUEST') {\n            return entry.end - entry.start;\n        } else {\n            return 0;\n        }\n    });\n\n    const bySecondsData = logEntries.map((entry, index, array) => {\n        if (entry.type === 'REQUEST') {\n            const currentTimestamp = entry.start;\n            let concurrentRequests = 0;\n\n            for (const otherEntry of array) {\n                if (otherEntry.type === 'REQUEST' &&\n                    otherEntry.start <= currentTimestamp &&\n                    (otherEntry.end === null || otherEntry.end >= currentTimestamp)) {\n                    concurrentRequests++;\n                }\n            }\n\n            return concurrentRequests;\n        } else {\n            return 0;\n        }\n    });\n\n    const timeResponse = {\n        data: {\n            labels: timeResponseLabels,\n            datasets: [\n                {\n                    label: \"Temps de Réponse\",\n                    borderColor: 'rgba(0, 128, 255, 1)',\n                    fill: false,\n                    data: timeResponseData,\n                    pointRadius: 0,\n                }\n            ]\n        }\n    };\n\n    const bySeconds = {\n        data: {\n            labels: timeResponseLabels,\n            datasets: [\n                {\n                    label: \"Requêtes Simultanées\",\n                    borderColor: 'rgba(0, 128, 255, 1)',\n                    fill: false,\n                    data: bySecondsData,\n                    pointRadius: 0,\n                }\n            ]\n        }\n    };\n\n    msg.payload = {\n        timeResponse: timeResponse,\n        bySeconds: bySeconds\n    };\n\n    return msg;\n}\n\n// Utilisation de la fonction\nconst logText = msg.payload; \n\nmsg = processGatlingLogs(msg);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 1480,
        "wires": [
            [
                "69a8955c7555b481"
            ]
        ]
    },
    {
        "id": "69a8955c7555b481",
        "type": "debug",
        "z": "3ddecfbaabd60ba5",
        "name": "debug 13",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1360,
        "y": 1540,
        "wires": []
    },
    {
        "id": "ffcfdf0ac04ea861",
        "type": "debug",
        "z": "3ddecfbaabd60ba5",
        "name": "debug 14",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1360,
        "y": 1500,
        "wires": []
    },
    {
        "id": "e00f65533336a5f7",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "function 8",
        "func": "// Fonction pour analyser les lignes du journal Gatling\nvar lines = msg.payload.split('\\n'); // Divise la charge utile en lignes individuelles et les stocke dans un tableau\nvar logs = []; // Initialise un tableau vide pour stocker les journaux analysés\n\nfor (var i = 0; i < lines.length; i++) { // Parcourt chaque ligne du journal\n    var line = lines[i].trim(); // Supprime les espaces inutiles autour de la ligne\n\n    if (line !== \"\") { // Vérifie si la ligne n'est pas vide\n        var parts = line.split('\\t'); // Divise la ligne en morceaux en utilisant la tabulation comme séparateur\n        var logObject = {}; // Initialise un objet vide pour stocker les informations du journal\n\n        // Définir des noms de clés significatives en fonction de votre format\n        logObject.type = parts[0]; // Type de journal\n        logObject.name = parts[1]; // Nom de la requête\n        logObject.start = parseInt(parts[3]); // Heure de début convertie en nombre entier\n        logObject.end = parseInt(parts[4]); // Heure de fin convertie en nombre entier\n        logObject.status = parts[5]; // Statut de la requête\n        logObject.error = parts[6]; // Message d'erreur en cas d'échec\n        logObject.user = parts[7]; // Nom de l'utilisateur\n\n        logs.push(logObject); // Ajoute l'objet de journal au tableau des journaux analysés\n    }\n}\n\nvar logEntries = Array.isArray(logs) ? logs : [];\n\n// Prépare les données pour le premier nœud (timeResponse)\nvar timeResponse = {\n    data: {\n        labels: logEntries.map(function (entry) {\n            if (entry.type === 'RUN') {\n                return 'Début de la Simulation'; // Label pour les opérations de type \"RUN\"\n            } else if (entry.type === 'REQUEST') {\n                // Calcul de la différence en millisecondes entre le début de la simulation et le début de la requête\n                var simulationStart = logEntries.find(function (item) {\n                    return item.type === 'RUN';\n                });\n                if (simulationStart) {\n                    var startTime = simulationStart.start;\n                    var requestTime = entry.start;\n                    var timeDiff = requestTime - startTime;\n\n                    // Si le temps de la simulation dépasse 1 minute\n                    if (timeDiff >= 60000) { // 60000 millisecondes équivalent à 1 minute\n                        var minutes = Math.floor(timeDiff / 60000);\n                        var seconds = ((timeDiff % 60000) / 1000).toFixed(0);\n                        return minutes + ' min ' + seconds + ' s';\n                    } else {\n                        return (timeDiff / 1000).toFixed(0) + ' s'; // Temps en secondes\n                    }\n                } else {\n                    return 'N/A'; // Si aucune opération de type \"RUN\" n'est trouvée\n                }\n            } else {\n                return ''; // Autres types d'opérations (USER, etc.) sans label\n            }\n        }),\n\n        datasets: [\n            {\n                label: \"Temps de Réponse\", // Légende de l'ensemble de données\n                borderColor: 'rgba(0, 128, 255, 1)', // Couleur de la ligne du graphique\n                fill: false, // Désactivez le remplissage sous la ligne\n                data: logEntries.map(function (entry) {\n                    if (entry.type === 'REQUEST') {\n                        // Calcul de la différence en millisecondes entre le début et la fin de la requête\n                        var requestStart = entry.start;\n                        var requestEnd = entry.end;\n                        var requestTime = requestEnd - requestStart;\n                        return requestTime;\n                    } else {\n                        return 0; // Valeurs pour les opérations de type \"RUN\" ou autres\n                    }\n                }),\n                pointRadius: 0, // Diamètre des points sur le graphique\n            }\n        ]\n    }\n};\n\n// Prépare les données pour le deuxième nœud (bySeconds)\nvar bySeconds = {\n    data: {\n        labels: timeResponse.data,\n        datasets: [\n            {\n                label: \"Requêtes Simultanées\", // Légende de l'ensemble de données\n                borderColor: 'rgba(0, 128, 255, 1)', // Couleur de la ligne du graphique\n                fill: false, // Désactivez le remplissage sous la ligne\n                data: logEntries.map(function (entry, index, array) {\n                    if (entry.type === 'REQUEST') {\n                        var currentTimestamp = entry.start;\n                        var concurrentRequests = 0;\n\n                        for (var i = 0; i < array.length; i++) {\n                            var otherEntry = array[i];\n                            if (otherEntry.type === 'REQUEST' &&\n                                otherEntry.start <= currentTimestamp &&\n                                (otherEntry.end === null || otherEntry.end >= currentTimestamp)) {\n                                concurrentRequests++;\n                            }\n                        }\n\n                        return concurrentRequests;\n                    } else {\n                        return 0; // Valeurs pour les autres types d'opérations\n                    }\n                }),\n                pointRadius: 0, // Diamètre des points sur le graphique\n            }\n        ]\n    }\n};\n\nmsg.payload = {\n    timeResponse: timeResponse,\n    bySeconds: bySeconds\n};\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 1520,
        "wires": [
            [
                "3090d939d971257e",
                "1a1358f228cfd1ff"
            ]
        ]
    },
    {
        "id": "3090d939d971257e",
        "type": "debug",
        "z": "3ddecfbaabd60ba5",
        "name": "debug 15",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1360,
        "y": 1580,
        "wires": []
    },
    {
        "id": "9ba0d599c2412587",
        "type": "inject",
        "z": "aa36cc7d7fa5cea5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"content\":[\"First paragraph\",\"Another paragraph, this time a little bit longer to make sure, this line will be divided into at least two lines\"]}",
        "payloadType": "json",
        "x": 250,
        "y": 220,
        "wires": [
            [
                "de5c8212fe2b174f"
            ]
        ]
    },
    {
        "id": "9feebdce6905e6f3",
        "type": "pdfmake",
        "z": "aa36cc7d7fa5cea5",
        "name": "",
        "outputType": "base64",
        "inputProperty": "payload",
        "options": "{}",
        "outputProperty": "payload",
        "x": 440,
        "y": 220,
        "wires": [
            [
                "904144c3f832e485"
            ]
        ]
    },
    {
        "id": "904144c3f832e485",
        "type": "file",
        "z": "aa36cc7d7fa5cea5",
        "name": "",
        "filename": "filePath",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "base64",
        "x": 660,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "de5c8212fe2b174f",
        "type": "function",
        "z": "aa36cc7d7fa5cea5",
        "name": "Ajoute le chemin du fichier ",
        "func": "var now = new Date();\nvar jour = (\"0\" + now.getDate()).slice(-2);\nvar mois = (\"0\" + (now.getMonth() + 1)).slice(-2);\n\nmsg.filePath = \"/home/NodeRed/\" + jour + mois + \".pdf\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 160,
        "wires": [
            [
                "9feebdce6905e6f3"
            ]
        ]
    },
    {
        "id": "0e5e9ecd9dbcb063",
        "type": "ui_text",
        "z": "6960c25d19217e0b",
        "d": true,
        "group": "a73ce2171360eee8",
        "order": 3,
        "width": 8,
        "height": 1,
        "name": "",
        "label": "MilliWatt : ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 480,
        "y": 300,
        "wires": []
    },
    {
        "id": "a1ee7a35777f3582",
        "type": "ui_chart",
        "z": "6960c25d19217e0b",
        "d": true,
        "name": "MilliWatt",
        "group": "a73ce2171360eee8",
        "order": 4,
        "width": 0,
        "height": 0,
        "label": "",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "5",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 480,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "72290260aa76dca6",
        "type": "ui_text",
        "z": "6960c25d19217e0b",
        "d": true,
        "group": "a73ce2171360eee8",
        "order": 2,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "MillliVolt",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 480,
        "y": 380,
        "wires": []
    },
    {
        "id": "66a1b9b1cdf1b642",
        "type": "ui_text",
        "z": "6960c25d19217e0b",
        "d": true,
        "group": "a73ce2171360eee8",
        "order": 1,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "MiliAmp",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 480,
        "y": 420,
        "wires": []
    },
    {
        "id": "8953f0c1325120df",
        "type": "ui_gauge",
        "z": "6960c25d19217e0b",
        "name": "",
        "group": "17f190382a6c603e",
        "order": 1,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "CPU",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 470,
        "y": 460,
        "wires": []
    },
    {
        "id": "fa5dbba69af0affe",
        "type": "ui_gauge",
        "z": "6960c25d19217e0b",
        "name": "",
        "group": "17f190382a6c603e",
        "order": 2,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "RAM",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 470,
        "y": 500,
        "wires": []
    },
    {
        "id": "3dc4f3421702f4e1",
        "type": "ui_gauge",
        "z": "6960c25d19217e0b",
        "name": "",
        "group": "17f190382a6c603e",
        "order": 3,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "Processus",
        "label": "",
        "format": "{{value}}",
        "min": 0,
        "max": "500",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 490,
        "y": 540,
        "wires": []
    },
    {
        "id": "e1d70366f1ff078c",
        "type": "ui_gauge",
        "z": "6960c25d19217e0b",
        "name": "",
        "group": "17f190382a6c603e",
        "order": 4,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "Temp",
        "label": "C",
        "format": "{{value}}",
        "min": 0,
        "max": "85",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "35",
        "seg2": "50",
        "diff": false,
        "className": "",
        "x": 470,
        "y": 580,
        "wires": []
    },
    {
        "id": "70d9292d7426c8c8",
        "type": "ui_gauge",
        "z": "6960c25d19217e0b",
        "name": "",
        "group": "12f36826dc9bd0e6",
        "order": 1,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "CPU",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 470,
        "y": 620,
        "wires": []
    },
    {
        "id": "020cd680db32751f",
        "type": "ui_gauge",
        "z": "6960c25d19217e0b",
        "name": "",
        "group": "12f36826dc9bd0e6",
        "order": 2,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "RAM",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 470,
        "y": 660,
        "wires": []
    },
    {
        "id": "25396b134f9854b5",
        "type": "ui_gauge",
        "z": "6960c25d19217e0b",
        "name": "",
        "group": "12f36826dc9bd0e6",
        "order": 3,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "Processus",
        "label": "",
        "format": "{{value}}",
        "min": 0,
        "max": "500",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 490,
        "y": 700,
        "wires": []
    },
    {
        "id": "37921000de8bd742",
        "type": "ui_gauge",
        "z": "6960c25d19217e0b",
        "name": "",
        "group": "12f36826dc9bd0e6",
        "order": 4,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "Température",
        "label": "C",
        "format": "{{value}}",
        "min": 0,
        "max": "85",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "35",
        "seg2": "50",
        "diff": false,
        "className": "",
        "x": 490,
        "y": 740,
        "wires": []
    },
    {
        "id": "c3bbb85042ce25f8",
        "type": "link in",
        "z": "6960c25d19217e0b",
        "name": "MilliWatt",
        "links": [
            "4aa27220845f2949"
        ],
        "x": 365,
        "y": 300,
        "wires": [
            [
                "0e5e9ecd9dbcb063",
                "a1ee7a35777f3582",
                "676a2b3ea9bdba7f"
            ]
        ]
    },
    {
        "id": "1f33dcf11541ad85",
        "type": "link in",
        "z": "6960c25d19217e0b",
        "name": "MilliVolt",
        "links": [
            "6bb685f3a7a0f0a5"
        ],
        "x": 365,
        "y": 380,
        "wires": [
            [
                "72290260aa76dca6"
            ]
        ]
    },
    {
        "id": "34a5075b24efbec0",
        "type": "link in",
        "z": "6960c25d19217e0b",
        "name": "MilliAmp",
        "links": [
            "7c257ee5dcd1af4a"
        ],
        "x": 365,
        "y": 420,
        "wires": [
            [
                "66a1b9b1cdf1b642"
            ]
        ]
    },
    {
        "id": "ed77962c337bf813",
        "type": "link in",
        "z": "6960c25d19217e0b",
        "name": "Volt_CPU",
        "links": [
            "df7d2b80bd59b4fb"
        ],
        "x": 365,
        "y": 460,
        "wires": [
            [
                "8953f0c1325120df"
            ]
        ]
    },
    {
        "id": "8220b140c1af5a4f",
        "type": "link in",
        "z": "6960c25d19217e0b",
        "name": "Volt_RAM",
        "links": [
            "ea92a59ad33b194e"
        ],
        "x": 365,
        "y": 500,
        "wires": [
            [
                "fa5dbba69af0affe"
            ]
        ]
    },
    {
        "id": "54842d7063dfb6b4",
        "type": "link in",
        "z": "6960c25d19217e0b",
        "name": "Volt_Process",
        "links": [
            "1855f7ba0c1cb43f"
        ],
        "x": 365,
        "y": 540,
        "wires": [
            [
                "3dc4f3421702f4e1"
            ]
        ]
    },
    {
        "id": "a958a8309bbd6b3d",
        "type": "link in",
        "z": "6960c25d19217e0b",
        "name": "Volt_Temp",
        "links": [
            "17d7264b5cdb9f27"
        ],
        "x": 365,
        "y": 580,
        "wires": [
            [
                "e1d70366f1ff078c"
            ]
        ]
    },
    {
        "id": "ade602e74c57c476",
        "type": "link in",
        "z": "6960c25d19217e0b",
        "name": "Nidus_CPU",
        "links": [
            "24edf858449e9c50"
        ],
        "x": 365,
        "y": 620,
        "wires": [
            [
                "70d9292d7426c8c8"
            ]
        ]
    },
    {
        "id": "83aeb0d37671184e",
        "type": "link in",
        "z": "6960c25d19217e0b",
        "name": "Nidus_RAM",
        "links": [
            "96bbc5b20c93f61c"
        ],
        "x": 365,
        "y": 660,
        "wires": [
            [
                "020cd680db32751f"
            ]
        ]
    },
    {
        "id": "08e95c3bbdfa9e15",
        "type": "link in",
        "z": "6960c25d19217e0b",
        "name": "Nidus_Process",
        "links": [
            "def3688a66231ed2"
        ],
        "x": 365,
        "y": 700,
        "wires": [
            [
                "25396b134f9854b5"
            ]
        ]
    },
    {
        "id": "7a9b5849173b180a",
        "type": "link in",
        "z": "6960c25d19217e0b",
        "name": "Nidus_Temp",
        "links": [
            "efd70bd2950f7343"
        ],
        "x": 365,
        "y": 740,
        "wires": [
            [
                "37921000de8bd742"
            ]
        ]
    },
    {
        "id": "676a2b3ea9bdba7f",
        "type": "ui_gauge",
        "z": "6960c25d19217e0b",
        "name": "",
        "group": "a73ce2171360eee8",
        "order": 1,
        "width": "0",
        "height": "0",
        "gtype": "gage",
        "title": "MilliWatt",
        "label": "MilliWatt",
        "format": "{{value}}",
        "min": 0,
        "max": "10000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 480,
        "y": 260,
        "wires": []
    },
    {
        "id": "dce34fa7.56d7d",
        "type": "function",
        "z": "3572c39984e6901e",
        "name": "Vertical Bar Chart",
        "func": "function getGetOrdinal(n) {\n    var s=[\"th\",\"st\",\"nd\",\"rd\"],\n    v=n%100;\n    return n+(s[(v-20)%10]||s[v]||s[0]);\n }\n\nvar dL = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\nvar dS = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\nvar mL = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nvar mS = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n\nlet now = new Date();\n\n// Create the chart object\nlet m = {\n    type: 'bar',\n    options: {\n        title: {\n            display:true,\n            text:'Vertical bar example'\n        },\n        legend: {\n            display:false\n        },\n        chartArea: {\n            backgroundColor: 'white'\n        },\n        plugins: {\n            datalabels: {\n                display:true,\n                backgroundColor:'whitesmoke',\n                borderRadius:1,\n                padding:1,\n                align: 'right',\n                anchor: function(context) {\n                    //node.send({debug:{dataindex:context.dataIndex}});\n                    if (context.dataIndex == context.dataset.data.length - 1) {\n                        return 'center';\n                    } else {\n                        return 'end';\n                    }\n                },\n                offset:8,\n                formatter:function(value) {\n                    return value > 0 ? value.toLocaleString() : '';\n                }\n            }\n        }\n    },\n    data: {\n        labels:[],\n        datasets: [\n            {\n                label:\"Sample data\",\n                backgroundColor:'rgba(57,97,184,0.8)',\n                data:[]\n            }\n        ]\n    }\n}\n\nlet l = Math.floor(Math.random()*50);\n\nfor (let i=0; i<10; i++) {\n    l = l + Math.floor(Math.random()*6)-3;\n    m.data.datasets[0].data.push(l);\n    var d = new Date();\n    d.setTime(now.getTime()-1000*60*60*24*(10-i));\n    m.data.labels.push(dL[d.getDay()]+\", \"+getGetOrdinal(d.getDate()));\n}\n\nmsg.payload = m;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 140,
        "wires": [
            [
                "12d010c4.fc8e3f"
            ]
        ]
    },
    {
        "id": "18d162d1.33e8ed",
        "type": "function",
        "z": "3572c39984e6901e",
        "name": "Telegram message",
        "func": "msg.payload = {chatId: \"xxxxx\", type:\"photo\", content:\"/home/pi/charts/test.png\", caption:\"Chart caption\"};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "68d737f4.5047f8",
        "type": "inject",
        "z": "3572c39984e6901e",
        "name": "Vertical Bar",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 140,
        "wires": [
            [
                "dce34fa7.56d7d"
            ]
        ]
    },
    {
        "id": "d658d601.f421e8",
        "type": "inject",
        "z": "3572c39984e6901e",
        "name": "Vertical Bar",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "e284de4.fc6a12",
        "type": "function",
        "z": "3572c39984e6901e",
        "name": "Line Chart",
        "func": "function getGetOrdinal(n) {\n    var s=[\"th\",\"st\",\"nd\",\"rd\"],\n    v=n%100;\n    return n+(s[(v-20)%10]||s[v]||s[0]);\n }\n\nvar dL = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\nvar dS = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\nvar mL = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nvar mS = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n\nlet now = new Date();\n\n// Create the chart object\nlet m = {\n    type: 'line',\n    options: {\n        title: {\n            display:true,\n            text:'Line chart example'\n        },\n        legend: {\n            display:false\n        },\n        chartArea: {\n            backgroundColor: 'white'\n        },\n        plugins: {\n            datalabels: {\n                display:true,\n                backgroundColor:'whitesmoke',\n                borderRadius:1,\n                padding:1,\n                align: 'right',\n                anchor: function(context) {\n                    //node.send({debug:{dataindex:context.dataIndex}});\n                    if (context.dataIndex == context.dataset.data.length - 1) {\n                        return 'center';\n                    } else {\n                        return 'end';\n                    }\n                },\n                offset:8,\n                formatter:function(value) {\n                    return value > 0 ? value.toLocaleString() : '';\n                }\n            }\n        }\n    },\n    data: {\n        labels:[],\n        datasets: [\n            {\n                label:\"Sample data\",\n                borderColor:'rgba(57,97,184,0.8)',\n                fill:false,\n                data:[]\n            }\n        ]\n    }\n}\n\nlet l = Math.floor(Math.random()*50);\n\nfor (let i=0; i<10; i++) {\n    l = l + Math.floor(Math.random()*6)-3;\n    m.data.datasets[0].data.push(l);\n    var d = new Date();\n    d.setTime(now.getTime()-1000*60*60*24*(10-i));\n    m.data.labels.push(dL[d.getDay()]+\", \"+getGetOrdinal(d.getDate()));\n}\n\nmsg.payload = m;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 300,
        "wires": [
            [
                "f7e11042.f96d9"
            ]
        ]
    },
    {
        "id": "f9531538.ab1988",
        "type": "inject",
        "z": "3572c39984e6901e",
        "name": "Line Chart",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 300,
        "wires": [
            [
                "e284de4.fc6a12"
            ]
        ]
    },
    {
        "id": "4bfe6190.6619c",
        "type": "function",
        "z": "3572c39984e6901e",
        "name": "Line Chart 3 series",
        "func": "function getGetOrdinal(n) {\n    var s=[\"th\",\"st\",\"nd\",\"rd\"],\n    v=n%100;\n    return n+(s[(v-20)%10]||s[v]||s[0]);\n }\n\nvar dL = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\nvar dS = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\nvar mL = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nvar mS = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n\nlet now = new Date();\n\n// Create the chart object\nlet m = {\n    type: 'line',\n    options: {\n        title: {\n            display:true,\n            text:'Line chart example'\n        },\n        legend: {\n            display:false\n        },\n        chartArea: {\n            backgroundColor: 'white'\n        },\n        plugins: {\n            datalabels: {\n                display:true,\n                backgroundColor:'whitesmoke',\n                borderRadius:1,\n                padding:1,\n                align: 'right',\n                anchor: function(context) {\n                    //node.send({debug:{dataindex:context.dataIndex}});\n                    if (context.dataIndex == context.dataset.data.length - 1) {\n                        return 'center';\n                    } else {\n                        return 'end';\n                    }\n                },\n                offset:8,\n                formatter:function(value) {\n                    return value > 0 ? value.toLocaleString() : '';\n                }\n            }\n        }\n    },\n    data: {\n        labels:[],\n        datasets: [\n            {\n                label:\"Series 1\",\n                borderColor:'rgba(184, 163, 57,0.8)',\n                backgroundColor:'rgba(184, 163, 57,0.1)',\n                fill:true,\n                data:[]\n            },\n            {\n                label:\"Series 2\",\n                borderColor:'rgba(57,97,184,0.8)',\n                fill:false,\n                data:[]\n            },\n            {\n                label:\"Series 3\",\n                borderColor:'rgba(184, 57, 93,0.8)',\n                fill:false,\n                data:[]\n            }\n        ]\n    }\n}\n\nlet l = Math.floor(Math.random()*50);\nlet k = l;\nlet j = l;\n\nfor (let i=0; i<10; i++) {\n    l = l + Math.floor(Math.random()*6)-3;\n    m.data.datasets[0].data.push(l);\n    k = k + Math.floor(Math.random()*6)-3;\n    m.data.datasets[1].data.push(k);\n    j = j + Math.floor(Math.random()*6)-3;\n    m.data.datasets[2].data.push(j);\n    var d = new Date();\n    d.setTime(now.getTime()-1000*60*60*24*(10-i));\n    m.data.labels.push(dL[d.getDay()]+\", \"+getGetOrdinal(d.getDate()));\n}\n\nmsg.payload = m;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 380,
        "wires": [
            [
                "c86b69d5.68d2d8"
            ]
        ]
    },
    {
        "id": "13c25f21.9a6aa1",
        "type": "inject",
        "z": "3572c39984e6901e",
        "name": "Line Chart",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 380,
        "wires": [
            [
                "4bfe6190.6619c"
            ]
        ]
    },
    {
        "id": "d1ca5ba9.da1338",
        "type": "function",
        "z": "3572c39984e6901e",
        "name": "Doughnut example",
        "func": "function getGetOrdinal(n) {\n    var s=[\"th\",\"st\",\"nd\",\"rd\"],\n    v=n%100;\n    return n+(s[(v-20)%10]||s[v]||s[0]);\n }\n\nvar dL = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\nvar dS = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\nvar mL = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nvar mS = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n\nlet now = new Date();\n\n// Create the chart object\nlet m = {\n    type: 'pie',\n    options: {\n        cutoutPercentage: 50,\n        title: {\n            display:true,\n            text:'Doughnut chart example'\n        },\n        legend: {\n            display:false\n        },\n        chartArea: {\n            backgroundColor: 'white'\n        },\n        plugins: {\n            datalabels: {\n                display:true,\n                backgroundColor:'whitesmoke',\n                borderRadius:1,\n                padding:1,\n                align: 'right',\n                anchor: function(context) {\n                    //node.send({debug:{dataindex:context.dataIndex}});\n                    if (context.dataIndex == context.dataset.data.length - 1) {\n                        return 'center';\n                    } else {\n                        return 'end';\n                    }\n                },\n                offset:8,\n                formatter:function(value, context) {\n                    return value > 0 ? context.chart.data.labels[context.dataIndex]+\": \"+value.toLocaleString() : '';\n                }\n            }\n        }\n    },\n    data: {\n        labels:[],\n        datasets: [\n            {\n                backgroundColor:[],\n                borderColor:\"white\",\n                borderWidth:2,\n                data:[]\n            }\n        ]\n    }\n}\n\n\n\nfor (let i=0; i<12; i++) {\n    m.data.datasets[0].data.push(Math.floor(Math.random()*50));\n    m.data.datasets[0].backgroundColor.push(\"hsl(\"+i*360/12+\",100%,50%)\");\n    m.data.labels.push(mL[i]);\n}\n\nmsg.payload = m;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 350,
        "y": 460,
        "wires": [
            [
                "4af5b6dc.e60d28"
            ]
        ]
    },
    {
        "id": "493ec7a4.b98fe8",
        "type": "inject",
        "z": "3572c39984e6901e",
        "name": "Line Chart",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 460,
        "wires": [
            [
                "d1ca5ba9.da1338"
            ]
        ]
    },
    {
        "id": "fac75646.ed0358",
        "type": "change",
        "z": "3572c39984e6901e",
        "name": "Set up the email",
        "rules": [
            {
                "t": "set",
                "p": "attachments",
                "pt": "msg",
                "to": "{}",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "attachments.content",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "attachments.filename",
                "pt": "msg",
                "to": "chart.jpg",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Chart example",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "This is the auto generated chart",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "to",
                "pt": "msg",
                "to": "<to_email_address>",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "12d010c4.fc8e3f",
        "type": "chart-image",
        "z": "3572c39984e6901e",
        "name": "",
        "width": 500,
        "height": "500",
        "x": 550,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "f7e11042.f96d9",
        "type": "chart-image",
        "z": "3572c39984e6901e",
        "name": "",
        "width": 500,
        "height": "500",
        "x": 550,
        "y": 300,
        "wires": [
            [
                "fac75646.ed0358"
            ]
        ]
    },
    {
        "id": "c86b69d5.68d2d8",
        "type": "chart-image",
        "z": "3572c39984e6901e",
        "name": "",
        "width": 500,
        "height": "500",
        "x": 550,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "4af5b6dc.e60d28",
        "type": "chart-image",
        "z": "3572c39984e6901e",
        "name": "",
        "width": 500,
        "height": "500",
        "x": 550,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "657bef1570c223b8",
        "type": "inject",
        "z": "d3f49513ee177da2",
        "name": "Init",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "change",
        "payload": "/home/NodeRed/json",
        "payloadType": "str",
        "x": 250,
        "y": 100,
        "wires": [
            [
                "b541a4c9d0c4c88b"
            ]
        ]
    },
    {
        "id": "c8b72a9645297de5",
        "type": "ui_button",
        "z": "d3f49513ee177da2",
        "name": "",
        "group": "9848c7d7e57dbdee",
        "order": 2,
        "width": 4,
        "height": 2,
        "passthru": true,
        "label": "Refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "refresh",
        "payload": "/home/NodeRed/json",
        "payloadType": "str",
        "topic": "change",
        "topicType": "str",
        "x": 260,
        "y": 180,
        "wires": [
            [
                "b541a4c9d0c4c88b"
            ]
        ]
    },
    {
        "id": "c567b2b02f6d2abf",
        "type": "ui_template",
        "z": "d3f49513ee177da2",
        "group": "9848c7d7e57dbdee",
        "name": "",
        "order": 1,
        "width": "20",
        "height": "8",
        "format": "<div ng-bind-html=\"msg.payload\" height=\"400\" style=\"height: 400px;\"><br/>\n</div>\n<style>\n/* Applique des styles aux liens */\na[href] {\ncolor: #d93347; /* Couleur du lien */\ntext-decoration: none; /* Pas de soulignement */\n}\n\n/* Applique des styles au survol des liens */\na[href]:hover {\ncolor: #cb0505; /* Couleur du lien au survol */\ntext-decoration: underline; /* Soulignement au survol */\n}\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1100,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "87a0a41c8c8d3310",
        "type": "template",
        "z": "d3f49513ee177da2",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<table width=\"100%\">\n    <tr><th>Nom de Fichier</th><th>Taille</th><th>Créer</th><th>Changer</th></tr>\n    {{#payload}}\n        <tr>\n            <td><a href=\"/download?filename={{name}}\" target=\"blank\">{{fname}}</a></td>\n            <td>{{stat.size}}</td>\n            <td>{{stat.created}}</td>\n            <td>{{stat.changed}}</td>\n        </tr>\n    {{/payload}}\n</table>\n",
        "output": "str",
        "x": 1080,
        "y": 180,
        "wires": [
            [
                "c567b2b02f6d2abf"
            ]
        ]
    },
    {
        "id": "e82612444b7ffefa",
        "type": "function",
        "z": "d3f49513ee177da2",
        "name": "Convert timestamps",
        "func": "// Fonction pour formater une date en fonction de la timezone de Zurich\nfunction formatToZurichTimezone(date) {\n    var options = {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n        timeZone: 'Europe/Zurich'\n    };\n    return new Intl.DateTimeFormat('fr-CH', options).format(date);\n}\n\n// Parcourir chaque élément dans le tableau \"payload\" du message\nfor (var i = 0; i < msg.payload.length; i++) {\n    // Convertir les propriétés de date/heure dans l'objet \"stat\" au format de Zurich\n    msg.payload[i].stat.created = formatToZurichTimezone(new Date(msg.payload[i].stat.created));\n    msg.payload[i].stat.changed = formatToZurichTimezone(new Date(msg.payload[i].stat.changed));\n    msg.payload[i].stat.accessed = formatToZurichTimezone(new Date(msg.payload[i].stat.accessed));\n    msg.payload[i].stat.statusChanged = formatToZurichTimezone(new Date(msg.payload[i].stat.statusChanged));\n\n    // Extraire le nom de fichier à partir de la propriété \"name\" et mettre à jour \"fname\"\n    msg.payload[i].fname = msg.payload[i].name.replace(/^.*(\\\\|\\/|\\:)/, '');\n}\n\nreturn msg; // Renvoyer le message modifié\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 180,
        "wires": [
            [
                "87a0a41c8c8d3310"
            ]
        ]
    },
    {
        "id": "ec2e1b03b620f090",
        "type": "http in",
        "z": "d3f49513ee177da2",
        "name": "",
        "url": "/download",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 340,
        "y": 240,
        "wires": [
            [
                "078656573a2256d9"
            ]
        ]
    },
    {
        "id": "5f87111e0da70820",
        "type": "http response",
        "z": "d3f49513ee177da2",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1130,
        "y": 240,
        "wires": []
    },
    {
        "id": "078656573a2256d9",
        "type": "function",
        "z": "d3f49513ee177da2",
        "name": "Get the file name",
        "func": "msg.filename = msg.req.query.filename;\nmsg.contentdisposition = \"attachment; filename=\\\"\" + msg.req.query.filename.replace(/^.*(\\\\|\\/|\\:)/, '') + \"\\\"\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 590,
        "y": 240,
        "wires": [
            [
                "cff08753494e0ec5"
            ]
        ],
        "outputLabels": [
            "Folder selected",
            "File selected"
        ]
    },
    {
        "id": "cff08753494e0ec5",
        "type": "file in",
        "z": "d3f49513ee177da2",
        "name": "",
        "filename": "",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 780,
        "y": 240,
        "wires": [
            [
                "c8c1de185f0a1ac0"
            ]
        ]
    },
    {
        "id": "c8c1de185f0a1ac0",
        "type": "change",
        "z": "d3f49513ee177da2",
        "name": "Set Headers",
        "rules": [
            {
                "t": "set",
                "p": "headers",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "headers.content-type",
                "pt": "msg",
                "to": "text/csv",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "headers.Content-Disposition",
                "pt": "msg",
                "to": "contentdisposition",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 950,
        "y": 240,
        "wires": [
            [
                "5f87111e0da70820"
            ]
        ]
    },
    {
        "id": "b541a4c9d0c4c88b",
        "type": "function",
        "z": "d3f49513ee177da2",
        "name": "Folder handling",
        "func": "// Récupérer la valeur de la variable \"folder\" depuis le contexte\nlet folder = context.get(\"folder\");\n// Si la variable \"folder\" n'est pas définie, l'initialiser avec \"/\"\nif (folder === undefined) {\n    folder = \"/\";\n    context.set(\"folder\", folder); // Enregistrer la valeur dans le contexte\n}\n\n// Récupérer la valeur de la variable \"hidden\" depuis le contexte\nlet hidden = context.get(\"hidden\");\n// Si la variable \"hidden\" n'est pas définie, l'initialiser avec \"false\"\nif (hidden === undefined) {\n    hidden = false;\n    context.set(\"hidden\", hidden); // Enregistrer la valeur dans le contexte\n}\n\n// Si le sujet du message est \"up\"\nif (msg.topic === \"up\") {\n    var the_arr = folder.split('/');\n    the_arr.pop(); // Supprimer le dernier élément du tableau\n    folder = the_arr.join('/'); // Rejoindre les éléments du tableau pour former le nouveau chemin\n    context.set(\"folder\", folder); // Enregistrer le nouveau chemin dans le contexte\n}\n\n// Si le sujet du message est \"change\"\nif (msg.topic === \"change\") {\n    folder = msg.payload; // Mettre à jour la valeur de \"folder\" avec le contenu du champ \"payload\"\n    context.set(\"folder\", folder); // Enregistrer la nouvelle valeur dans le contexte\n}\n\n// Si le sujet du message est \"hidden\"\nif (msg.topic === \"hidden\") {\n    hidden = msg.payload; // Mettre à jour la valeur de \"hidden\" avec le contenu du champ \"payload\"\n    context.set(\"hidden\", hidden); // Enregistrer la nouvelle valeur dans le contexte\n}\n\n// Construire un objet JSON contenant les valeurs actuelles de \"folder\" et \"hidden\"\nmsg.payload = { \"start\": folder, \"hidden\": hidden };\n\nreturn msg; // Renvoyer le message modifié\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 180,
        "wires": [
            [
                "5deb3f7a069e94db"
            ]
        ]
    },
    {
        "id": "5deb3f7a069e94db",
        "type": "fs-file-lister",
        "z": "d3f49513ee177da2",
        "name": "Files",
        "start": "/home/pi",
        "pattern": "*.*",
        "folders": "*",
        "hidden": false,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": true,
        "showWarnings": false,
        "x": 650,
        "y": 180,
        "wires": [
            [
                "e82612444b7ffefa"
            ]
        ]
    },
    {
        "id": "61ea260f9c0b6ef6",
        "type": "link in",
        "z": "d3f49513ee177da2",
        "name": "From_PDF",
        "links": [
            "a74b27989ec4408a"
        ],
        "x": 165,
        "y": 180,
        "wires": [
            [
                "c8b72a9645297de5"
            ]
        ]
    },
    {
        "id": "1ff3f3ba1cab43a1",
        "type": "ui_template",
        "z": "d3f49513ee177da2",
        "group": "9848c7d7e57dbdee",
        "name": "Upload Btn",
        "order": 8,
        "width": 5,
        "height": 2,
        "format": "<body>\n  <!-- Bouton pour déclencher l'importation des données -->\n  <button class=\"md-raised md-button md-ink-ripple\" onclick=\"importerDonnees()\">Télécharger</button>\n\n  <script>\n    // Conservez la portée originale\n    let restaureScope = scope;\n\n    // Fonction pour importer les données\n    function importerDonnees() {\n      // Créez un élément d'entrée de type fichier\n      let input = document.createElement('input');\n      input.type = 'file';\n      input.id = 'boutonRestaurer';\n\n      // Définissez l'événement onchange\n      input.onchange = _ => {\n        // Obtenez le nom du fichier choisi\n        let nomFichier = input.files[0].name;\n\n        // Vous pouvez utiliser cette méthode pour obtenir le fichier et effectuer les opérations respectives\n        let lecteurFichier = new FileReader();\n        lecteurFichier.readAsText(input.files[0]);\n\n        // Gérez la fin du chargement du fichier\n        lecteurFichier.onloadend = function(event){\n          // Envoyez les données lues et le nom du fichier à la portée originale\n          restaureScope.send({payload: event.target.result});\n        };\n      };\n\n      // Déclenchez le clic sur l'élément d'entrée de type fichier\n      input.click();\n    }\n  </script>\n</body>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 230,
        "y": 320,
        "wires": [
            [
                "288a58eab8860f59"
            ]
        ]
    },
    {
        "id": "288a58eab8860f59",
        "type": "debug",
        "z": "d3f49513ee177da2",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 320,
        "wires": []
    }
]