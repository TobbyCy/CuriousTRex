[
    {
        "id": "76efdb70933209ac",
        "type": "tab",
        "label": "Monittoring",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8b4c08f2a705dd79",
        "type": "tab",
        "label": "StressTest_V1.0",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "de0f28e0b2de7e99",
        "type": "tab",
        "label": "Accueil",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "aa36cc7d7fa5cea5",
        "type": "tab",
        "label": "PDF",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3572c39984e6901e",
        "type": "tab",
        "label": "GenerateChart",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d3f49513ee177da2",
        "type": "tab",
        "label": "JSON_V3.0",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a922dcbcf6a2e8c4",
        "type": "tab",
        "label": "GatlingTest_V2.0",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3ddecfbaabd60ba5",
        "type": "tab",
        "label": "Gatling_V3.0",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6960c25d19217e0b",
        "type": "tab",
        "label": "Gatling_V3.0_Monittoring",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2305a910a579de42",
        "type": "tab",
        "label": "JSON",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4efe9327eddfa7d6",
        "type": "tab",
        "label": "Curius T-Rex",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0893a32b929905a3",
        "type": "tab",
        "label": "Monittoring",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4e666803b8f3f742",
        "type": "subflow",
        "name": "MQTT Period",
        "info": "## Entrée :\nLe sous-flux accepte des messages MQTT entrants sur un sujet spécifié. Le sujet MQTT est défini par l'utilisateur lorsqu'il utilise le sous-flux :\n- msg.topic : Le topic MQTT à écouter.\n- msg.delay : La période durant lquelle on veut écouter le topic.\n## Sortie :\nAprès une période d'écoute définie par l'utilisateur (ou un délai par défaut), le sous-flux renvoie un message contenant les informations suivantes :\n- msg.payload : Un tableau (array) contenant toutes les valeurs numériques reçues sur le sujet MQTT pendant la période d'écoute.\n- msg.moyenne : La moyenne des valeurs numériques. Cette moyenne est calculée avec précision, arrondie à deux chiffres après la virgule, et au multiple de 0.05 le plus proche.\n- msg.topic : Le sujet MQTT d'origine auquel le sous-flux était abonné.\n\n## Utilisation :\n\n- Un utilisateur connecte le sous-flux à un nœud MQTT.\n- L'utilisateur configure le sujet MQTT auquel il souhaite s'abonner en fournissant un message avec la propriété msg.topic définie sur ce sujet.\n- Le sous-flux écoute les messages sur ce sujet pendant la durée spécifiée (ou un délai par défaut).\n- Pendant cette période, il recueille toutes les valeurs numériques reçues sur ce sujet.\n- À la fin de la période d'écoute, il calcule la moyenne de ces valeurs numériques.\n- Le résultat est renvoyé sous forme de message avec les propriétés décrites ci-dessus.\n\nAinsi, ce sous-flux permet aux utilisateurs de surveiller un sujet MQTT pendant un certain temps, de collecter des données numériques à partir de ce sujet, de calculer leur moyenne, et de renvoyer ces informations pour une utilisation ultérieure. Le sous-flux peut être configuré pour utiliser un délai par défaut ou pour accepter un délai spécifique fourni par l'utilisateur.",
        "category": "",
        "in": [
            {
                "x": 120,
                "y": 300,
                "wires": [
                    {
                        "id": "cb799b325f94ca56"
                    },
                    {
                        "id": "16c339249ebcf2fa"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 960,
                "y": 300,
                "wires": [
                    {
                        "id": "01d85364e4add5a9",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {
            "version": "1.0.0",
            "license": "GPL-3.0"
        },
        "color": "#D7D7A0",
        "icon": "node-red/status.svg"
    },
    {
        "id": "6161ee15cd9719be",
        "type": "junction",
        "z": "3ddecfbaabd60ba5",
        "x": 360,
        "y": 740,
        "wires": [
            [
                "2ac0d272272f951b",
                "843f23c9472dcd82",
                "71d1b35c803dd600"
            ]
        ]
    },
    {
        "id": "397d0c57cd843424",
        "type": "junction",
        "z": "d3f49513ee177da2",
        "x": 1320,
        "y": 1260,
        "wires": [
            [
                "d13823ca0a4f00a9"
            ]
        ]
    },
    {
        "id": "252db462cdba8e38",
        "type": "junction",
        "z": "d3f49513ee177da2",
        "x": 760,
        "y": 1380,
        "wires": [
            [
                "8bbddc96986f146e"
            ]
        ]
    },
    {
        "id": "fc5e94a4a331daa9",
        "type": "junction",
        "z": "3ddecfbaabd60ba5",
        "x": 2220,
        "y": 880,
        "wires": [
            [
                "b410e022596a76a9"
            ]
        ]
    },
    {
        "id": "e590adf1fa299f3d",
        "type": "junction",
        "z": "2305a910a579de42",
        "x": 1460,
        "y": 920,
        "wires": [
            [
                "368423fcbf86479f"
            ]
        ]
    },
    {
        "id": "467b6180ebc0d310",
        "type": "junction",
        "z": "2305a910a579de42",
        "x": 900,
        "y": 1040,
        "wires": [
            [
                "6b25be8c80cc93af"
            ]
        ]
    },
    {
        "id": "b9e3c634e5e5a408",
        "type": "junction",
        "z": "4efe9327eddfa7d6",
        "x": 280,
        "y": 820,
        "wires": [
            [
                "5b775a4a75097f5b",
                "fc9c5266878c89f0",
                "05d87e993be68e0d"
            ]
        ]
    },
    {
        "id": "260567470f14c245",
        "type": "junction",
        "z": "4efe9327eddfa7d6",
        "x": 2140,
        "y": 960,
        "wires": [
            [
                "27b232ada37fd3ee"
            ]
        ]
    },
    {
        "id": "e42b4edae71dedd4",
        "type": "ui_tab",
        "name": "Monittoring",
        "icon": "warning",
        "order": 8,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "0838c35150fe8e4b",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#a51d2d",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#a51d2d",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#a51d2d",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#db3347",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#a51d2d",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Curious T-Rex",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "bddfc83fd54ae92b",
        "type": "ui_group",
        "name": "Data",
        "tab": "e42b4edae71dedd4",
        "order": 1,
        "disp": true,
        "width": 22,
        "collapse": false,
        "className": ""
    },
    {
        "id": "173c4031bd3a25c0",
        "type": "ina-sensor-manager",
        "address": "0x40",
        "delay": "250",
        "ohms": "0.01",
        "customResistor": false
    },
    {
        "id": "837441be757b92ac",
        "type": "ui_group",
        "name": "Monitorring Volt",
        "tab": "e42b4edae71dedd4",
        "order": 2,
        "disp": true,
        "width": 22,
        "collapse": false,
        "className": ""
    },
    {
        "id": "12e50ad63920a21c",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "65e942c300ec1ce1",
        "type": "ui_group",
        "name": "Monittoring Nidus",
        "tab": "e42b4edae71dedd4",
        "order": 3,
        "disp": true,
        "width": 22,
        "collapse": false,
        "className": ""
    },
    {
        "id": "160e81fb.f1c86e",
        "type": "ui_group",
        "name": "Fichiers",
        "tab": "b63d1f91.68095",
        "order": 1,
        "disp": false,
        "width": "18",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b63d1f91.68095",
        "type": "ui_tab",
        "name": "StressTest_V1.0",
        "icon": "error_outline",
        "order": 7,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "ae336b538b957769",
        "type": "mqtt-plus-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": ""
    },
    {
        "id": "1bfe03ef2a50fdb4",
        "type": "ui_tab",
        "name": "Gatling_PoC_V2.0",
        "icon": "error",
        "order": 6,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "0fa13b0866bdba70",
        "type": "ui_link",
        "name": "Git",
        "link": "https://mylos.cifom.ch/gitlab/ToblerC/banc-de-mesures-de-la-consommation-electrique",
        "icon": "github-circle",
        "target": "newtab",
        "order": 9
    },
    {
        "id": "7a02dc45cdd22958",
        "type": "ui_group",
        "name": "Fichier",
        "tab": "1bfe03ef2a50fdb4",
        "order": 1,
        "disp": false,
        "width": "18",
        "collapse": false,
        "className": ""
    },
    {
        "id": "de079e90a5b6fc2a",
        "type": "ui_tab",
        "name": "Curious T-Rex_V3.0",
        "icon": "dashboard",
        "order": 4,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "7db53a0c4211bca9",
        "type": "ui_group",
        "name": "Fichier",
        "tab": "de079e90a5b6fc2a",
        "order": 1,
        "disp": true,
        "width": "20",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a73ce2171360eee8",
        "type": "ui_group",
        "name": "INA219",
        "tab": "de079e90a5b6fc2a",
        "order": 2,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "17f190382a6c603e",
        "type": "ui_group",
        "name": "Volt",
        "tab": "de079e90a5b6fc2a",
        "order": 3,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "12f36826dc9bd0e6",
        "type": "ui_group",
        "name": "Nidus",
        "tab": "de079e90a5b6fc2a",
        "order": 4,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e4a2f7f90a33741d",
        "type": "ui_tab",
        "name": "JSON_V3.0",
        "icon": "dashboard",
        "order": 5,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "9848c7d7e57dbdee",
        "type": "ui_group",
        "name": "JSON",
        "tab": "e4a2f7f90a33741d",
        "order": 1,
        "disp": true,
        "width": "20",
        "collapse": false,
        "className": ""
    },
    {
        "id": "c59ed15047bd94ac",
        "type": "ui_spacer",
        "z": "3ddecfbaabd60ba5",
        "name": "spacer",
        "group": "7db53a0c4211bca9",
        "order": 7,
        "width": 6,
        "height": 1
    },
    {
        "id": "e9fd0e02469df165",
        "type": "ui_spacer",
        "z": "3ddecfbaabd60ba5",
        "name": "spacer",
        "group": "7db53a0c4211bca9",
        "order": 9,
        "width": 6,
        "height": 1
    },
    {
        "id": "8f4be124b6685709",
        "type": "ui_tab",
        "name": "Accueil",
        "icon": "home",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "4e715bdea006e7fa",
        "type": "ui_group",
        "name": "Accueil",
        "tab": "8f4be124b6685709",
        "order": 1,
        "disp": false,
        "width": "28",
        "collapse": false,
        "className": ""
    },
    {
        "id": "898f3c8ac5b2e8a2",
        "type": "ui_spacer",
        "z": "de0f28e0b2de7e99",
        "name": "spacer",
        "group": "4e715bdea006e7fa",
        "order": 3,
        "width": 2,
        "height": 1
    },
    {
        "id": "c6bfe617fc107c58",
        "type": "ui_spacer",
        "z": "de0f28e0b2de7e99",
        "name": "spacer",
        "group": "4e715bdea006e7fa",
        "order": 5,
        "width": 2,
        "height": 1
    },
    {
        "id": "0bccb0eb1676af19",
        "type": "ui_spacer",
        "z": "de0f28e0b2de7e99",
        "name": "spacer",
        "group": "4e715bdea006e7fa",
        "order": 7,
        "width": 2,
        "height": 1
    },
    {
        "id": "a7bbd613dda29eac",
        "type": "ui_spacer",
        "z": "de0f28e0b2de7e99",
        "name": "spacer",
        "group": "4e715bdea006e7fa",
        "order": 8,
        "width": 2,
        "height": 1
    },
    {
        "id": "7fb5e4b644df4e2c",
        "type": "ui_spacer",
        "z": "a922dcbcf6a2e8c4",
        "name": "spacer",
        "group": "7a02dc45cdd22958",
        "order": 10,
        "width": 7,
        "height": 1
    },
    {
        "id": "6c439c68687ce984",
        "type": "ui_spacer",
        "z": "a922dcbcf6a2e8c4",
        "name": "spacer",
        "group": "7a02dc45cdd22958",
        "order": 12,
        "width": 7,
        "height": 1
    },
    {
        "id": "1241c03197420b4f",
        "type": "ui_spacer",
        "z": "a922dcbcf6a2e8c4",
        "name": "spacer",
        "group": "7a02dc45cdd22958",
        "order": 13,
        "width": 7,
        "height": 1
    },
    {
        "id": "237bcf2cda4fa38f",
        "type": "ui_spacer",
        "z": "a922dcbcf6a2e8c4",
        "name": "spacer",
        "group": "7a02dc45cdd22958",
        "order": 14,
        "width": 7,
        "height": 1
    },
    {
        "id": "7ffe48729859f226",
        "type": "ui_tab",
        "name": "Curious T-Rex",
        "icon": "timeline",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "cd2de630deb47aa1",
        "type": "ui_tab",
        "name": "JSON",
        "icon": "mi-javascript",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "98aec2bd3951d32a",
        "type": "ui_group",
        "name": "Monitoring",
        "tab": "7ffe48729859f226",
        "order": 1,
        "disp": true,
        "width": "20",
        "collapse": false,
        "className": ""
    },
    {
        "id": "da05c7d57d590aff",
        "type": "ui_group",
        "name": "INA219",
        "tab": "7ffe48729859f226",
        "order": 2,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "52d9f1a33ad4f3ad",
        "type": "ui_group",
        "name": "Volt",
        "tab": "7ffe48729859f226",
        "order": 3,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "c2cf8a722cad3139",
        "type": "ui_group",
        "name": "Nidus",
        "tab": "7ffe48729859f226",
        "order": 4,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "9b722c2ddc235cfc",
        "type": "ui_group",
        "name": "JSON",
        "tab": "cd2de630deb47aa1",
        "order": 1,
        "disp": false,
        "width": "20",
        "collapse": false,
        "className": ""
    },
    {
        "id": "6e010e99ce8b6576",
        "type": "ui_spacer",
        "z": "4efe9327eddfa7d6",
        "name": "spacer",
        "group": "98aec2bd3951d32a",
        "order": 7,
        "width": "6",
        "height": "1"
    },
    {
        "id": "03b9446cf6117382",
        "type": "ui_spacer",
        "z": "4efe9327eddfa7d6",
        "name": "spacer",
        "group": "98aec2bd3951d32a",
        "order": 9,
        "width": "6",
        "height": "1"
    },
    {
        "id": "943ce04091291544",
        "type": "delay",
        "z": "4e666803b8f3f742",
        "name": "",
        "pauseType": "delayv",
        "timeout": "15",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 280,
        "y": 180,
        "wires": [
            [
                "cb799b325f94ca56",
                "347c2af536033cee"
            ]
        ]
    },
    {
        "id": "cb799b325f94ca56",
        "type": "mqtt-plus in",
        "z": "4e666803b8f3f742",
        "name": "Volt/CPU",
        "topic": "/",
        "qos": "2",
        "broker": "ae336b538b957769",
        "x": 460,
        "y": 300,
        "wires": [
            [
                "0160ad3d392208a8"
            ],
            []
        ]
    },
    {
        "id": "0160ad3d392208a8",
        "type": "join",
        "z": "4e666803b8f3f742",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 630,
        "y": 300,
        "wires": [
            [
                "01d85364e4add5a9"
            ]
        ]
    },
    {
        "id": "01d85364e4add5a9",
        "type": "function",
        "z": "4e666803b8f3f742",
        "name": "Rename",
        "func": "// Définir le sujet du message\nmsg.topic = msg._topic\n\n// Vérifier si le tableau payload existe et n'est pas vide\nif (msg.payload && Array.isArray(msg.payload) && msg.payload.length > 0) {\n    // Convertir les valeurs en chaînes de caractères en nombres entiers\n    var numericValues = msg.payload.map(function (value) {\n        return parseInt(value, 10); // 10 indique la base décimale\n    }).filter(function (value) {\n        return !isNaN(value); // Filtrer les valeurs non numériques\n    });\n\n    // Vérifier si des valeurs numériques ont été trouvées\n    if (numericValues.length > 0) {\n        // Calculer la somme des valeurs numériques dans le tableau\n        var sum = numericValues.reduce(function (acc, value) {\n            return acc + value;\n        }, 0);\n\n        // Calculer la moyenne en divisant la somme par le nombre d'éléments\n        var moyenne = sum / numericValues.length;\n\n        // Arrondir la moyenne à deux chiffres après la virgule et au multiple de 0.05 le plus proche\n        moyenne = Math.round(moyenne * 20) / 20;\n\n        // Ajouter la moyenne au message\n        msg.moyenne = moyenne.toFixed(2);\n    } else {\n        // Si aucune valeur numérique n'a été trouvée, définir la moyenne à 0\n        msg.moyenne = \"0.00\";\n    }\n} else {\n    // Si le tableau est vide ou n'existe pas, définir la moyenne à 0\n    msg.moyenne.volt.benchmark.cpu = \"0.00\";\n}\n\n// Renvoyer le message modifié\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "16c339249ebcf2fa",
        "type": "change",
        "z": "4e666803b8f3f742",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "/",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 270,
        "y": 220,
        "wires": [
            [
                "943ce04091291544"
            ]
        ]
    },
    {
        "id": "347c2af536033cee",
        "type": "change",
        "z": "4e666803b8f3f742",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "complete",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 180,
        "wires": [
            [
                "0160ad3d392208a8"
            ]
        ]
    },
    {
        "id": "3f2698910c317457",
        "type": "ui_text",
        "z": "76efdb70933209ac",
        "group": "bddfc83fd54ae92b",
        "order": 2,
        "width": 8,
        "height": 2,
        "name": "",
        "label": "MillliVolt",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 680,
        "y": 280,
        "wires": []
    },
    {
        "id": "e8334464abeb8df9",
        "type": "ui_text",
        "z": "76efdb70933209ac",
        "group": "bddfc83fd54ae92b",
        "order": 1,
        "width": 7,
        "height": 2,
        "name": "",
        "label": "MiliAmp",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 680,
        "y": 360,
        "wires": []
    },
    {
        "id": "0f040225cb054e9d",
        "type": "ina-sensor",
        "z": "76efdb70933209ac",
        "name": "",
        "handle": "173c4031bd3a25c0",
        "x": 170,
        "y": 360,
        "wires": [
            [
                "06aa7125c7bfbcd7",
                "68b1e6e95bce2ef2"
            ],
            [
                "06aa7125c7bfbcd7",
                "587821a4c81b1185"
            ]
        ]
    },
    {
        "id": "b8288639de4d40ea",
        "type": "function",
        "z": "76efdb70933209ac",
        "name": "Watt",
        "func": "// Récupérer les valeurs de courant (mA) et de tension (V) depuis les propriétés msg.payload\nvar current_mA = msg.payload.miliamps;\nvar voltage_V = msg.payload.voltage;\n\n// Calculer la puissance en watts (W)\nvar power_W = (current_mA / 1000) * voltage_V;  // Convertir le courant en ampères\n\n// Vérifier si la tension est négative\nif (voltage_V < 0.5) {\n    // Si la tension est négative, ne rien faire et retourner le message inchangé\n    return null;\n}\n\n// Modifier les valeurs de sortie sans affecter les entrées\nmsg.payload = (power_W * 1000).toFixed(2);\nmsg.current_mA = current_mA;\nmsg.voltage_mV = (voltage_V * 1000).toFixed(2);\nmsg.topic = \"Power\";  // Modifiez le topic en conséquence pour refléter l'unité de mesure\n// Renvoyer le message modifié\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 220,
        "wires": [
            [
                "c2f42c42be3ffdd2",
                "cd1f740c61e8aa04",
                "4aa27220845f2949"
            ]
        ]
    },
    {
        "id": "06aa7125c7bfbcd7",
        "type": "join",
        "z": "76efdb70933209ac",
        "name": "Join_Amp_Volt",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 460,
        "y": 220,
        "wires": [
            [
                "b8288639de4d40ea"
            ]
        ]
    },
    {
        "id": "c2f42c42be3ffdd2",
        "type": "ui_text",
        "z": "76efdb70933209ac",
        "group": "bddfc83fd54ae92b",
        "order": 3,
        "width": 7,
        "height": 2,
        "name": "",
        "label": "MilliWatt",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 840,
        "y": 160,
        "wires": []
    },
    {
        "id": "cd1f740c61e8aa04",
        "type": "ui_chart",
        "z": "76efdb70933209ac",
        "name": "",
        "group": "bddfc83fd54ae92b",
        "order": 4,
        "width": 0,
        "height": 0,
        "label": "MilliWatt",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "5",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 840,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "587821a4c81b1185",
        "type": "function",
        "z": "76efdb70933209ac",
        "name": "Drop_Negatif",
        "func": "if(msg.payload < 0){\n    return null;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 360,
        "wires": [
            [
                "e8334464abeb8df9",
                "7c257ee5dcd1af4a"
            ]
        ]
    },
    {
        "id": "68b1e6e95bce2ef2",
        "type": "function",
        "z": "76efdb70933209ac",
        "name": "Drop_Negatif",
        "func": "var voltage_V = msg.payload;\n// Modifier les valeurs de sortie sans affecter les entrées\nmsg.payload = (voltage_V * 1000).toFixed(2);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 280,
        "wires": [
            [
                "3f2698910c317457",
                "6bb685f3a7a0f0a5"
            ]
        ]
    },
    {
        "id": "b688f544fed38038",
        "type": "ui_gauge",
        "z": "76efdb70933209ac",
        "name": "",
        "group": "837441be757b92ac",
        "order": 1,
        "width": 11,
        "height": 8,
        "gtype": "gage",
        "title": "CPU",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 590,
        "y": 500,
        "wires": []
    },
    {
        "id": "e4b8fa072df9d2fc",
        "type": "ui_gauge",
        "z": "76efdb70933209ac",
        "name": "",
        "group": "837441be757b92ac",
        "order": 2,
        "width": 11,
        "height": 8,
        "gtype": "gage",
        "title": "RAM",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 590,
        "y": 580,
        "wires": []
    },
    {
        "id": "95ac268a855d0a7a",
        "type": "ui_gauge",
        "z": "76efdb70933209ac",
        "name": "",
        "group": "837441be757b92ac",
        "order": 3,
        "width": 11,
        "height": 8,
        "gtype": "gage",
        "title": "Processus",
        "label": "",
        "format": "{{value}}",
        "min": 0,
        "max": "500",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 610,
        "y": 660,
        "wires": []
    },
    {
        "id": "b69a0aed1b6608d9",
        "type": "mqtt in",
        "z": "76efdb70933209ac",
        "name": "",
        "topic": "volt/benchmark/cpu",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "12e50ad63920a21c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 350,
        "y": 500,
        "wires": [
            [
                "b688f544fed38038",
                "df7d2b80bd59b4fb"
            ]
        ]
    },
    {
        "id": "5dddcb64761b7d57",
        "type": "mqtt in",
        "z": "76efdb70933209ac",
        "name": "",
        "topic": "volt/benchmark/ram",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "12e50ad63920a21c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 350,
        "y": 580,
        "wires": [
            [
                "e4b8fa072df9d2fc",
                "ea92a59ad33b194e"
            ]
        ]
    },
    {
        "id": "7ab2d9f0ef997aac",
        "type": "mqtt in",
        "z": "76efdb70933209ac",
        "name": "",
        "topic": "volt/benchmark/processes",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "12e50ad63920a21c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 370,
        "y": 660,
        "wires": [
            [
                "95ac268a855d0a7a",
                "1855f7ba0c1cb43f"
            ]
        ]
    },
    {
        "id": "5e01dde5ab04cf9f",
        "type": "ui_gauge",
        "z": "76efdb70933209ac",
        "name": "",
        "group": "65e942c300ec1ce1",
        "order": 1,
        "width": 11,
        "height": 8,
        "gtype": "gage",
        "title": "CPU",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 590,
        "y": 820,
        "wires": []
    },
    {
        "id": "2f77fbb6f1c9c8b2",
        "type": "ui_gauge",
        "z": "76efdb70933209ac",
        "name": "",
        "group": "65e942c300ec1ce1",
        "order": 2,
        "width": 11,
        "height": 8,
        "gtype": "gage",
        "title": "RAM",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 590,
        "y": 900,
        "wires": []
    },
    {
        "id": "78164e0fc6561bb0",
        "type": "ui_gauge",
        "z": "76efdb70933209ac",
        "name": "",
        "group": "65e942c300ec1ce1",
        "order": 3,
        "width": 11,
        "height": 8,
        "gtype": "gage",
        "title": "Processus",
        "label": "",
        "format": "{{value}}",
        "min": 0,
        "max": "500",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 610,
        "y": 980,
        "wires": []
    },
    {
        "id": "d36d783723cacbde",
        "type": "mqtt in",
        "z": "76efdb70933209ac",
        "name": "",
        "topic": "nidus/benchmark/cpu",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "12e50ad63920a21c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 360,
        "y": 820,
        "wires": [
            [
                "5e01dde5ab04cf9f",
                "24edf858449e9c50"
            ]
        ]
    },
    {
        "id": "4d9488b6e1088231",
        "type": "mqtt in",
        "z": "76efdb70933209ac",
        "name": "",
        "topic": "nidus/benchmark/ram",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "12e50ad63920a21c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 360,
        "y": 900,
        "wires": [
            [
                "2f77fbb6f1c9c8b2",
                "96bbc5b20c93f61c"
            ]
        ]
    },
    {
        "id": "cfd7ef673c828f97",
        "type": "mqtt in",
        "z": "76efdb70933209ac",
        "name": "",
        "topic": "nidus/benchmark/processes",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "12e50ad63920a21c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 400,
        "y": 980,
        "wires": [
            [
                "78164e0fc6561bb0",
                "def3688a66231ed2"
            ]
        ]
    },
    {
        "id": "af5a5bdbf9e320eb",
        "type": "ui_gauge",
        "z": "76efdb70933209ac",
        "name": "",
        "group": "837441be757b92ac",
        "order": 4,
        "width": 11,
        "height": 8,
        "gtype": "gage",
        "title": "Temp",
        "label": "C",
        "format": "{{value}}",
        "min": 0,
        "max": "85",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "35",
        "seg2": "50",
        "diff": false,
        "className": "",
        "x": 590,
        "y": 740,
        "wires": []
    },
    {
        "id": "7186fbb338a8160c",
        "type": "mqtt in",
        "z": "76efdb70933209ac",
        "name": "",
        "topic": "volt/benchmark/temp",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "12e50ad63920a21c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 350,
        "y": 740,
        "wires": [
            [
                "af5a5bdbf9e320eb",
                "17d7264b5cdb9f27"
            ]
        ]
    },
    {
        "id": "b5e64e3d32ee1834",
        "type": "ui_gauge",
        "z": "76efdb70933209ac",
        "name": "",
        "group": "65e942c300ec1ce1",
        "order": 4,
        "width": 11,
        "height": 8,
        "gtype": "gage",
        "title": "Température",
        "label": "C",
        "format": "{{value}}",
        "min": 0,
        "max": "85",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "35",
        "seg2": "50",
        "diff": false,
        "className": "",
        "x": 610,
        "y": 1060,
        "wires": []
    },
    {
        "id": "2cf2a295ee7de67c",
        "type": "mqtt in",
        "z": "76efdb70933209ac",
        "name": "",
        "topic": "nidus/benchmark/temp",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "12e50ad63920a21c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 380,
        "y": 1060,
        "wires": [
            [
                "b5e64e3d32ee1834",
                "efd70bd2950f7343"
            ]
        ]
    },
    {
        "id": "4aa27220845f2949",
        "type": "link out",
        "z": "76efdb70933209ac",
        "name": "MilliWatt",
        "mode": "link",
        "links": [
            "c3bbb85042ce25f8",
            "0753dac0a8903546"
        ],
        "x": 795,
        "y": 120,
        "wires": []
    },
    {
        "id": "6bb685f3a7a0f0a5",
        "type": "link out",
        "z": "76efdb70933209ac",
        "name": "MilliVolt",
        "mode": "link",
        "links": [
            "1f33dcf11541ad85",
            "bb044312abc509ac"
        ],
        "x": 635,
        "y": 320,
        "wires": []
    },
    {
        "id": "7c257ee5dcd1af4a",
        "type": "link out",
        "z": "76efdb70933209ac",
        "name": "MilliAmp",
        "mode": "link",
        "links": [
            "34a5075b24efbec0",
            "b677ac2767276310"
        ],
        "x": 635,
        "y": 400,
        "wires": []
    },
    {
        "id": "df7d2b80bd59b4fb",
        "type": "link out",
        "z": "76efdb70933209ac",
        "name": "Volt_CPU",
        "mode": "link",
        "links": [
            "ed77962c337bf813",
            "d34aed594018f17f"
        ],
        "x": 555,
        "y": 460,
        "wires": []
    },
    {
        "id": "ea92a59ad33b194e",
        "type": "link out",
        "z": "76efdb70933209ac",
        "name": "Volt_RAM",
        "mode": "link",
        "links": [
            "8220b140c1af5a4f",
            "43ed139a40181e8c"
        ],
        "x": 555,
        "y": 540,
        "wires": []
    },
    {
        "id": "1855f7ba0c1cb43f",
        "type": "link out",
        "z": "76efdb70933209ac",
        "name": "Volt_Processus",
        "mode": "link",
        "links": [
            "54842d7063dfb6b4",
            "32629afad03cee77"
        ],
        "x": 555,
        "y": 620,
        "wires": []
    },
    {
        "id": "17d7264b5cdb9f27",
        "type": "link out",
        "z": "76efdb70933209ac",
        "name": "Volt_Temp",
        "mode": "link",
        "links": [
            "a958a8309bbd6b3d",
            "8a29b252bca2b018"
        ],
        "x": 555,
        "y": 700,
        "wires": []
    },
    {
        "id": "24edf858449e9c50",
        "type": "link out",
        "z": "76efdb70933209ac",
        "name": "Nidus_CPU",
        "mode": "link",
        "links": [
            "ade602e74c57c476",
            "ea9f275bdfb1e500"
        ],
        "x": 555,
        "y": 780,
        "wires": []
    },
    {
        "id": "96bbc5b20c93f61c",
        "type": "link out",
        "z": "76efdb70933209ac",
        "name": "Nidus_RAM",
        "mode": "link",
        "links": [
            "83aeb0d37671184e",
            "dfa1039320e584b9"
        ],
        "x": 555,
        "y": 860,
        "wires": []
    },
    {
        "id": "def3688a66231ed2",
        "type": "link out",
        "z": "76efdb70933209ac",
        "name": "Nidus_Process",
        "mode": "link",
        "links": [
            "08e95c3bbdfa9e15",
            "063b19bd2e12b7c2"
        ],
        "x": 555,
        "y": 940,
        "wires": []
    },
    {
        "id": "efd70bd2950f7343",
        "type": "link out",
        "z": "76efdb70933209ac",
        "name": "Nidus_Temp",
        "mode": "link",
        "links": [
            "7a9b5849173b180a",
            "efd7370b2d98bfa4"
        ],
        "x": 555,
        "y": 1020,
        "wires": []
    },
    {
        "id": "4fa73dd9.83cca4",
        "type": "comment",
        "z": "8b4c08f2a705dd79",
        "name": "File Browser",
        "info": "1) Update the default folder in the Init node\n2) Update the default folder in the Reset node as well\n3) You can duplicate the Reset nodes and use them as saved shortcuts\n4) Check the Convert Timestamps function node if you want to see your dates in a different format. I just used the Javascript toISOString format.\n5) The Graph button can read any CSV file which have any number of values, but the first column always contains a timestamp column with javascript timestamp of the data point.",
        "x": 350,
        "y": 120,
        "wires": []
    },
    {
        "id": "d185a45.2327a58",
        "type": "inject",
        "z": "8b4c08f2a705dd79",
        "name": "Init",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "change",
        "payload": "/home/NodeRed/pdf",
        "payloadType": "str",
        "x": 350,
        "y": 280,
        "wires": [
            [
                "3d4e5e51.bdf952"
            ]
        ]
    },
    {
        "id": "a715f7a4.a398a8",
        "type": "ui_button",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "group": "160e81fb.f1c86e",
        "order": 4,
        "width": 4,
        "height": 2,
        "passthru": true,
        "label": "Refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "refresh",
        "payload": "",
        "payloadType": "str",
        "topic": "refresh",
        "topicType": "str",
        "x": 360,
        "y": 320,
        "wires": [
            [
                "3d4e5e51.bdf952"
            ]
        ]
    },
    {
        "id": "638728aa.cd0b08",
        "type": "ui_template",
        "z": "8b4c08f2a705dd79",
        "group": "160e81fb.f1c86e",
        "name": "",
        "order": 1,
        "width": 18,
        "height": "7",
        "format": "<div ng-bind-html=\"msg.payload\" height=\"400\" style=\"height: 400px;\"><br/>\n</div>\n<style>\n/* Applique des styles aux liens */\na[href] {\ncolor: #d93347; /* Couleur du lien */\ntext-decoration: none; /* Pas de soulignement */\n}\n\n/* Applique des styles au survol des liens */\na[href]:hover {\ncolor: #cb0505; /* Couleur du lien au survol */\ntext-decoration: underline; /* Soulignement au survol */\n}\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1340,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "9d27e846.b31db8",
        "type": "template",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<table width=\"100%\">\n    <tr><th>Nom de Fichier</th><th>Taille</th><th>Créer</th><th>Changer</th></tr>\n    {{#payload}}\n        <tr>\n            <td><a href=\"/download?filename={{name}}\" target=\"blank\">{{fname}}</a></td>\n            <td>{{stat.size}}</td>\n            <td>{{stat.created}}</td>\n            <td>{{stat.changed}}</td>\n        </tr>\n    {{/payload}}\n</table>\n",
        "output": "str",
        "x": 1180,
        "y": 320,
        "wires": [
            [
                "638728aa.cd0b08"
            ]
        ]
    },
    {
        "id": "3e094f82.15d6e",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "Convert timestamps",
        "func": "// Parcourir chaque élément dans le tableau \"payload\" du message\nfor (var i = 0; i < msg.payload.length; i++) {\n    // Formater et mettre à jour les propriétés de date/heure dans l'objet \"stat\"\n    msg.payload[i].stat.created = msg.payload[i].stat.created.toISOString().slice(0, 19).replace('T', ' ');\n    msg.payload[i].stat.changed = msg.payload[i].stat.changed.toISOString().slice(0, 19).replace('T', ' ');\n    msg.payload[i].stat.accessed = msg.payload[i].stat.accessed.toISOString().slice(0, 19).replace('T', ' ');\n    msg.payload[i].stat.statusChanged = msg.payload[i].stat.statusChanged.toISOString().slice(0, 19).replace('T', ' ');\n\n    // Extraire le nom de fichier à partir de la propriété \"name\" et mettre à jour \"fname\"\n    msg.payload[i].fname = msg.payload[i].name.replace(/^.*(\\\\|\\/|\\:)/, '');\n}\n\nreturn msg; // Renvoyer le message modifié\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 320,
        "wires": [
            [
                "9d27e846.b31db8"
            ]
        ]
    },
    {
        "id": "aa8c482.93734b8",
        "type": "http in",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "url": "/download",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 440,
        "y": 380,
        "wires": [
            [
                "d969ba04.e24028"
            ]
        ]
    },
    {
        "id": "d19cc7d8.646328",
        "type": "http response",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1230,
        "y": 380,
        "wires": []
    },
    {
        "id": "d969ba04.e24028",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "Get the file name",
        "func": "msg.filename = msg.req.query.filename;\nmsg.contentdisposition = \"attachment; filename=\\\"\" + msg.req.query.filename.replace(/^.*(\\\\|\\/|\\:)/, '') + \"\\\"\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 690,
        "y": 380,
        "wires": [
            [
                "e92381c3.c4cd2"
            ]
        ],
        "outputLabels": [
            "Folder selected",
            "File selected"
        ]
    },
    {
        "id": "e92381c3.c4cd2",
        "type": "file in",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "filename": "",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 880,
        "y": 380,
        "wires": [
            [
                "99ff4953.d0d5c8"
            ]
        ]
    },
    {
        "id": "99ff4953.d0d5c8",
        "type": "change",
        "z": "8b4c08f2a705dd79",
        "name": "Set Headers",
        "rules": [
            {
                "t": "set",
                "p": "headers",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "headers.content-type",
                "pt": "msg",
                "to": "text/csv",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "headers.Content-Disposition",
                "pt": "msg",
                "to": "contentdisposition",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1050,
        "y": 380,
        "wires": [
            [
                "d19cc7d8.646328"
            ]
        ]
    },
    {
        "id": "3d4e5e51.bdf952",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "Folder handling",
        "func": "// Récupérer la valeur de la variable \"folder\" depuis le contexte\nlet folder = context.get(\"folder\");\n// Si la variable \"folder\" n'est pas définie, l'initialiser avec \"/\"\nif (folder === undefined) {\n    folder = \"/\";\n    context.set(\"folder\", folder); // Enregistrer la valeur dans le contexte\n}\n\n// Récupérer la valeur de la variable \"hidden\" depuis le contexte\nlet hidden = context.get(\"hidden\");\n// Si la variable \"hidden\" n'est pas définie, l'initialiser avec \"false\"\nif (hidden === undefined) {\n    hidden = false;\n    context.set(\"hidden\", hidden); // Enregistrer la valeur dans le contexte\n}\n\n// Si le sujet du message est \"up\"\nif (msg.topic === \"up\") {\n    var the_arr = folder.split('/');\n    the_arr.pop(); // Supprimer le dernier élément du tableau\n    folder = the_arr.join('/'); // Rejoindre les éléments du tableau pour former le nouveau chemin\n    context.set(\"folder\", folder); // Enregistrer le nouveau chemin dans le contexte\n}\n\n// Si le sujet du message est \"change\"\nif (msg.topic === \"change\") {\n    folder = msg.payload; // Mettre à jour la valeur de \"folder\" avec le contenu du champ \"payload\"\n    context.set(\"folder\", folder); // Enregistrer la nouvelle valeur dans le contexte\n}\n\n// Si le sujet du message est \"hidden\"\nif (msg.topic === \"hidden\") {\n    hidden = msg.payload; // Mettre à jour la valeur de \"hidden\" avec le contenu du champ \"payload\"\n    context.set(\"hidden\", hidden); // Enregistrer la nouvelle valeur dans le contexte\n}\n\n// Construire un objet JSON contenant les valeurs actuelles de \"folder\" et \"hidden\"\nmsg.payload = { \"start\": folder, \"hidden\": hidden };\n\nreturn msg; // Renvoyer le message modifié\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 320,
        "wires": [
            [
                "993d7272.843ae",
                "5219875b.c070d8"
            ]
        ]
    },
    {
        "id": "993d7272.843ae",
        "type": "fs-file-lister",
        "z": "8b4c08f2a705dd79",
        "name": "Files",
        "start": "/home/pi",
        "pattern": "*.*",
        "folders": "*",
        "hidden": false,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": true,
        "showWarnings": false,
        "x": 750,
        "y": 260,
        "wires": [
            [
                "3e094f82.15d6e"
            ]
        ]
    },
    {
        "id": "5219875b.c070d8",
        "type": "fs-file-lister",
        "z": "8b4c08f2a705dd79",
        "name": "Folders",
        "start": "/home/pi",
        "pattern": "*.*",
        "folders": "*",
        "hidden": false,
        "lstype": "directories",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": true,
        "showWarnings": false,
        "x": 760,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "4ef3788f935e6027",
        "type": "pdfmake",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "outputType": "base64",
        "inputProperty": "payload",
        "options": "{}",
        "outputProperty": "payload",
        "x": 1760,
        "y": 740,
        "wires": [
            [
                "0479ae659b0e83c9"
            ]
        ]
    },
    {
        "id": "0479ae659b0e83c9",
        "type": "file",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "filename": "filepath",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "base64",
        "x": 1900,
        "y": 740,
        "wires": [
            [
                "e8ac5800cefa20d9"
            ]
        ]
    },
    {
        "id": "aa7bc1543a451763",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "Ajoute le chemin du fichier ",
        "func": "var now = new Date();\nvar jour = (\"0\" + now.getDate()).slice(-2);\nvar mois = (\"0\" + (now.getMonth() + 1)).slice(-2);\n\n// Récupérer le nom de fichier de msg.payload.nameFile, ou utiliser \"default\" si absent\nvar nameFile = msg.payload.nameFile || \"default\";\n// Remplacer les caractères interdits dans le nom de fichier par des underscores\nnameFile = nameFile.replace(/[\\\\/:\"*?<>|]+/g, \"_\");\n\n// Construire le chemin du fichier PDF\nmsg.filePath = \"/home/NodeRed/pdf/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \".pdf\";\n\n// Construire les chemins des fichiers graphiques\nmsg.graphPath = {\n    volt: {\n        complet: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"VOLT.png\",\n        cpu: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"vcpu.png\",\n        ram: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"vram.png\",\n        proc: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"vproc.png\",\n        temp: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"vtemp.png\",\n        watt: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"vwatt.png\"\n    },\n    nidus: {\n        complet: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"NIDUS.png\",\n        cpu: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"ncpu.png\",\n        ram: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"nram.png\",\n        proc: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"nproc.png\",\n        temp: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"ntemp.png\"\n    }\n};\n\n// Renvoyer le message modifié\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 800,
        "wires": [
            [
                "f26e31525cd26f5a"
            ]
        ]
    },
    {
        "id": "7428a3bfe4a5a24d",
        "type": "ui_form",
        "z": "8b4c08f2a705dd79",
        "name": "Configuration du Test",
        "label": "",
        "group": "160e81fb.f1c86e",
        "order": 2,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Nom du Fichier",
                "value": "nameFile",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Temps de mesure en minutes",
                "value": "time",
                "type": "number",
                "required": false,
                "rows": null
            },
            {
                "label": "Stress test Nidus",
                "value": "stressNidus",
                "type": "checkbox",
                "required": false,
                "rows": null
            },
            {
                "label": "Stress test Volt",
                "value": "stressVolt",
                "type": "checkbox",
                "required": false,
                "rows": null
            },
            {
                "label": "Temps de Stress test",
                "value": "timeStress",
                "type": "number",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "nameFile": "",
            "time": "",
            "stressNidus": false,
            "stressVolt": false,
            "timeStress": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": true,
        "className": "",
        "x": 160,
        "y": 800,
        "wires": [
            [
                "aa7bc1543a451763",
                "e87001580862758b"
            ]
        ]
    },
    {
        "id": "ce7fc785e5173ede",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "Créer le contenue du fichier",
        "func": "msg.payload = {\n    header: function (currentPage, pageCount, pageSize) {\n        return [\n            {\n                text: \"Tobler Cyril\",\n                alignment: \"left\",\n                fontSize: 10,\n                margin: [15, 10, 0, 0]\n            },\n            {\n                text: \"Nom du projet : Confuse T-Rex\",\n                alignment: \"center\",\n                fontSize: 10,\n                margin: [0, 0, 0, 0]\n            }\n        ];\n    },\n    footer: function (currentPage, pageCount) {\n        return {\n            columns: [\n                {\n                    text: currentPage.toString() + \" / \" + pageCount,\n                    alignment: \"left\",\n                    fontSize: 10,\n                    margin: [15, 0, 0, 10]\n                },\n                {\n                    text: new Date().toLocaleDateString(\"fr-FR\"),\n                    alignment: \"right\",\n                    fontSize: 10,\n                    margin: [0, 0, 15, 10]\n                }\n            ],\n            margin: [0, 0, 0, 10]\n        };\n    },\n    content: [\n        {\n            text: \"Rapport d'utilisation\",\n            style: \"header\",\n            margin: [0, 10, 0, 0]\n        },\n        {\n            text: \"Les valeurs sont des moyennes sur les \" + Math.floor(msg.delay / (1000 * 60)) + \" dèrnière minutes\"\n        },\n        {\n            text: \"Nidus :\",\n            style: \"header2\"\n        },\n        {\n            text: \"CPU :                 \" + msg.payload.moyenne[\"nidus/benchmark/cpu\"]\n        },\n        {\n            text: \"RAM :                 \" + msg.payload.moyenne[\"nidus/benchmark/ram\"]\n        },\n        {\n            text: \"Nombre de processus : \" + msg.payload.moyenne[\"nidus/benchmark/processes\"]\n        },\n        {\n            text: \"Température CPU :     \" + msg.payload.moyenne[\"nidus/benchmark/temp\"]\n        },\n        {\n            image: 'nidusImage',\n            width: 500,\n            pageBreak: 'after',\n        },\n        {\n            text: \"Volt\",\n            style: \"header2\"\n        },\n        {\n            text: \"CPU :                 \" + msg.payload.moyenne[\"volt/benchmark/cpu\"]\n        },\n        {\n            text: \"RAM :                 \" + msg.payload.moyenne[\"volt/benchmark/ram\"]\n        },\n        {\n            text: \"Nombre de processus : \" + msg.payload.moyenne[\"volt/benchmark/processes\"]\n        },\n        {\n            text: \"Température CPU :     \" + msg.payload.moyenne[\"volt/benchmark/temp\"]\n        }, \n        {\n            text: \"MilliWatt :           \" + msg.payload.moyenne[\"volt/benchmark/watt\"]\n        },\n        {\n            image: 'voltImage',\n            width: 500\n        }, \n        {\n            image: 'wattImage',\n            width: 500\n        },\n    ],\n    images: {\n        voltImage: 'data:image/png;base64,' + msg.payload.voltGraph.toString('base64'), // Utilisation du buffer pour l'image Volt\n        wattImage: 'data:image/png;base64,' + msg.payload.wattGraph.toString('base64'),  // Utilisation du buffer pour l'image Watt de volt\n        nidusImage: 'data:image/png;base64,' + msg.payload.nidusGraph.toString('base64'),  // Utilisation du buffer pour l'image Nidus\n    },\n    styles: {\n        header: {\n            fontSize: 22,\n            bold: true,\n            margin: [0, 30, 0, 0]\n        },\n        header2: {\n            fontSize: 18,\n            bold: true,\n            margin: [0, 20, 0, 0]\n        }\n    }\n};\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1960,
        "y": 780,
        "wires": [
            [
                "4ef3788f935e6027"
            ]
        ]
    },
    {
        "id": "69a8a0bed6aeee0e",
        "type": "join",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 1010,
        "y": 640,
        "wires": [
            [
                "437e6a5585d440a9"
            ]
        ]
    },
    {
        "id": "5c69c227d997ff0a",
        "type": "mqtt-plus in",
        "z": "8b4c08f2a705dd79",
        "name": "Volt/CPU",
        "topic": "/",
        "qos": "2",
        "broker": "ae336b538b957769",
        "x": 840,
        "y": 640,
        "wires": [
            [
                "69a8a0bed6aeee0e"
            ],
            []
        ]
    },
    {
        "id": "f26e31525cd26f5a",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "Activate",
        "func": "var delay = msg.payload.time !== null ? msg.payload.time * 60 * 1000 : 30000; // Convertir en millisecondes si nécessaire\n\n// Créer les objets de message pour chaque sortie\nvar msg1 = {\n    cmd: \"subscribe\",\n    topic: \"/\",\n    complete: true,\n    out:1,\n    delay: delay, // Délai en ms\n    filepath: msg.filePath,\n    graphPath: msg.graphPath\n};\n\nvar msg2 = {\n    cmd: \"subscribe\",\n    topic: \"volt/benchmark/cpu\",\n    out: 2\n};\n\nvar msg3 = {\n    cmd: \"subscribe\",\n    topic: \"volt/benchmark/ram\",\n    out: 3\n};\n\nvar msg4 = {\n    cmd: \"subscribe\",\n    topic: \"volt/benchmark/processes\",\n    out: 4\n};\n\nvar msg5 = {\n    cmd: \"subscribe\",\n    topic: \"volt/benchmark/temp\",\n    out: 4\n};\n\n\n\nvar msg6 = {\n    cmd: \"subscribe\",\n    topic: \"nidus/benchmark/cpu\",\n    out: 5\n};\n\nvar msg7 = {\n    cmd: \"subscribe\",\n    topic: \"nidus/benchmark/ram\",\n    out: 6\n};\n\nvar msg8 = {\n    cmd: \"subscribe\",\n    topic: \"nidus/benchmark/processes\",\n    out: 7\n};\nvar msg9 = {\n    cmd: \"subscribe\",\n    topic: \"nidus/benchmark/temp\",\n    out: 4\n};\n\n\n// Envoyer les messages aux sorties correspondantes\n// Les messages seront envoyés dans l'ordre de 0 à 6, correspondant aux sorties activées\n// Assurez-vous que le nœud \"Function\" a sept sorties activées pour recevoir ces messages\nnode.send([msg1, msg2, msg3, msg4, msg5, msg6, msg7,msg8,msg9]);\n",
        "outputs": 9,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 800,
        "wires": [
            [
                "7b65a4353d980a32",
                "1a94997d94eb26fa"
            ],
            [
                "5c69c227d997ff0a"
            ],
            [
                "f4d244933230ca3c"
            ],
            [
                "0133cae69ae5104b"
            ],
            [
                "639890ec7f76a77c"
            ],
            [
                "2f71f2cc59cf73fe"
            ],
            [
                "bd2b8fa03e46740a"
            ],
            [
                "7d68e80e8c88e5f7"
            ],
            [
                "36a3fe1d1cb9d60b"
            ]
        ]
    },
    {
        "id": "7b65a4353d980a32",
        "type": "delay",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "pauseType": "delayv",
        "timeout": "15",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 660,
        "y": 580,
        "wires": [
            [
                "5c69c227d997ff0a",
                "69a8a0bed6aeee0e",
                "f4d244933230ca3c",
                "0133cae69ae5104b",
                "2f71f2cc59cf73fe",
                "bd2b8fa03e46740a",
                "7d68e80e8c88e5f7",
                "346e23e614df9b2f",
                "09be40e07be60911",
                "7e535f8c5b186600",
                "f591304f29200dcd",
                "376177303fee8e6b",
                "639890ec7f76a77c",
                "36a3fe1d1cb9d60b",
                "3b8849fe5c0112fb",
                "16850c4ba1026ed6",
                "1b0aeb2184b98462"
            ]
        ]
    },
    {
        "id": "346e23e614df9b2f",
        "type": "join",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 1010,
        "y": 680,
        "wires": [
            [
                "e8ce72700af4ebf3"
            ]
        ]
    },
    {
        "id": "f4d244933230ca3c",
        "type": "mqtt-plus in",
        "z": "8b4c08f2a705dd79",
        "name": "Volt/Ram",
        "topic": "/",
        "qos": "2",
        "broker": "ae336b538b957769",
        "x": 840,
        "y": 680,
        "wires": [
            [
                "346e23e614df9b2f"
            ],
            []
        ]
    },
    {
        "id": "09be40e07be60911",
        "type": "join",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 1010,
        "y": 720,
        "wires": [
            [
                "b75f1a3ce01ce919"
            ]
        ]
    },
    {
        "id": "0133cae69ae5104b",
        "type": "mqtt-plus in",
        "z": "8b4c08f2a705dd79",
        "name": "Volt/processes",
        "topic": "/",
        "qos": "2",
        "broker": "ae336b538b957769",
        "x": 860,
        "y": 720,
        "wires": [
            [
                "09be40e07be60911"
            ],
            []
        ]
    },
    {
        "id": "7e535f8c5b186600",
        "type": "join",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 1010,
        "y": 800,
        "wires": [
            [
                "7b6671537c22ccbb"
            ]
        ]
    },
    {
        "id": "2f71f2cc59cf73fe",
        "type": "mqtt-plus in",
        "z": "8b4c08f2a705dd79",
        "name": "Nidus/CPU",
        "topic": "/",
        "qos": "2",
        "broker": "ae336b538b957769",
        "x": 850,
        "y": 800,
        "wires": [
            [
                "7e535f8c5b186600"
            ],
            []
        ]
    },
    {
        "id": "f591304f29200dcd",
        "type": "join",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 1010,
        "y": 840,
        "wires": [
            [
                "a4788f45248625c0"
            ]
        ]
    },
    {
        "id": "bd2b8fa03e46740a",
        "type": "mqtt-plus in",
        "z": "8b4c08f2a705dd79",
        "name": "Nidus/Ram",
        "topic": "/",
        "qos": "2",
        "broker": "ae336b538b957769",
        "x": 850,
        "y": 840,
        "wires": [
            [
                "f591304f29200dcd"
            ],
            []
        ]
    },
    {
        "id": "376177303fee8e6b",
        "type": "join",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 1010,
        "y": 880,
        "wires": [
            [
                "c8ba41e1313713fc"
            ]
        ]
    },
    {
        "id": "7d68e80e8c88e5f7",
        "type": "mqtt-plus in",
        "z": "8b4c08f2a705dd79",
        "name": "Nidus/processes",
        "topic": "/",
        "qos": "2",
        "broker": "ae336b538b957769",
        "x": 860,
        "y": 880,
        "wires": [
            [
                "376177303fee8e6b"
            ],
            []
        ]
    },
    {
        "id": "437e6a5585d440a9",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "Rename",
        "func": "// Définir le sujet du message\nmsg.topic = \"volt/benchmark/cpu\";\n\n// Vérifier si le tableau payload existe et n'est pas vide\nif (msg.payload && Array.isArray(msg.payload) && msg.payload.length > 0) {\n    // Convertir les valeurs en chaînes de caractères en nombres entiers\n    var numericValues = msg.payload.map(function (value) {\n        return parseInt(value, 10); // 10 indique la base décimale\n    }).filter(function (value) {\n        return !isNaN(value); // Filtrer les valeurs non numériques\n    });\n\n    // Vérifier si des valeurs numériques ont été trouvées\n    if (numericValues.length > 0) {\n        // Calculer la somme des valeurs numériques dans le tableau\n        var sum = numericValues.reduce(function (acc, value) {\n            return acc + value;\n        }, 0);\n\n        // Calculer la moyenne en divisant la somme par le nombre d'éléments\n        var moyenne = sum / numericValues.length;\n\n        // Arrondir la moyenne à deux chiffres après la virgule et au multiple de 0.05 le plus proche\n        moyenne = Math.round(moyenne * 20) / 20;\n\n        // Ajouter la moyenne au message\n        msg.moyenne = moyenne.toFixed(2);\n    } else {\n        // Si aucune valeur numérique n'a été trouvée, définir la moyenne à 0\n        msg.moyenne = \"0.00\";\n    }\n} else {\n    // Si le tableau est vide ou n'existe pas, définir la moyenne à 0\n    msg.moyenne.volt.benchmark.cpu = \"0.00\";\n}\n\n// Renvoyer le message modifié\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 640,
        "wires": [
            [
                "4e4f4f7a85b8a2cd",
                "9a3d6e47ed36af55"
            ]
        ]
    },
    {
        "id": "e8ce72700af4ebf3",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "Rename",
        "func": "// Définir le sujet du message\nmsg.topic = \"volt/benchmark/ram\";\n\n// Vérifier si le tableau payload existe et n'est pas vide\nif (msg.payload && Array.isArray(msg.payload) && msg.payload.length > 0) {\n    // Convertir les valeurs en chaînes de caractères en nombres entiers\n    var numericValues = msg.payload.map(function (value) {\n        return parseInt(value, 10); // 10 indique la base décimale\n    }).filter(function (value) {\n        return !isNaN(value); // Filtrer les valeurs non numériques\n    });\n\n    // Vérifier si des valeurs numériques ont été trouvées\n    if (numericValues.length > 0) {\n        // Calculer la somme des valeurs numériques dans le tableau\n        var sum = numericValues.reduce(function (acc, value) {\n            return acc + value;\n        }, 0);\n\n        // Calculer la moyenne en divisant la somme par le nombre d'éléments\n        var moyenne = sum / numericValues.length;\n\n        // Arrondir la moyenne à deux chiffres après la virgule et au multiple de 0.05 le plus proche\n        moyenne = Math.round(moyenne * 20) / 20;\n\n        // Ajouter la moyenne au message\n        msg.moyenne = moyenne.toFixed(2);\n    } else {\n        // Si aucune valeur numérique n'a été trouvée, définir la moyenne à 0\n        msg.moyenne = \"0.00\";\n    }\n} else {\n    // Si le tableau est vide ou n'existe pas, définir la moyenne à 0\n    msg.moyenne = \"0.00\";\n}\n\n// Renvoyer le message modifié\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 680,
        "wires": [
            [
                "4e4f4f7a85b8a2cd",
                "9a3d6e47ed36af55"
            ]
        ]
    },
    {
        "id": "b75f1a3ce01ce919",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "Rename",
        "func": "// Définir le sujet du message\nmsg.topic = \"volt/benchmark/processes\";\n\n// Vérifier si le tableau payload existe et n'est pas vide\nif (msg.payload && Array.isArray(msg.payload) && msg.payload.length > 0) {\n    // Convertir les valeurs en chaînes de caractères en nombres entiers\n    var numericValues = msg.payload.map(function (value) {\n        return parseInt(value, 10); // 10 indique la base décimale\n    }).filter(function (value) {\n        return !isNaN(value); // Filtrer les valeurs non numériques\n    });\n\n    // Vérifier si des valeurs numériques ont été trouvées\n    if (numericValues.length > 0) {\n        // Calculer la somme des valeurs numériques dans le tableau\n        var sum = numericValues.reduce(function (acc, value) {\n            return acc + value;\n        }, 0);\n\n        // Calculer la moyenne en divisant la somme par le nombre d'éléments\n        var moyenne = sum / numericValues.length;\n\n        // Arrondir la moyenne à deux chiffres après la virgule et au multiple de 0.05 le plus proche\n        moyenne = Math.round(moyenne * 20) / 20;\n\n        // Ajouter la moyenne au message\n        msg.moyenne = moyenne.toFixed(2);\n    } else {\n        // Si aucune valeur numérique n'a été trouvée, définir la moyenne à 0\n        msg.moyenne = \"0.00\";\n    }\n} else {\n    // Si le tableau est vide ou n'existe pas, définir la moyenne à 0\n    msg.moyenne = \"0.00\";\n}\n\n// Renvoyer le message modifié\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 720,
        "wires": [
            [
                "4e4f4f7a85b8a2cd",
                "9a3d6e47ed36af55"
            ]
        ]
    },
    {
        "id": "7b6671537c22ccbb",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "Rename",
        "func": "// Définir le sujet du message\nmsg.topic = \"nidus/benchmark/cpu\";\n\n// Vérifier si le tableau payload existe et n'est pas vide\nif (msg.payload && Array.isArray(msg.payload) && msg.payload.length > 0) {\n    // Convertir les valeurs en chaînes de caractères en nombres entiers\n    var numericValues = msg.payload.map(function (value) {\n        return parseInt(value, 10); // 10 indique la base décimale\n    }).filter(function (value) {\n        return !isNaN(value); // Filtrer les valeurs non numériques\n    });\n\n    // Vérifier si des valeurs numériques ont été trouvées\n    if (numericValues.length > 0) {\n        // Calculer la somme des valeurs numériques dans le tableau\n        var sum = numericValues.reduce(function (acc, value) {\n            return acc + value;\n        }, 0);\n\n        // Calculer la moyenne en divisant la somme par le nombre d'éléments\n        var moyenne = sum / numericValues.length;\n\n        // Arrondir la moyenne à deux chiffres après la virgule et au multiple de 0.05 le plus proche\n        moyenne = Math.round(moyenne * 20) / 20;\n\n        // Ajouter la moyenne au message\n        msg.moyenne = moyenne.toFixed(2);\n    } else {\n        // Si aucune valeur numérique n'a été trouvée, définir la moyenne à 0\n        msg.moyenne = \"0.00\";\n    }\n} else {\n    // Si le tableau est vide ou n'existe pas, définir la moyenne à 0\n    msg.moyenne = \"0.00\";\n}\n\n// Renvoyer le message modifié\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 800,
        "wires": [
            [
                "4e4f4f7a85b8a2cd",
                "9a3d6e47ed36af55"
            ]
        ]
    },
    {
        "id": "a4788f45248625c0",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "Rename",
        "func": "// Définir le sujet du message\nmsg.topic = \"nidus/benchmark/ram\";\n\n// Vérifier si le tableau payload existe et n'est pas vide\nif (msg.payload && Array.isArray(msg.payload) && msg.payload.length > 0) {\n    // Convertir les valeurs en chaînes de caractères en nombres entiers\n    var numericValues = msg.payload.map(function (value) {\n        return parseInt(value, 10); // 10 indique la base décimale\n    }).filter(function (value) {\n        return !isNaN(value); // Filtrer les valeurs non numériques\n    });\n\n    // Vérifier si des valeurs numériques ont été trouvées\n    if (numericValues.length > 0) {\n        // Calculer la somme des valeurs numériques dans le tableau\n        var sum = numericValues.reduce(function (acc, value) {\n            return acc + value;\n        }, 0);\n\n        // Calculer la moyenne en divisant la somme par le nombre d'éléments\n        var moyenne = sum / numericValues.length;\n\n        // Arrondir la moyenne à deux chiffres après la virgule et au multiple de 0.05 le plus proche\n        moyenne = Math.round(moyenne * 20) / 20;\n\n        // Ajouter la moyenne au message\n        msg.moyenne = moyenne.toFixed(2);\n    } else {\n        // Si aucune valeur numérique n'a été trouvée, définir la moyenne à 0\n        msg.moyenne = \"0.00\";\n    }\n} else {\n    // Si le tableau est vide ou n'existe pas, définir la moyenne à 0\n    msg.moyenne = \"0.00\";\n}\n\n// Renvoyer le message modifié\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 840,
        "wires": [
            [
                "4e4f4f7a85b8a2cd",
                "9a3d6e47ed36af55"
            ]
        ]
    },
    {
        "id": "c8ba41e1313713fc",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "Rename",
        "func": "// Définir le sujet du message\nmsg.topic = \"nidus/benchmark/processes\";\n// Vérifier si le tableau payload existe et n'est pas vide\nif (msg.payload && Array.isArray(msg.payload) && msg.payload.length > 0) {\n    // Convertir les valeurs en chaînes de caractères en nombres entiers\n    var numericValues = msg.payload.map(function (value) {\n        return parseInt(value, 10); // 10 indique la base décimale\n    }).filter(function (value) {\n        return !isNaN(value); // Filtrer les valeurs non numériques\n    });\n\n    // Vérifier si des valeurs numériques ont été trouvées\n    if (numericValues.length > 0) {\n        // Calculer la somme des valeurs numériques dans le tableau\n        var sum = numericValues.reduce(function (acc, value) {\n            return acc + value;\n        }, 0);\n\n        // Calculer la moyenne en divisant la somme par le nombre d'éléments\n        var moyenne = sum / numericValues.length;\n\n        // Arrondir la moyenne à deux chiffres après la virgule et au multiple de 0.05 le plus proche\n        moyenne = Math.round(moyenne * 20) / 20;\n\n        // Ajouter la moyenne au message\n        msg.moyenne = moyenne.toFixed(2);\n    } else {\n        // Si aucune valeur numérique n'a été trouvée, définir la moyenne à 0\n        msg.moyenne = \"0.00\";\n    }\n} else {\n    // Si le tableau est vide ou n'existe pas, définir la moyenne à 0\n    msg.moyenne = \"0.00\";\n}\n\n// Renvoyer le message modifié\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 880,
        "wires": [
            [
                "4e4f4f7a85b8a2cd",
                "9a3d6e47ed36af55"
            ]
        ]
    },
    {
        "id": "4e4f4f7a85b8a2cd",
        "type": "join",
        "z": "8b4c08f2a705dd79",
        "name": "Values",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "8",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1330,
        "y": 540,
        "wires": [
            [
                "5f624f25.98f38",
                "ac62bafd63eb963d",
                "866c4b8b950d47ba",
                "1b1ec814f8b80459"
            ]
        ]
    },
    {
        "id": "9a3d6e47ed36af55",
        "type": "join",
        "z": "8b4c08f2a705dd79",
        "name": "Moyennes",
        "mode": "custom",
        "build": "object",
        "property": "moyenne",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1390,
        "y": 740,
        "wires": [
            [
                "c71d1f39bb911b75"
            ]
        ]
    },
    {
        "id": "e8ac5800cefa20d9",
        "type": "link out",
        "z": "8b4c08f2a705dd79",
        "name": "End_PDF",
        "mode": "link",
        "links": [
            "26a410550aabca72"
        ],
        "x": 1995,
        "y": 740,
        "wires": []
    },
    {
        "id": "26a410550aabca72",
        "type": "link in",
        "z": "8b4c08f2a705dd79",
        "name": "From_PDF",
        "links": [
            "e8ac5800cefa20d9"
        ],
        "x": 265,
        "y": 320,
        "wires": [
            [
                "a715f7a4.a398a8"
            ]
        ]
    },
    {
        "id": "3b8849fe5c0112fb",
        "type": "join",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 1010,
        "y": 760,
        "wires": [
            [
                "11d7e6fa4a405b9d"
            ]
        ]
    },
    {
        "id": "639890ec7f76a77c",
        "type": "mqtt-plus in",
        "z": "8b4c08f2a705dd79",
        "name": "Volt/Temp",
        "topic": "/",
        "qos": "2",
        "broker": "ae336b538b957769",
        "x": 840,
        "y": 760,
        "wires": [
            [
                "3b8849fe5c0112fb"
            ],
            []
        ]
    },
    {
        "id": "11d7e6fa4a405b9d",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "Rename",
        "func": "// Définir le sujet du message\nmsg.topic = \"volt/benchmark/temp\";\n\n// Vérifier si le tableau payload existe et n'est pas vide\nif (msg.payload && Array.isArray(msg.payload) && msg.payload.length > 0) {\n    // Convertir les valeurs en chaînes de caractères en nombres entiers\n    var numericValues = msg.payload.map(function (value) {\n        return parseInt(value, 10); // 10 indique la base décimale\n    }).filter(function (value) {\n        return !isNaN(value); // Filtrer les valeurs non numériques\n    });\n\n    // Vérifier si des valeurs numériques ont été trouvées\n    if (numericValues.length > 0) {\n        // Calculer la somme des valeurs numériques dans le tableau\n        var sum = numericValues.reduce(function (acc, value) {\n            return acc + value;\n        }, 0);\n\n        // Calculer la moyenne en divisant la somme par le nombre d'éléments\n        var moyenne = sum / numericValues.length;\n\n        // Arrondir la moyenne à deux chiffres après la virgule et au multiple de 0.05 le plus proche\n        moyenne = Math.round(moyenne * 20) / 20;\n\n        // Ajouter la moyenne au message\n        msg.moyenne = moyenne.toFixed(2);\n    } else {\n        // Si aucune valeur numérique n'a été trouvée, définir la moyenne à 0\n        msg.moyenne = \"0.00\";\n    }\n} else {\n    // Si le tableau est vide ou n'existe pas, définir la moyenne à 0\n    msg.moyenne = \"0.00\";\n}\n\n// Renvoyer le message modifié\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 760,
        "wires": [
            [
                "4e4f4f7a85b8a2cd",
                "9a3d6e47ed36af55"
            ]
        ]
    },
    {
        "id": "16850c4ba1026ed6",
        "type": "join",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 1010,
        "y": 920,
        "wires": [
            [
                "6aaa0d33e800fed0"
            ]
        ]
    },
    {
        "id": "36a3fe1d1cb9d60b",
        "type": "mqtt-plus in",
        "z": "8b4c08f2a705dd79",
        "name": "Nidus/temp",
        "topic": "/",
        "qos": "2",
        "broker": "ae336b538b957769",
        "x": 850,
        "y": 920,
        "wires": [
            [
                "16850c4ba1026ed6"
            ],
            []
        ]
    },
    {
        "id": "6aaa0d33e800fed0",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "Rename",
        "func": "// Définir le sujet du message\nmsg.topic = \"nidus/benchmark/temp\";\n// Vérifier si le tableau payload existe et n'est pas vide\nif (msg.payload && Array.isArray(msg.payload) && msg.payload.length > 0) {\n    // Convertir les valeurs en chaînes de caractères en nombres entiers\n    var numericValues = msg.payload.map(function (value) {\n        return parseInt(value, 10); // 10 indique la base décimale\n    }).filter(function (value) {\n        return !isNaN(value); // Filtrer les valeurs non numériques\n    });\n\n    // Vérifier si des valeurs numériques ont été trouvées\n    if (numericValues.length > 0) {\n        // Calculer la somme des valeurs numériques dans le tableau\n        var sum = numericValues.reduce(function (acc, value) {\n            return acc + value;\n        }, 0);\n\n        // Calculer la moyenne en divisant la somme par le nombre d'éléments\n        var moyenne = sum / numericValues.length;\n\n        // Arrondir la moyenne à deux chiffres après la virgule et au multiple de 0.05 le plus proche\n        moyenne = Math.round(moyenne * 20) / 20;\n\n        // Ajouter la moyenne au message\n        msg.moyenne = moyenne.toFixed(2);\n    } else {\n        // Si aucune valeur numérique n'a été trouvée, définir la moyenne à 0\n        msg.moyenne = \"0.00\";\n    }\n} else {\n    // Si le tableau est vide ou n'existe pas, définir la moyenne à 0\n    msg.moyenne = \"0.00\";\n}\n\n// Renvoyer le message modifié\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 920,
        "wires": [
            [
                "4e4f4f7a85b8a2cd",
                "9a3d6e47ed36af55"
            ]
        ]
    },
    {
        "id": "45632b1506735cd0",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "MiseAJourDelay",
        "func": "// Vérifier si msg.delay est défini\nif (msg.delay !== undefined) {\n    if(msg.delay === 1){\n        return null;\n    }\n    // Convertir msg.delay en nombre (si c'est une chaîne)\n    const currentDelay = parseFloat(msg.delay);\n\n    // Vérifier si currentDelay est un nombre valide\n    if (!isNaN(currentDelay)) {\n        // Soustraire 250 de currentDelay, mais s'assurer que le résultat est positif\n        const newDelay = Math.max(currentDelay - 250, 0);\n\n        // Mettre à jour msg.delay avec la nouvelle valeur\n        msg.delay = newDelay;\n\n        // Si le nouveau délai est 0, ne rien retourner\n        if (newDelay === 0) {\n            msg.delay = 1;\n            msg.originalDelay = 1;\n            return msg;\n        } else {\n            // Sinon, retourner le message avec le nouveau délai\n            return msg;\n        }\n    } else {\n        // msg.delay n'est pas un nombre valide\n        return null;\n    }\n} else {\n    // msg.delay n'est pas défini\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 640,
        "wires": [
            [
                "66dfc0722fba42f0",
                "cbc0fa7df08ccd70",
                "1c59637f2afd3963",
                "2e815e58756a55d3"
            ]
        ]
    },
    {
        "id": "66dfc0722fba42f0",
        "type": "delay",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "pauseType": "delay",
        "timeout": "250",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 470,
        "y": 640,
        "wires": [
            [
                "45632b1506735cd0"
            ]
        ]
    },
    {
        "id": "1a94997d94eb26fa",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "CopyDelay",
        "func": "// Vérifier si msg.delay est défini\nif (msg.delay !== undefined) {\nmsg.originalDelay = msg.delay;\nreturn msg;\n}else{\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 700,
        "wires": [
            [
                "45632b1506735cd0"
            ]
        ]
    },
    {
        "id": "5f624f25.98f38",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "Vertical Bar Chart ",
        "func": "// Données reçues du flux précédent\nvar rawData = msg.payload;\n\n// Extraction des données nécessaires\nvar voltCpuData = rawData[\"volt/benchmark/cpu\"];\nvar voltRamData = rawData[\"volt/benchmark/ram\"];\nvar voltProcessesData = rawData[\"volt/benchmark/processes\"];\nvar voltTempData = rawData[\"volt/benchmark/temp\"];\nvar nidusCpuData = rawData[\"nidus/benchmark/cpu\"];\nvar nidusRamData = rawData[\"nidus/benchmark/ram\"];\nvar nidusProcessesData = rawData[\"nidus/benchmark/processes\"];\nvar nidusTempData = rawData[\"nidus/benchmark/temp\"];\n\n// Création du graphique\nvar chartData = {\n    type: 'bar',\n    options: {\n        title: {\n            display: true,\n            text: 'Comparaison des performances'\n        },\n        legend: {\n            display: true\n        },\n        chartArea: {\n            backgroundColor: '#d3d7dd'\n        },\n        plugins: {\n            datalabels: {\n                display: true,\n                backgroundColor: 'whitesmoke',\n                borderRadius: 1,\n                padding: 1,\n                align: 'right',\n                anchor: function (context) {\n                    if (context.dataIndex == context.dataset.data.length - 1) {\n                        return 'center';\n                    } else {\n                        return 'end';\n                    }\n                },\n                offset: 8,\n                formatter: function (value) {\n                    return value > 0 ? value.toLocaleString() : '';\n                }\n            }\n        }\n    },\n    data: {\n        datasets: [\n            {\n                label: \"Volt CPU\",\n                backgroundColor: 'rgba(57,97,184,0.8)',\n                data: voltCpuData\n            },\n            {\n                label: \"Volt RAM\",\n                backgroundColor: 'rgba(127, 184, 57,0.8)',\n                data: voltRamData\n            },\n            {\n                label: \"Volt Processes\",\n                backgroundColor: 'rgba(184, 57, 127,0.8)',\n                data: voltProcessesData\n            },\n            {\n                label: \"Volt Temp\",\n                backgroundColor: 'rgba(184, 127, 57,0.8)',\n                data: voltTempData\n            },\n            {\n                label: \"Nidus CPU\",\n                backgroundColor: 'rgba(97, 184, 57,0.8)',\n                data: nidusCpuData\n            },\n            {\n                label: \"Nidus RAM\",\n                backgroundColor: 'rgba(57,97,127,0.8)',\n                data: nidusRamData\n            },\n            {\n                label: \"Nidus Processes\",\n                backgroundColor: 'rgba(57,127,184,0.8)',\n                data: nidusProcessesData\n            },\n            {\n                label: \"Nidus Temp\",\n                backgroundColor: 'rgba(127, 57, 184,0.8)',\n                data: nidusTempData\n            }\n        ]\n    }\n};\n\nmsg.payload = chartData;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 500,
        "wires": [
            [
                "89dfcf39.990ca"
            ]
        ]
    },
    {
        "id": "89dfcf39.990ca",
        "type": "chart-image",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "width": "1000",
        "height": "1000",
        "x": 1730,
        "y": 500,
        "wires": [
            [
                "62271758.c63728"
            ]
        ]
    },
    {
        "id": "62271758.c63728",
        "type": "file",
        "z": "8b4c08f2a705dd79",
        "name": "Image dump",
        "filename": "/home/NodeRed/bar.png",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2010,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "ac62bafd63eb963d",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "Vertical Line Chart",
        "func": "// Données reçues du flux précédent\nvar rawData = msg.payload;\nvar delayInSeconds = msg.delay / 1000; // Conversion en secondes\n\n// Extraction des données nécessaires\nvar voltCpuData = rawData[\"volt/benchmark/cpu\"];\nvar voltRamData = rawData[\"volt/benchmark/ram\"];\nvar voltProcessesData = rawData[\"volt/benchmark/processes\"];\nvar voltTempData = rawData[\"volt/benchmark/temp\"];\nvar nidusCpuData = rawData[\"nidus/benchmark/cpu\"];\nvar nidusRamData = rawData[\"nidus/benchmark/ram\"];\nvar nidusProcessesData = rawData[\"nidus/benchmark/processes\"];\nvar nidusTempData = rawData[\"nidus/benchmark/temp\"];\n\n// Création du graphique\nvar chartData = {\n    type: 'line',  // Changement du type de graphique en \"line\"\n    options: {\n        title: {\n            display: true,\n            text: 'Comparaison des performances'\n        },\n        legend: {\n            display: true\n        },\n        chartArea: {\n            backgroundColor: '#d3d7dd'\n        },\n        plugins: {\n            datalabels: {\n                display: false  // Désactiver l'affichage des étiquettes de données\n            }\n        }\n    },\n    data: {\n        labels: Array.from({ length: voltCpuData.length }, (_, i) => (i * delayInSeconds).toFixed(1)),  // Temps en secondes\n        datasets: [\n            {\n                label: \"Volt CPU\",\n                borderColor: 'rgba(0, 128, 255, 1)',  // Couleur de la ligne (couleur froide pour Volt)\n                fill: false,  // Désactiver le remplissage sous la ligne\n                data: voltCpuData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Volt RAM\",\n                borderColor: 'rgba(0, 255, 128, 1)',\n                fill: false,\n                data: voltRamData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Volt Temp\",\n                borderColor: 'rgba(255, 193, 37, 1)',\n                fill: false,\n                data: voltTempData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Nidus CPU\",\n                borderColor: 'rgba(255, 69, 0, 1)',\n                fill: false,\n                data: nidusCpuData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Nidus RAM\",\n                borderColor: 'rgba(255, 165, 0, 1)',\n                fill: false,\n                data: nidusRamData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Nidus Temp\",\n                borderColor: 'rgba(255, 0, 0, 1)',\n                fill: false,\n                data: nidusTempData,\n                pointRadius: 0,\n            }\n        ]\n    }\n};\n\nmsg.payload = chartData;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 540,
        "wires": [
            [
                "410a379834aff737"
            ]
        ]
    },
    {
        "id": "410a379834aff737",
        "type": "chart-image",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "width": "1920",
        "height": "1080",
        "x": 1730,
        "y": 540,
        "wires": [
            [
                "dfe30fa5a85a4a10"
            ]
        ]
    },
    {
        "id": "dfe30fa5a85a4a10",
        "type": "file",
        "z": "8b4c08f2a705dd79",
        "name": "Image dump",
        "filename": "/home/NodeRed/line.png",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2010,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "0624d850b450f11c",
        "type": "chart-image",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "width": "1920",
        "height": "1920",
        "x": 1730,
        "y": 580,
        "wires": [
            [
                "3c7687d83cf34e96",
                "0cb19cef3d4b79aa"
            ]
        ]
    },
    {
        "id": "3c7687d83cf34e96",
        "type": "file",
        "z": "8b4c08f2a705dd79",
        "name": "Image dump",
        "filename": "graphPath.volt.complet",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2010,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "35ae4744eb6cb342",
        "type": "chart-image",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "width": "1920",
        "height": "1920",
        "x": 1730,
        "y": 620,
        "wires": [
            [
                "d474eb71658b6f9b",
                "0cb19cef3d4b79aa"
            ]
        ]
    },
    {
        "id": "d474eb71658b6f9b",
        "type": "file",
        "z": "8b4c08f2a705dd79",
        "name": "Image dump",
        "filename": "graphPath.nidus.complet",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2010,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "1b1ec814f8b80459",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "Nidus Line Chart",
        "func": "// Données reçues du flux précédent\nvar rawData = msg.payload;\nvar delayInSeconds = msg.delay / 1000; // Conversion en secondes\nmsg.topic = \"NidusLineChart\";\n// Extraction des données nécessaires\nvar nidusCpuData = rawData[\"nidus/benchmark/cpu\"];\nvar nidusRamData = rawData[\"nidus/benchmark/ram\"];\nvar nidusTempData = rawData[\"nidus/benchmark/temp\"];\n\n// Création du graphique\nvar chartData = {\n    type: 'line',  // Changement du type de graphique en \"line\"\n    options: {\n        title: {\n            display: true,\n            text: 'Comparaison des performances'\n        },\n        legend: {\n            display: true\n        },\n        chartArea: {\n            backgroundColor: '#d3d7dd'\n        },\n        plugins: {\n            datalabels: {\n                display: false  // Désactiver l'affichage des étiquettes de données\n            }\n        }\n    },\n    data: {\n        labels: Array.from({ length: nidusCpuData.length }, (_, i) => (i * delayInSeconds).toFixed(1)),  // Temps en secondes\n        datasets: [\n            \n            {\n                label: \"Nidus CPU\",\n                borderColor: 'rgba(255, 69, 0, 1)',\n                fill: false,\n                data: nidusCpuData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Nidus RAM\",\n                borderColor: 'rgba(255, 165, 0, 1)',\n                fill: false,\n                data: nidusRamData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Nidus Temp\",\n                borderColor: 'rgba(255, 0, 0, 1)',\n                fill: false,\n                data: nidusTempData,\n                pointRadius: 0,\n            }\n        ]\n    }\n};\n\nmsg.payload = chartData;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 620,
        "wires": [
            [
                "35ae4744eb6cb342"
            ]
        ]
    },
    {
        "id": "866c4b8b950d47ba",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "Volt Line Chart",
        "func": "// Données reçues du flux précédent\nvar rawData = msg.payload;\nvar delayInSeconds = msg.delay / 1000; // Conversion en secondes\nmsg.topic = \"VoltLineChart\";\n// Extraction des données nécessaires\nvar voltCpuData = rawData[\"volt/benchmark/cpu\"];\nvar voltRamData = rawData[\"volt/benchmark/ram\"];\nvar voltTempData = rawData[\"volt/benchmark/temp\"];\n\n\n// Création du graphique\nvar chartData = {\n    type: 'line',  // Changement du type de graphique en \"line\"\n    options: {\n        title: {\n            display: true,\n            text: 'Comparaison des performances'\n        },\n        legend: {\n            display: true\n        },\n        chartArea: {\n            backgroundColor: '#d3d7dd'\n        },\n        plugins: {\n            datalabels: {\n                display: false  // Désactiver l'affichage des étiquettes de données\n            }\n        }\n    },\n    data: {\n        labels: Array.from({ length: voltCpuData.length }, (_, i) => (i * delayInSeconds).toFixed(1)),  // Temps en secondes\n        datasets: [\n            {\n                label: \"Volt CPU\",\n                borderColor: 'rgba(0, 128, 255, 1)',  // Couleur de la ligne (couleur froide pour Volt)\n                fill: false,  // Désactiver le remplissage sous la ligne\n                data: voltCpuData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Volt RAM\",\n                borderColor: 'rgba(0, 255, 128, 1)',\n                fill: false,\n                data: voltRamData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Volt Temp\",\n                borderColor: 'rgba(0, 173, 0, 1)',\n                fill: false,\n                data: voltTempData,\n                pointRadius: 0,\n            },\n\n        ]\n    }\n};\n\nmsg.payload = chartData;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 580,
        "wires": [
            [
                "0624d850b450f11c"
            ]
        ]
    },
    {
        "id": "e87001580862758b",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "Commmandes de StressTest",
        "func": "const sshNidus = \"ssh tobby@nidus\"; \nconst sshVolt = \"ssh tobby@157.26.228.77\"; \n\n    var stressCommandsNidus;\n    var stressCommandsVolt;\n\n    if (msg.payload.stressNidus) {\n        var msg1 = {\n            payload : `stress-ng --cpu 2 --io 1 --timeout ${msg.payload.timeStress*60}s --cpu-load 100 --vm-bytes 3G`\n        };\n    }\n\n    if (msg.payload.stressVolt) {\n        var msg2 = {\n            payload: `ssh tobby@157.26.228.77 \\\"stress-ng --cpu 2 --io 1 --timeout ${msg.payload.timeStress*60}s --cpu-load 100 --vm-bytes 3G\\\"`\n        };\n    }\n    node.send([msg1, msg2]);\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 840,
        "wires": [
            [
                "5556b3e3ae54080e"
            ],
            [
                "5556b3e3ae54080e"
            ]
        ]
    },
    {
        "id": "5556b3e3ae54080e",
        "type": "exec",
        "z": "8b4c08f2a705dd79",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 610,
        "y": 900,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "cbc0fa7df08ccd70",
        "type": "ui_template",
        "z": "8b4c08f2a705dd79",
        "group": "160e81fb.f1c86e",
        "name": "ProgressBar",
        "order": 3,
        "width": 0,
        "height": 0,
        "format": "<style>\n    .custom-progress-bar .md-progress-linear-fill {\n        height: 20px;\n        /* Définissez la hauteur souhaitée ici */\n    }\n</style>\n\n<div layout=\"column\" layout-align=\"center center\">\n    <md-progress-linear class=\"md-accent custom-progress-bar\" md-mode=\"determinate\"\n        value=\"{{(msg.originalDelay - msg.delay) / msg.originalDelay * 100}}\"\n        ng-show=\"msg.delay !== undefined && msg.originalDelay !== undefined\"></md-progress-linear>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 470,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "0cf627b430aec580",
        "type": "join",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "4",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 1850,
        "y": 840,
        "wires": [
            [
                "e58255ccc7601a18"
            ]
        ]
    },
    {
        "id": "c71d1f39bb911b75",
        "type": "change",
        "z": "8b4c08f2a705dd79",
        "name": "Organise Payload-Topic",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "moyenne",
                "tot": "msg",
                "dc": true
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "moyenne",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1450,
        "y": 800,
        "wires": [
            [
                "0cf627b430aec580",
                "b804feabadb6d67c",
                "58239d73.30c134",
                "5f72196b81b8a6cd"
            ]
        ]
    },
    {
        "id": "696f35b1c89a67f0",
        "type": "change",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "complete",
                "pt": "msg",
                "to": "true",
                "tot": "bool",
                "dc": true
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "ChartComplete",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1860,
        "y": 680,
        "wires": [
            [
                "9a3d6e47ed36af55"
            ]
        ]
    },
    {
        "id": "e58255ccc7601a18",
        "type": "change",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Moyenne_Graph",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1750,
        "y": 780,
        "wires": [
            [
                "ce7fc785e5173ede"
            ]
        ]
    },
    {
        "id": "58239d73.30c134",
        "type": "file in",
        "z": "8b4c08f2a705dd79",
        "name": "Read Graph Nidus Complet",
        "filename": "graphPath.nidus.complet",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1460,
        "y": 1020,
        "wires": [
            [
                "927013c7ac3bd3b3"
            ]
        ]
    },
    {
        "id": "927013c7ac3bd3b3",
        "type": "base64",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "action": "str",
        "property": "msg.payload",
        "x": 1680,
        "y": 1020,
        "wires": [
            [
                "1ae0b1e5953c4dc9"
            ]
        ]
    },
    {
        "id": "b804feabadb6d67c",
        "type": "file in",
        "z": "8b4c08f2a705dd79",
        "name": "Read Graph Volt Complet",
        "filename": "graphPath.volt.complet",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1450,
        "y": 900,
        "wires": [
            [
                "75dba7cb1b841b76"
            ]
        ]
    },
    {
        "id": "75dba7cb1b841b76",
        "type": "base64",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "action": "str",
        "property": "msg.payload",
        "x": 1680,
        "y": 900,
        "wires": [
            [
                "0538fdff5e05960b"
            ]
        ]
    },
    {
        "id": "0538fdff5e05960b",
        "type": "change",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "voltGraph",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1670,
        "y": 860,
        "wires": [
            [
                "0cf627b430aec580"
            ]
        ]
    },
    {
        "id": "1ae0b1e5953c4dc9",
        "type": "change",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "nidusGraph",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1670,
        "y": 1060,
        "wires": [
            [
                "0cf627b430aec580"
            ]
        ]
    },
    {
        "id": "f1879fc3dd7ac416",
        "type": "debug",
        "z": "8b4c08f2a705dd79",
        "name": "CATCH_ERROR",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 1180,
        "wires": []
    },
    {
        "id": "8a147f8e2c4d3ce8",
        "type": "catch",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 160,
        "y": 1180,
        "wires": [
            [
                "f1879fc3dd7ac416"
            ]
        ]
    },
    {
        "id": "0cb19cef3d4b79aa",
        "type": "join",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "3",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1710,
        "y": 680,
        "wires": [
            [
                "696f35b1c89a67f0"
            ]
        ]
    },
    {
        "id": "24fc8fe41b101320",
        "type": "ina-sensor",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "handle": "173c4031bd3a25c0",
        "x": 270,
        "y": 520,
        "wires": [
            [
                "ddb601b1002aee59"
            ],
            [
                "ddb601b1002aee59"
            ]
        ]
    },
    {
        "id": "6a813d78d66370e3",
        "type": "join",
        "z": "8b4c08f2a705dd79",
        "name": "Join_2",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 750,
        "y": 480,
        "wires": [
            [
                "998946691c1cd0c3"
            ]
        ]
    },
    {
        "id": "1c59637f2afd3963",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "USE",
        "func": "msg.use = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 520,
        "wires": [
            [
                "6a813d78d66370e3"
            ]
        ]
    },
    {
        "id": "9d3341bb48f633bc",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "MilliWatt",
        "func": "// Récupérer les valeurs de courant (mA) et de tension (V) depuis les propriétés msg.payload\nvar current_mA = msg.payload.miliamps;\nvar voltage_V = msg.payload.voltage;\n\n// Calculer la puissance en watts (W)\nvar power_W = (current_mA / 1000) * voltage_V;  // Convertir le courant en ampères\n\n// Vérifier si la tension est négative\nif (voltage_V < 0.5) {\n    // Si la tension est négative, ne rien faire et retourner le message inchangé\n    return null;\n}\n\n// Créer un nouvel objet msg avec la puissance en watts comme payload\nmsg.payload = power_W*1000;\nmsg.topic = \"Watt\";\n// Renvoyer le message modifié\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 480,
        "wires": [
            [
                "6a813d78d66370e3"
            ]
        ]
    },
    {
        "id": "ddb601b1002aee59",
        "type": "join",
        "z": "8b4c08f2a705dd79",
        "name": "Join_Amp_Volt",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 440,
        "y": 480,
        "wires": [
            [
                "9d3341bb48f633bc"
            ]
        ]
    },
    {
        "id": "998946691c1cd0c3",
        "type": "switch",
        "z": "8b4c08f2a705dd79",
        "name": "DropWhenNotUse",
        "property": "use",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 930,
        "y": 480,
        "wires": [
            [
                "27123f4d6dd99166"
            ],
            []
        ]
    },
    {
        "id": "1b0aeb2184b98462",
        "type": "join",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 1010,
        "y": 600,
        "wires": [
            [
                "af4c526055903414"
            ]
        ]
    },
    {
        "id": "af4c526055903414",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "Rename",
        "func": "// Définir le sujet du message\nmsg.topic = \"volt/benchmark/watt\";\n\n// Vérifier si le tableau payload existe et n'est pas vide\nif (msg.payload && Array.isArray(msg.payload) && msg.payload.length > 0) {\n    // Convertir les valeurs en chaînes de caractères en nombres entiers\n    var numericValues = msg.payload.map(function (value) {\n        return parseInt(value, 10); // 10 indique la base décimale\n    }).filter(function (value) {\n        return !isNaN(value); // Filtrer les valeurs non numériques\n    });\n\n    // Vérifier si des valeurs numériques ont été trouvées\n    if (numericValues.length > 0) {\n        // Calculer la somme des valeurs numériques dans le tableau\n        var sum = numericValues.reduce(function (acc, value) {\n            return acc + value;\n        }, 0);\n\n        // Calculer la moyenne en divisant la somme par le nombre d'éléments\n        var moyenne = sum / numericValues.length;\n\n        // Arrondir la moyenne à deux chiffres après la virgule et au multiple de 0.05 le plus proche\n        moyenne = Math.round(moyenne * 20) / 20;\n\n        // Ajouter la moyenne au message\n        msg.moyenne = moyenne.toFixed(2);\n    } else {\n        // Si aucune valeur numérique n'a été trouvée, définir la moyenne à 0\n        msg.moyenne = \"0.00\";\n    }\n} else {\n    // Si le tableau est vide ou n'existe pas, définir la moyenne à 0\n    msg.moyenne.volt.benchmark.cpu = \"0.00\";\n}\n\n// Renvoyer le message modifié\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 600,
        "wires": [
            [
                "8783fd80a6da0d24",
                "9a3d6e47ed36af55"
            ]
        ]
    },
    {
        "id": "27123f4d6dd99166",
        "type": "change",
        "z": "8b4c08f2a705dd79",
        "name": "Set Payload Watt",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.Watt",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1150,
        "y": 480,
        "wires": [
            [
                "1b0aeb2184b98462"
            ]
        ]
    },
    {
        "id": "8783fd80a6da0d24",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "Watt Line Chart",
        "func": "// Données reçues du flux précédent\nvar rawData = msg.payload;\nvar delayInSeconds = msg.delay / 1000; // Conversion en secondes\n\n// Extraction des données nécessaires\nvar voltWatt = rawData;\n// Création du graphique\nvar chartData = {\n    type: 'line',  // Changement du type de graphique en \"line\"\n    options: {\n        title: {\n            display: true,\n            text: 'Comparaison des performances'\n        },\n        legend: {\n            display: true\n        },\n        chartArea: {\n            backgroundColor: '#d3d7dd'\n        },\n        plugins: {\n            datalabels: {\n                display: false  // Désactiver l'affichage des étiquettes de données\n            }\n        }\n    },\n    data: {\n        labels: Array.from({ length: voltWatt.length }, (_, i) => (i * delayInSeconds).toFixed(1)),  // Temps en secondes\n        datasets: [\n            \n            {\n                label: \"Volt Watt\",\n                borderColor: 'rgba(0, 255, 255, 1)',\n                fill: false,\n                data: voltWatt,\n                pointRadius: 0,\n            },\n        ]\n    }\n};\n\nmsg.payload = chartData;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 460,
        "wires": [
            [
                "df8c40fc1071e2b0"
            ]
        ]
    },
    {
        "id": "df8c40fc1071e2b0",
        "type": "chart-image",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "width": "1920",
        "height": "1920",
        "x": 1730,
        "y": 460,
        "wires": [
            [
                "72b2cd6c7aeb1dcb",
                "0cb19cef3d4b79aa"
            ]
        ]
    },
    {
        "id": "72b2cd6c7aeb1dcb",
        "type": "file",
        "z": "8b4c08f2a705dd79",
        "name": "Image dump",
        "filename": "graphPath.volt.watt",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2010,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "5f72196b81b8a6cd",
        "type": "file in",
        "z": "8b4c08f2a705dd79",
        "name": "Read Graph Volt Watt",
        "filename": "graphPath.volt.watt",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1440,
        "y": 940,
        "wires": [
            [
                "b671f4bd54bdfe46"
            ]
        ]
    },
    {
        "id": "b671f4bd54bdfe46",
        "type": "base64",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "action": "str",
        "property": "msg.payload",
        "x": 1680,
        "y": 940,
        "wires": [
            [
                "2c0b998967ff7c0d"
            ]
        ]
    },
    {
        "id": "2c0b998967ff7c0d",
        "type": "change",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "wattGraph",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1670,
        "y": 980,
        "wires": [
            [
                "0cf627b430aec580"
            ]
        ]
    },
    {
        "id": "2e815e58756a55d3",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "Prepare Payload Time",
        "func": "// Vérifier si les valeurs sont toutes les deux égales à 1 milliseconde\nif (msg.originalDelay === 1 && msg.delay === 1) {\n    msg.payload = \"00:00\";  // Cas spécial\n} else {\n    // Calculer le temps effectué et le temps total (en millisecondes)\n    var tempsEffectue = msg.originalDelay - msg.delay;\n    var tempsTotal = msg.originalDelay;\n\n    // Convertir les millisecondes en secondes\n    tempsEffectue /= 1000;\n    tempsTotal /= 1000;\n\n    // Arrondir les secondes\n    tempsEffectue = Math.round(tempsEffectue);\n    tempsTotal = Math.round(tempsTotal);\n\n    // Formater les temps dans le format \"mm:ss\"\n    var formatTemps = function (temps) {\n        var minutes = Math.floor(temps / 60);\n        var secondes = temps % 60;\n        return (minutes < 10 ? \"0\" : \"\") + minutes + \":\" + (secondes < 10 ? \"0\" : \"\") + secondes;\n    };\n\n    // Former le résultat\n    var tempsFormate = formatTemps(tempsEffectue) + \"/\" + formatTemps(tempsTotal);\n\n    msg.payload = tempsFormate;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 600,
        "wires": [
            [
                "f1025c377f95d47c"
            ]
        ]
    },
    {
        "id": "f1025c377f95d47c",
        "type": "ui_text",
        "z": "8b4c08f2a705dd79",
        "group": "160e81fb.f1c86e",
        "order": 5,
        "width": 10,
        "height": 2,
        "name": "Time",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "30",
        "color": "#e01b24",
        "x": 250,
        "y": 560,
        "wires": []
    },
    {
        "id": "dadf8df00e8a66e0",
        "type": "ui_toast",
        "z": "8b4c08f2a705dd79",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "Valider",
        "cancel": "Annuler",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 150,
        "y": 900,
        "wires": [
            [
                "73eaf84541d1b946"
            ]
        ]
    },
    {
        "id": "0ea63a06c4580851",
        "type": "ui_button",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "group": "160e81fb.f1c86e",
        "order": 6,
        "width": 4,
        "height": 2,
        "passthru": true,
        "label": "Purge",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "Voulez vous vraiment purger tout les fichier generé par Node-Red ?",
        "payloadType": "str",
        "topic": "Purge des fichier !!!",
        "topicType": "str",
        "x": 130,
        "y": 860,
        "wires": [
            [
                "dadf8df00e8a66e0"
            ]
        ]
    },
    {
        "id": "2eef0c7e57e55032",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "Purge",
        "func": "if (msg.payload === \"Valider\"){\n    msg.payload = \"rm -r /home/NodeRed/*\";\n    return msg;\n}else{\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 980,
        "wires": [
            [
                "5556b3e3ae54080e"
            ]
        ]
    },
    {
        "id": "cd1ab62ecb897dfe",
        "type": "ui_toast",
        "z": "8b4c08f2a705dd79",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "Valider",
        "cancel": "Annuler",
        "raw": false,
        "className": "",
        "topic": "VRAIMENT ???",
        "name": "",
        "x": 150,
        "y": 980,
        "wires": [
            [
                "2eef0c7e57e55032",
                "fcc0e2816a1e8a96"
            ]
        ]
    },
    {
        "id": "73eaf84541d1b946",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "function 2",
        "func": "if (msg.payload === \"Valider\"){\n    msg.payload = \"En êtes vous bien sûr ???\";\n    return msg;\n}else{\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 940,
        "wires": [
            [
                "cd1ab62ecb897dfe"
            ]
        ]
    },
    {
        "id": "fcc0e2816a1e8a96",
        "type": "delay",
        "z": "8b4c08f2a705dd79",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 340,
        "y": 1020,
        "wires": [
            [
                "764a61b3fe2e36ab"
            ]
        ]
    },
    {
        "id": "764a61b3fe2e36ab",
        "type": "function",
        "z": "8b4c08f2a705dd79",
        "name": "Mkdir",
        "func": "if (msg.payload === \"Valider\"){\n    msg.payload = \"mkdir /home/NodeRed/png /home/NodeRed/pdf\";\n    return msg;\n}else{\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1020,
        "wires": [
            [
                "5556b3e3ae54080e"
            ]
        ]
    },
    {
        "id": "ef95e990ba7d7230",
        "type": "ui_template",
        "z": "de0f28e0b2de7e99",
        "group": "4e715bdea006e7fa",
        "name": "",
        "order": 1,
        "width": 28,
        "height": 33,
        "format": "<!DOCTYPE html>\n<html lang=\"fr\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 0;\n        }\n\n        header {\n            background-color: #007BFF;\n            color: #fff;\n            padding: 20px;\n            text-align: center;\n        }\n\n        h1 {\n            margin: 0;\n        }\n\n        nav {\n            background-color: #f5f5f5;\n            border-bottom: 1px solid #ddd;\n        }\n\n        nav ul {\n            list-style-type: none;\n            padding: 0;\n            margin: 0;\n        }\n\n        nav ul li {\n            display: inline;\n            margin-right: 20px;\n        }\n\n        .container {\n            padding: 20px;\n        }\n\n        .section {\n            margin-bottom: 20px;\n        }\n    </style>\n</head>\n\n<body>\n    <div class=\"container\">\n        <div id=\"intro\" class=\"section\">\n    <h1>Introduction</h1>\n    <p>Le développement de sites web et d'applications web requiert une attention particulière à la performance et à la\n        consommation des ressources. Afin de réduire l’impact écologique des solutions digitales et d’optimiser la charge\n        des systèmes, il est essentiel de mesurer et d'analyser la consommation de ces systèmes dans des conditions de\n        charge réalistes. Dans ce contexte, il est nécessaire de mettre en place un banc de mesures de la consommation\n        capable de générer du trafic web, de mesurer la consommation électrique et de fournir des rapports sur la\n        performance du code ou de l'architecture testée.</p>\n        </div>\n        <div id=\"objectifs\" class=\"section\">\n    <h2>Objectifs</h2>\n    <h3>Objectif principal</h3>\n    <p>L'objectif principal de ce projet est de concevoir et développer un banc de mesures de la consommation électrique\n        pour site web ou application web. Ce banc de mesures devra être capable de générer du trafic web, de mesurer la\n        consommation des ressources et de générer des rapports détaillés sur la performance du code ou de l'architecture\n        testée par rapport à une référence.</p>\n    \n    <h3>Objectifs spécifiques</h3>\n    <ul>\n        <li>\n            <h4>Génération de trafic web</h4>\n            <p>Le système devra être en mesure de simuler le trafic web en générant des requêtes HTTP réalistes. Il devra\n                pouvoir reproduire des scénarios de charge variable afin d'évaluer les performances du site web ou de\n                l'application web dans des conditions réelles.</p>\n        </li>\n        <li>\n            <h4>Mesure de la consommation</h4>\n            <p>Le banc de mesures devra être équipé d'un mécanisme de mesure précis et fiable de la consommation des\n                ressources, telles que la consommation d'énergie, l'utilisation du processeur, la consommation de mémoire et\n                la consommation du réseau.</p>\n        </li>\n        <li>\n            <h4>Génération de rapports sur la performance</h4>\n            <p>Le système devra être capable de collecter les données de mesure et de générer des rapports détaillés sur la\n                performance du code ou de l'architecture testée. Les rapports devront inclure des métriques telles que le\n                temps de réponse, la consommation d'énergie par requête, l'utilisation du processeur, etc.</p>\n        </li>\n    </ul>\n        </div>\n        <div id=\"Caractéristiques\" class=\"section\">\n    <h2>Caractéristiques</h2>\n    \n    <h3>Génération de trafic web</h3>\n    <p>Utilisation de l'outil Gatling comme générateur de trafic web. Gatling permettra de simuler des requêtes HTTP\n        réalistes, de configurer des scénarios de charge et d'évaluer les performances du système testé.</p>\n    <p><strong>Gatling</strong> est un outil de test de charge open source basé sur Scala, conçu pour évaluer les\n        performances des applications et des sites Web. Gatling simule des utilisateurs virtuels qui envoient des requêtes\n        HTTP vers le système cible.</p>\n    \n    <h3>Mesure de la consommation électrique (INA219)</h3>\n    <p>Utilisation d'un chip INA219 ou autre connectée via le bus I2C pour mesurer la consommation de manière précise et\n        fiable. La chip INA219 fournira des informations détaillées sur la consommation d'énergie en mesurant la tension et\n        le courant du système testé.</p>\n    \n    <h3>Mesure de la consommation</h3>\n    <p>Utilisation d’un serveur Node-Red pour son environnement low-code pour les applications évènementielles. Il\n        facilitera le relevé des mesures de consommation des ressources du banc de tests (consommation d'énergie,\n        utilisation du processeur, consommation de mémoire, bande passante et temps de réponses, ...).</p>\n        </div>\n        <div id=\"Matériel\" class=\"section\">\n    <h2>Matériel</h2>\n    \n    <ul>\n        <li><strong>2x</strong> Radiateur pour Raspberry Pi 4</li>\n        <li><strong>2x</strong> Raspberry Pi 4 /4GB RAM / 64GB SD</li>\n        <li><strong>2x</strong> Bloc d'alimentation Raspberry Pi 4</li>\n        <li><strong>2x</strong> Carte Micro SD 64GB</li>\n        <li><strong>2x</strong> câble RJ45 rose</li>\n        <li><strong>1x</strong> câble Micro HDMI - HDMI</li>\n        <li><strong>1x</strong> Plaque d'essai</li>\n        <li><strong>1x</strong> set de câbles de connexion</li>\n        <li><strong>2x</strong> Platine de mesure INA219</li>\n        <li><strong>2x</strong> câble USB-C Femelle</li>\n        <li><strong>2x</strong> câble USB-C Mâle</li>\n    </ul>\n    \n    <h3>Nomenclature</h3>\n    <p>Pour simplifier la lecture du rapport ainsi que le travail, les Raspberry Pi seront nommés comme suit :</p>\n    <ul>\n        <li><strong>Volt</strong> : Serveur Web</li>\n        <li><strong>Nidus</strong> : Serveur de monitoring</li>\n    </ul>\n    <p>Au niveau des hostname, les Raspberry Pi seront nommés comme suit : </p>\n    <ul>\n        <li><strong>volt.s2.rpn.ch</strong></li>\n        <li><strong>nidus.s2.rpn.ch</strong></li>\n    </ul>\n        </div>\n    <br><br>\n        <div id=\"section-0\" class=\"section\">\n        <h1>Listes des versions :</h1>\n        </div>\n        <div id=\"section-1\" class=\"section\">\n            <h2>Version V1</h2>\n            <p>La version V1 est une première itération du projet. Elle comprend la mise en place de l'environnement de\n                test et la configuration des outils nécessaires pour effectuer les mesures.</p>\n            <p>En outre elle comprend également la mise en place d'un stresstest la récupération des info la création d'un rapport</p>\n        </div>\n        <div id=\"section-2\" class=\"section\">\n            <h2>Version V2</h2>\n            <p>La version V2 ajoute l'utilisation de Gatling aux tests de charge avec récupération des informations des\n                logs de Gatling et de l'INA219.</p>\n        </div>\n        <div id=\"section-3\" class=\"section\">\n            <h2>Version V3</h2>\n            <p>La version V3 améliore l'interface utilisateur, les graphiques, la gestion des données, et permet\n                l'exportation/importation de données au format JSON pour générer des rapports PDF détaillés.</p>\n            <p>Qui Plus est la version 3 permet de traiter de plus grand nombre de donnée donc des test plus long avec plus d'utilisateur grâce à une meilleurs optimisation</p>\n        </div>\n    </div>\n</body>\n\n</html>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 180,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "a283072b95a48a7c",
        "type": "ui_ui_control",
        "z": "de0f28e0b2de7e99",
        "name": "",
        "events": "all",
        "x": 320,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "2c4da020ab7025a7",
        "type": "ui_button",
        "z": "de0f28e0b2de7e99",
        "name": "",
        "group": "4e715bdea006e7fa",
        "order": 2,
        "width": 8,
        "height": 2,
        "passthru": false,
        "label": "V1",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "StressTest_V1.0",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 170,
        "y": 280,
        "wires": [
            [
                "a283072b95a48a7c"
            ]
        ]
    },
    {
        "id": "4366bad9a64a0c15",
        "type": "ui_button",
        "z": "de0f28e0b2de7e99",
        "name": "",
        "group": "4e715bdea006e7fa",
        "order": 4,
        "width": 8,
        "height": 2,
        "passthru": false,
        "label": "V2",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "Gatling_PoC_V2.0",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 170,
        "y": 320,
        "wires": [
            [
                "a283072b95a48a7c"
            ]
        ]
    },
    {
        "id": "079751aa40ce94f8",
        "type": "ui_button",
        "z": "de0f28e0b2de7e99",
        "name": "",
        "group": "4e715bdea006e7fa",
        "order": 6,
        "width": 8,
        "height": 2,
        "passthru": false,
        "label": "V3",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "Curius T-Rex_V3.0",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 170,
        "y": 360,
        "wires": [
            [
                "a283072b95a48a7c"
            ]
        ]
    },
    {
        "id": "9ba0d599c2412587",
        "type": "inject",
        "z": "aa36cc7d7fa5cea5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"content\":[\"First paragraph\",\"Another paragraph, this time a little bit longer to make sure, this line will be divided into at least two lines\"]}",
        "payloadType": "json",
        "x": 250,
        "y": 220,
        "wires": [
            [
                "de5c8212fe2b174f"
            ]
        ]
    },
    {
        "id": "9feebdce6905e6f3",
        "type": "pdfmake",
        "z": "aa36cc7d7fa5cea5",
        "name": "",
        "outputType": "base64",
        "inputProperty": "payload",
        "options": "{}",
        "outputProperty": "payload",
        "x": 440,
        "y": 220,
        "wires": [
            [
                "904144c3f832e485"
            ]
        ]
    },
    {
        "id": "904144c3f832e485",
        "type": "file",
        "z": "aa36cc7d7fa5cea5",
        "name": "",
        "filename": "filePath",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "base64",
        "x": 660,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "de5c8212fe2b174f",
        "type": "function",
        "z": "aa36cc7d7fa5cea5",
        "name": "Ajoute le chemin du fichier ",
        "func": "var now = new Date();\nvar jour = (\"0\" + now.getDate()).slice(-2);\nvar mois = (\"0\" + (now.getMonth() + 1)).slice(-2);\n\nmsg.filePath = \"/home/NodeRed/\" + jour + mois + \".pdf\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 160,
        "wires": [
            [
                "9feebdce6905e6f3"
            ]
        ]
    },
    {
        "id": "dce34fa7.56d7d",
        "type": "function",
        "z": "3572c39984e6901e",
        "name": "Vertical Bar Chart",
        "func": "function getGetOrdinal(n) {\n    var s=[\"th\",\"st\",\"nd\",\"rd\"],\n    v=n%100;\n    return n+(s[(v-20)%10]||s[v]||s[0]);\n }\n\nvar dL = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\nvar dS = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\nvar mL = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nvar mS = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n\nlet now = new Date();\n\n// Create the chart object\nlet m = {\n    type: 'bar',\n    options: {\n        title: {\n            display:true,\n            text:'Vertical bar example'\n        },\n        legend: {\n            display:false\n        },\n        chartArea: {\n            backgroundColor: 'white'\n        },\n        plugins: {\n            datalabels: {\n                display:true,\n                backgroundColor:'whitesmoke',\n                borderRadius:1,\n                padding:1,\n                align: 'right',\n                anchor: function(context) {\n                    //node.send({debug:{dataindex:context.dataIndex}});\n                    if (context.dataIndex == context.dataset.data.length - 1) {\n                        return 'center';\n                    } else {\n                        return 'end';\n                    }\n                },\n                offset:8,\n                formatter:function(value) {\n                    return value > 0 ? value.toLocaleString() : '';\n                }\n            }\n        }\n    },\n    data: {\n        labels:[],\n        datasets: [\n            {\n                label:\"Sample data\",\n                backgroundColor:'rgba(57,97,184,0.8)',\n                data:[]\n            }\n        ]\n    }\n}\n\nlet l = Math.floor(Math.random()*50);\n\nfor (let i=0; i<10; i++) {\n    l = l + Math.floor(Math.random()*6)-3;\n    m.data.datasets[0].data.push(l);\n    var d = new Date();\n    d.setTime(now.getTime()-1000*60*60*24*(10-i));\n    m.data.labels.push(dL[d.getDay()]+\", \"+getGetOrdinal(d.getDate()));\n}\n\nmsg.payload = m;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 140,
        "wires": [
            [
                "12d010c4.fc8e3f"
            ]
        ]
    },
    {
        "id": "18d162d1.33e8ed",
        "type": "function",
        "z": "3572c39984e6901e",
        "name": "Telegram message",
        "func": "msg.payload = {chatId: \"xxxxx\", type:\"photo\", content:\"/home/pi/charts/test.png\", caption:\"Chart caption\"};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "68d737f4.5047f8",
        "type": "inject",
        "z": "3572c39984e6901e",
        "name": "Vertical Bar",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 140,
        "wires": [
            [
                "dce34fa7.56d7d"
            ]
        ]
    },
    {
        "id": "d658d601.f421e8",
        "type": "inject",
        "z": "3572c39984e6901e",
        "name": "Vertical Bar",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "e284de4.fc6a12",
        "type": "function",
        "z": "3572c39984e6901e",
        "name": "Line Chart",
        "func": "function getGetOrdinal(n) {\n    var s=[\"th\",\"st\",\"nd\",\"rd\"],\n    v=n%100;\n    return n+(s[(v-20)%10]||s[v]||s[0]);\n }\n\nvar dL = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\nvar dS = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\nvar mL = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nvar mS = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n\nlet now = new Date();\n\n// Create the chart object\nlet m = {\n    type: 'line',\n    options: {\n        title: {\n            display:true,\n            text:'Line chart example'\n        },\n        legend: {\n            display:false\n        },\n        chartArea: {\n            backgroundColor: 'white'\n        },\n        plugins: {\n            datalabels: {\n                display:true,\n                backgroundColor:'whitesmoke',\n                borderRadius:1,\n                padding:1,\n                align: 'right',\n                anchor: function(context) {\n                    //node.send({debug:{dataindex:context.dataIndex}});\n                    if (context.dataIndex == context.dataset.data.length - 1) {\n                        return 'center';\n                    } else {\n                        return 'end';\n                    }\n                },\n                offset:8,\n                formatter:function(value) {\n                    return value > 0 ? value.toLocaleString() : '';\n                }\n            }\n        }\n    },\n    data: {\n        labels:[],\n        datasets: [\n            {\n                label:\"Sample data\",\n                borderColor:'rgba(57,97,184,0.8)',\n                fill:false,\n                data:[]\n            }\n        ]\n    }\n}\n\nlet l = Math.floor(Math.random()*50);\n\nfor (let i=0; i<10; i++) {\n    l = l + Math.floor(Math.random()*6)-3;\n    m.data.datasets[0].data.push(l);\n    var d = new Date();\n    d.setTime(now.getTime()-1000*60*60*24*(10-i));\n    m.data.labels.push(dL[d.getDay()]+\", \"+getGetOrdinal(d.getDate()));\n}\n\nmsg.payload = m;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 300,
        "wires": [
            [
                "f7e11042.f96d9"
            ]
        ]
    },
    {
        "id": "f9531538.ab1988",
        "type": "inject",
        "z": "3572c39984e6901e",
        "name": "Line Chart",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 300,
        "wires": [
            [
                "e284de4.fc6a12"
            ]
        ]
    },
    {
        "id": "4bfe6190.6619c",
        "type": "function",
        "z": "3572c39984e6901e",
        "name": "Line Chart 3 series",
        "func": "function getGetOrdinal(n) {\n    var s=[\"th\",\"st\",\"nd\",\"rd\"],\n    v=n%100;\n    return n+(s[(v-20)%10]||s[v]||s[0]);\n }\n\nvar dL = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\nvar dS = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\nvar mL = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nvar mS = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n\nlet now = new Date();\n\n// Create the chart object\nlet m = {\n    type: 'line',\n    options: {\n        title: {\n            display:true,\n            text:'Line chart example'\n        },\n        legend: {\n            display:false\n        },\n        chartArea: {\n            backgroundColor: 'white'\n        },\n        plugins: {\n            datalabels: {\n                display:true,\n                backgroundColor:'whitesmoke',\n                borderRadius:1,\n                padding:1,\n                align: 'right',\n                anchor: function(context) {\n                    //node.send({debug:{dataindex:context.dataIndex}});\n                    if (context.dataIndex == context.dataset.data.length - 1) {\n                        return 'center';\n                    } else {\n                        return 'end';\n                    }\n                },\n                offset:8,\n                formatter:function(value) {\n                    return value > 0 ? value.toLocaleString() : '';\n                }\n            }\n        }\n    },\n    data: {\n        labels:[],\n        datasets: [\n            {\n                label:\"Series 1\",\n                borderColor:'rgba(184, 163, 57,0.8)',\n                backgroundColor:'rgba(184, 163, 57,0.1)',\n                fill:true,\n                data:[]\n            },\n            {\n                label:\"Series 2\",\n                borderColor:'rgba(57,97,184,0.8)',\n                fill:false,\n                data:[]\n            },\n            {\n                label:\"Series 3\",\n                borderColor:'rgba(184, 57, 93,0.8)',\n                fill:false,\n                data:[]\n            }\n        ]\n    }\n}\n\nlet l = Math.floor(Math.random()*50);\nlet k = l;\nlet j = l;\n\nfor (let i=0; i<10; i++) {\n    l = l + Math.floor(Math.random()*6)-3;\n    m.data.datasets[0].data.push(l);\n    k = k + Math.floor(Math.random()*6)-3;\n    m.data.datasets[1].data.push(k);\n    j = j + Math.floor(Math.random()*6)-3;\n    m.data.datasets[2].data.push(j);\n    var d = new Date();\n    d.setTime(now.getTime()-1000*60*60*24*(10-i));\n    m.data.labels.push(dL[d.getDay()]+\", \"+getGetOrdinal(d.getDate()));\n}\n\nmsg.payload = m;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 380,
        "wires": [
            [
                "c86b69d5.68d2d8"
            ]
        ]
    },
    {
        "id": "13c25f21.9a6aa1",
        "type": "inject",
        "z": "3572c39984e6901e",
        "name": "Line Chart",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 380,
        "wires": [
            [
                "4bfe6190.6619c"
            ]
        ]
    },
    {
        "id": "d1ca5ba9.da1338",
        "type": "function",
        "z": "3572c39984e6901e",
        "name": "Doughnut example",
        "func": "function getGetOrdinal(n) {\n    var s=[\"th\",\"st\",\"nd\",\"rd\"],\n    v=n%100;\n    return n+(s[(v-20)%10]||s[v]||s[0]);\n }\n\nvar dL = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\nvar dS = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\nvar mL = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nvar mS = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n\nlet now = new Date();\n\n// Create the chart object\nlet m = {\n    type: 'pie',\n    options: {\n        cutoutPercentage: 50,\n        title: {\n            display:true,\n            text:'Doughnut chart example'\n        },\n        legend: {\n            display:false\n        },\n        chartArea: {\n            backgroundColor: 'white'\n        },\n        plugins: {\n            datalabels: {\n                display:true,\n                backgroundColor:'whitesmoke',\n                borderRadius:1,\n                padding:1,\n                align: 'right',\n                anchor: function(context) {\n                    //node.send({debug:{dataindex:context.dataIndex}});\n                    if (context.dataIndex == context.dataset.data.length - 1) {\n                        return 'center';\n                    } else {\n                        return 'end';\n                    }\n                },\n                offset:8,\n                formatter:function(value, context) {\n                    return value > 0 ? context.chart.data.labels[context.dataIndex]+\": \"+value.toLocaleString() : '';\n                }\n            }\n        }\n    },\n    data: {\n        labels:[],\n        datasets: [\n            {\n                backgroundColor:[],\n                borderColor:\"white\",\n                borderWidth:2,\n                data:[]\n            }\n        ]\n    }\n}\n\n\n\nfor (let i=0; i<12; i++) {\n    m.data.datasets[0].data.push(Math.floor(Math.random()*50));\n    m.data.datasets[0].backgroundColor.push(\"hsl(\"+i*360/12+\",100%,50%)\");\n    m.data.labels.push(mL[i]);\n}\n\nmsg.payload = m;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 350,
        "y": 460,
        "wires": [
            [
                "4af5b6dc.e60d28"
            ]
        ]
    },
    {
        "id": "493ec7a4.b98fe8",
        "type": "inject",
        "z": "3572c39984e6901e",
        "name": "Line Chart",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 460,
        "wires": [
            [
                "d1ca5ba9.da1338"
            ]
        ]
    },
    {
        "id": "fac75646.ed0358",
        "type": "change",
        "z": "3572c39984e6901e",
        "name": "Set up the email",
        "rules": [
            {
                "t": "set",
                "p": "attachments",
                "pt": "msg",
                "to": "{}",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "attachments.content",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "attachments.filename",
                "pt": "msg",
                "to": "chart.jpg",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Chart example",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "This is the auto generated chart",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "to",
                "pt": "msg",
                "to": "<to_email_address>",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "12d010c4.fc8e3f",
        "type": "chart-image",
        "z": "3572c39984e6901e",
        "name": "",
        "width": 500,
        "height": "500",
        "x": 550,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "f7e11042.f96d9",
        "type": "chart-image",
        "z": "3572c39984e6901e",
        "name": "",
        "width": 500,
        "height": "500",
        "x": 550,
        "y": 300,
        "wires": [
            [
                "fac75646.ed0358"
            ]
        ]
    },
    {
        "id": "c86b69d5.68d2d8",
        "type": "chart-image",
        "z": "3572c39984e6901e",
        "name": "",
        "width": 500,
        "height": "500",
        "x": 550,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "4af5b6dc.e60d28",
        "type": "chart-image",
        "z": "3572c39984e6901e",
        "name": "",
        "width": 500,
        "height": "500",
        "x": 550,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "657bef1570c223b8",
        "type": "inject",
        "z": "d3f49513ee177da2",
        "name": "Init",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "change",
        "payload": "/home/NodeRed/json",
        "payloadType": "str",
        "x": 1170,
        "y": 640,
        "wires": [
            [
                "b541a4c9d0c4c88b"
            ]
        ]
    },
    {
        "id": "c8b72a9645297de5",
        "type": "ui_button",
        "z": "d3f49513ee177da2",
        "name": "",
        "group": "9848c7d7e57dbdee",
        "order": 2,
        "width": 4,
        "height": 2,
        "passthru": true,
        "label": "Refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "refresh",
        "payload": "/home/NodeRed/json",
        "payloadType": "str",
        "topic": "change",
        "topicType": "str",
        "x": 1180,
        "y": 720,
        "wires": [
            [
                "b541a4c9d0c4c88b"
            ]
        ]
    },
    {
        "id": "c567b2b02f6d2abf",
        "type": "ui_template",
        "z": "d3f49513ee177da2",
        "group": "9848c7d7e57dbdee",
        "name": "",
        "order": 1,
        "width": "20",
        "height": "8",
        "format": "<div ng-bind-html=\"msg.payload\" height=\"400\" style=\"height: 400px;\"><br/>\n</div>\n<style>\n/* Applique des styles aux liens */\na[href] {\ncolor: #d93347; /* Couleur du lien */\ntext-decoration: none; /* Pas de soulignement */\n}\n\n/* Applique des styles au survol des liens */\na[href]:hover {\ncolor: #cb0505; /* Couleur du lien au survol */\ntext-decoration: underline; /* Soulignement au survol */\n}\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 2020,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "87a0a41c8c8d3310",
        "type": "template",
        "z": "d3f49513ee177da2",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<table width=\"100%\">\n    <tr><th>Nom de Fichier</th><th>Taille</th><th>Créer</th><th>Changer</th></tr>\n    {{#payload}}\n        <tr>\n            <td><a href=\"/download?filename={{name}}\" target=\"blank\">{{fname}}</a></td>\n            <td>{{stat.size}}</td>\n            <td>{{stat.created}}</td>\n            <td>{{stat.changed}}</td>\n        </tr>\n    {{/payload}}\n</table>\n",
        "output": "str",
        "x": 2000,
        "y": 720,
        "wires": [
            [
                "c567b2b02f6d2abf"
            ]
        ]
    },
    {
        "id": "e82612444b7ffefa",
        "type": "function",
        "z": "d3f49513ee177da2",
        "name": "Convert timestamps",
        "func": "// Fonction pour formater une date en fonction de la timezone de Zurich\nfunction formatToZurichTimezone(date) {\n    var options = {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n        timeZone: 'Europe/Zurich'\n    };\n    return new Intl.DateTimeFormat('fr-CH', options).format(date);\n}\n\n// Parcourir chaque élément dans le tableau \"payload\" du message\nfor (var i = 0; i < msg.payload.length; i++) {\n    // Convertir les propriétés de date/heure dans l'objet \"stat\" au format de Zurich\n    msg.payload[i].stat.created = formatToZurichTimezone(new Date(msg.payload[i].stat.created));\n    msg.payload[i].stat.changed = formatToZurichTimezone(new Date(msg.payload[i].stat.changed));\n    msg.payload[i].stat.accessed = formatToZurichTimezone(new Date(msg.payload[i].stat.accessed));\n    msg.payload[i].stat.statusChanged = formatToZurichTimezone(new Date(msg.payload[i].stat.statusChanged));\n\n    // Extraire le nom de fichier à partir de la propriété \"name\" et mettre à jour \"fname\"\n    msg.payload[i].fname = msg.payload[i].name.replace(/^.*(\\\\|\\/|\\:)/, '');\n}\n\nreturn msg; // Renvoyer le message modifié\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1800,
        "y": 720,
        "wires": [
            [
                "87a0a41c8c8d3310"
            ]
        ]
    },
    {
        "id": "ec2e1b03b620f090",
        "type": "http in",
        "z": "d3f49513ee177da2",
        "name": "",
        "url": "/download",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1260,
        "y": 780,
        "wires": [
            [
                "078656573a2256d9"
            ]
        ]
    },
    {
        "id": "5f87111e0da70820",
        "type": "http response",
        "z": "d3f49513ee177da2",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2050,
        "y": 780,
        "wires": []
    },
    {
        "id": "078656573a2256d9",
        "type": "function",
        "z": "d3f49513ee177da2",
        "name": "Get the file name",
        "func": "msg.filename = msg.req.query.filename;\nmsg.contentdisposition = \"attachment; filename=\\\"\" + msg.req.query.filename.replace(/^.*(\\\\|\\/|\\:)/, '') + \"\\\"\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1510,
        "y": 780,
        "wires": [
            [
                "cff08753494e0ec5"
            ]
        ],
        "outputLabels": [
            "Folder selected",
            "File selected"
        ]
    },
    {
        "id": "cff08753494e0ec5",
        "type": "file in",
        "z": "d3f49513ee177da2",
        "name": "",
        "filename": "",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 1700,
        "y": 780,
        "wires": [
            [
                "c8c1de185f0a1ac0"
            ]
        ]
    },
    {
        "id": "c8c1de185f0a1ac0",
        "type": "change",
        "z": "d3f49513ee177da2",
        "name": "Set Headers",
        "rules": [
            {
                "t": "set",
                "p": "headers",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "headers.content-type",
                "pt": "msg",
                "to": "text/csv",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "headers.Content-Disposition",
                "pt": "msg",
                "to": "contentdisposition",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1870,
        "y": 780,
        "wires": [
            [
                "5f87111e0da70820"
            ]
        ]
    },
    {
        "id": "b541a4c9d0c4c88b",
        "type": "function",
        "z": "d3f49513ee177da2",
        "name": "Folder handling",
        "func": "// Récupérer la valeur de la variable \"folder\" depuis le contexte\nlet folder = context.get(\"folder\");\n// Si la variable \"folder\" n'est pas définie, l'initialiser avec \"/\"\nif (folder === undefined) {\n    folder = \"/\";\n    context.set(\"folder\", folder); // Enregistrer la valeur dans le contexte\n}\n\n// Récupérer la valeur de la variable \"hidden\" depuis le contexte\nlet hidden = context.get(\"hidden\");\n// Si la variable \"hidden\" n'est pas définie, l'initialiser avec \"false\"\nif (hidden === undefined) {\n    hidden = false;\n    context.set(\"hidden\", hidden); // Enregistrer la valeur dans le contexte\n}\n\n// Si le sujet du message est \"up\"\nif (msg.topic === \"up\") {\n    var the_arr = folder.split('/');\n    the_arr.pop(); // Supprimer le dernier élément du tableau\n    folder = the_arr.join('/'); // Rejoindre les éléments du tableau pour former le nouveau chemin\n    context.set(\"folder\", folder); // Enregistrer le nouveau chemin dans le contexte\n}\n\n// Si le sujet du message est \"change\"\nif (msg.topic === \"change\") {\n    folder = msg.payload; // Mettre à jour la valeur de \"folder\" avec le contenu du champ \"payload\"\n    context.set(\"folder\", folder); // Enregistrer la nouvelle valeur dans le contexte\n}\n\n// Si le sujet du message est \"hidden\"\nif (msg.topic === \"hidden\") {\n    hidden = msg.payload; // Mettre à jour la valeur de \"hidden\" avec le contenu du champ \"payload\"\n    context.set(\"hidden\", hidden); // Enregistrer la nouvelle valeur dans le contexte\n}\n\n// Construire un objet JSON contenant les valeurs actuelles de \"folder\" et \"hidden\"\nmsg.payload = { \"start\": folder, \"hidden\": hidden };\n\nreturn msg; // Renvoyer le message modifié\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 720,
        "wires": [
            [
                "5deb3f7a069e94db"
            ]
        ]
    },
    {
        "id": "5deb3f7a069e94db",
        "type": "fs-file-lister",
        "z": "d3f49513ee177da2",
        "name": "Files",
        "start": "/home/pi",
        "pattern": "*.*",
        "folders": "*",
        "hidden": false,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": true,
        "showWarnings": false,
        "x": 1570,
        "y": 720,
        "wires": [
            [
                "e82612444b7ffefa"
            ]
        ]
    },
    {
        "id": "61ea260f9c0b6ef6",
        "type": "link in",
        "z": "d3f49513ee177da2",
        "name": "From_PDF",
        "links": [
            "a74b27989ec4408a",
            "9281f0402caa9ee5",
            "9c0192ec2aea8a29",
            "547f9ffe327b1d40"
        ],
        "x": 1085,
        "y": 720,
        "wires": [
            [
                "c8b72a9645297de5"
            ]
        ]
    },
    {
        "id": "1ff3f3ba1cab43a1",
        "type": "ui_template",
        "z": "d3f49513ee177da2",
        "group": "7db53a0c4211bca9",
        "name": "Upload Btn",
        "order": 8,
        "width": 8,
        "height": 1,
        "format": "<body>\n  <!-- Bouton pour déclencher l'importation des données -->\n  <button class=\"md-raised md-button md-ink-ripple\" onclick=\"importerDonnees()\">Télécharger</button>\n\n  <script>\n    // Conservez la portée originale\n    let restaureScope = scope;\n\n    // Fonction pour importer les données\n    function importerDonnees() {\n      // Créez un élément d'entrée de type fichier\n      let input = document.createElement('input');\n      input.type = 'file';\n      input.id = 'boutonRestaurer';\n\n      // Définissez l'événement onchange\n      input.onchange = _ => {\n        // Obtenez le nom du fichier choisi\n        let nomFichier = input.files[0].name;\n\n        // Vous pouvez utiliser cette méthode pour obtenir le fichier et effectuer les opérations respectives\n        let lecteurFichier = new FileReader();\n        lecteurFichier.readAsText(input.files[0]);\n\n        // Gérez la fin du chargement du fichier\n        lecteurFichier.onloadend = function(event){\n          // Envoyez les données lues et le nom du fichier à la portée originale\n          restaureScope.send({payload: event.target.result});\n        };\n      };\n\n      // Déclenchez le clic sur l'élément d'entrée de type fichier\n      input.click();\n    }\n  </script>\n</body>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 270,
        "y": 940,
        "wires": [
            [
                "f08e7523356969c2"
            ]
        ]
    },
    {
        "id": "e34690a6ebc525bd",
        "type": "comment",
        "z": "d3f49513ee177da2",
        "name": "Afffichage",
        "info": "",
        "x": 1180,
        "y": 600,
        "wires": []
    },
    {
        "id": "31fb5f86f7c6dc37",
        "type": "comment",
        "z": "d3f49513ee177da2",
        "name": "OUT",
        "info": "",
        "x": 290,
        "y": 760,
        "wires": []
    },
    {
        "id": "45787365124bf1fc",
        "type": "link in",
        "z": "d3f49513ee177da2",
        "name": "JSON",
        "links": [
            "41aa33d6cb459a40",
            "96a8020826f4562b",
            "c89add291df1506b",
            "49896466c0e53f77",
            "b163b8b1f5f05f1b"
        ],
        "x": 255,
        "y": 800,
        "wires": [
            [
                "3a258b624415b171"
            ]
        ]
    },
    {
        "id": "5b5eadd9fd68decf",
        "type": "comment",
        "z": "d3f49513ee177da2",
        "name": "IN",
        "info": "",
        "x": 290,
        "y": 900,
        "wires": []
    },
    {
        "id": "3a258b624415b171",
        "type": "join",
        "z": "d3f49513ee177da2",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 370,
        "y": 800,
        "wires": [
            [
                "54ac4d484482dfab"
            ]
        ]
    },
    {
        "id": "54ac4d484482dfab",
        "type": "change",
        "z": "d3f49513ee177da2",
        "name": "PrepareJson",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "json",
                "tot": "str"
            },
            {
                "t": "delete",
                "p": "cmd",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "out",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "delay",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "filepath",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "originalDelay",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "use",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "moyenne",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "_event",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "qos",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "retain",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "_topic",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "rc",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "jsonFiles",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "filename",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "_msgid",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "socketid",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "original",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 800,
        "wires": [
            [
                "c6cd1c2172602ac5"
            ]
        ]
    },
    {
        "id": "c6cd1c2172602ac5",
        "type": "json",
        "z": "d3f49513ee177da2",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 710,
        "y": 800,
        "wires": [
            [
                "506d52becf1f6c24"
            ]
        ]
    },
    {
        "id": "506d52becf1f6c24",
        "type": "file",
        "z": "d3f49513ee177da2",
        "name": "",
        "filename": "graphPath.json.complet",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 880,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "dfb06f1dcafba65d",
        "type": "function",
        "z": "d3f49513ee177da2",
        "name": "Gatling line chart Time_Response",
        "func": "// Création du graphique\nvar chartData = {\n    \n    type: 'line', // Utilisez un graphique de type \"line\"\n    options: {\n        scales: {\n            yAxes: [{\n                ticks: {\n                    fontSize: 30\n                }\n            }],\n            xAxes: [{\n                ticks: {\n                    fontSize: 30\n                }\n            }]\n        },\n        dataset :{\n            labels: {\n                // This more specific font property overrides the global property\n                fontSize: 30,\n                fontColor: 'black',\n                family: 'Arial'\n            },\n            font: {\n                size: 30\n            },\n        },\n        title: {\n            labels: {\n                // This more specific font property overrides the global property\n                fontSize: 30,\n                fontColor: 'black',\n                family: 'Arial'\n            },\n            font: {\n                size: 30\n            },\n            display: true,\n            text: 'Comparaison des performances', // Titre du graphique,\n            fontSize: 40 \n        },\n        legend: {\n            labels: {\n                // This more specific font property overrides the global property\n                fontSize: 30,\n                fontColor: 'black',\n                family: 'Arial'\n            },\n            font: {\n                size: 30\n            },\n            display: true // Affichez la légende du graphique\n        },\n        chartArea: {\n            backgroundColor: '#d3d7dd' // Couleur de fond du graphique\n        },\n        plugins: {\n            datalabels: {\n                display: false // Désactivez l'affichage des étiquettes de données\n            }\n        }\n    },\n    data: {\n        labels: msg.payload.Log.timeResponse.data.labels,\n\n        datasets: msg.payload.Log.timeResponse.data.datasets,\n    }\n};\n\nmsg.payload = chartData; // Attribuez les données du graphique au message\nmsg.topic = \"CompletGatling\";\nreturn msg; // Renvoyez le message\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 980,
        "wires": [
            [
                "869c241009cb9c6b"
            ]
        ]
    },
    {
        "id": "869c241009cb9c6b",
        "type": "chart-image",
        "z": "d3f49513ee177da2",
        "name": "",
        "width": "1920",
        "height": "1920",
        "x": 1230,
        "y": 980,
        "wires": [
            [
                "14d351c26ac8145d",
                "397d0c57cd843424"
            ]
        ]
    },
    {
        "id": "14d351c26ac8145d",
        "type": "file",
        "z": "d3f49513ee177da2",
        "name": "Gatling Complet",
        "filename": "graphPath.gatling.complet",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1460,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "100ec7b19b085f9e",
        "type": "chart-image",
        "z": "d3f49513ee177da2",
        "name": "",
        "width": "1920",
        "height": "1920",
        "x": 1170,
        "y": 1180,
        "wires": [
            [
                "4a7112209456ff1b",
                "397d0c57cd843424"
            ]
        ]
    },
    {
        "id": "4a7112209456ff1b",
        "type": "file",
        "z": "d3f49513ee177da2",
        "name": "volt.complet",
        "filename": "graphPath.volt.complet",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1450,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "7597e5388ec322ac",
        "type": "chart-image",
        "z": "d3f49513ee177da2",
        "name": "",
        "width": "1920",
        "height": "1920",
        "x": 1170,
        "y": 1220,
        "wires": [
            [
                "71f78d0972432f07",
                "397d0c57cd843424"
            ]
        ]
    },
    {
        "id": "71f78d0972432f07",
        "type": "file",
        "z": "d3f49513ee177da2",
        "name": "volt.complet",
        "filename": "graphPath.nidus.complet",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1450,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "b9a352636a61129d",
        "type": "function",
        "z": "d3f49513ee177da2",
        "name": "Nidus Line Chart",
        "func": "// Données reçues du flux précédent\nvar rawData = msg.payload.nidus;\nvar delayInSeconds = msg.payload.gatling.Original.time; // Conversion en secondes\nmsg.topic = \"NidusLineChart\";\n// Extraction des données nécessaires\nvar nidusCpuData = rawData[\"nidus/benchmark/cpu\"];\nvar nidusRamData = rawData[\"nidus/benchmark/ram\"];\nvar nidusTempData = rawData[\"nidus/benchmark/temp\"];\n\n// Création du graphique\nvar chartData = {\n    type: 'line',  // Changement du type de graphique en \"line\"\n    options: {\n        scales: {\n            yAxes: [{\n                ticks: {\n                    fontSize: 30\n                }\n            }],\n            xAxes: [{\n                ticks: {\n                    fontSize: 30\n                }\n            }]\n        },\n        title: {\n            display: true,\n            text: 'Comparaison des performances',\n            fontSize: 40 // Définir la taille de la police ici\n        },\n        legend: {\n            display: true,\n            labels: {\n                // This more specific font property overrides the global property\n                fontSize: 30,\n                fontColor: 'black',\n                family: 'Arial'\n            },\n            font: {\n                size: 30\n            },\n        },\n        chartArea: {\n            backgroundColor: '#d3d7dd'\n        },\n        plugins: {\n            datalabels: {\n                display: false  // Désactiver l'affichage des étiquettes de données\n            }\n        }\n    },\n    data: {\n        labels: Array.from({ length: nidusCpuData.length }, (_, i) => {\n            // Calculer le délai réel entre chaque valeur en millisecondes\n            var realDelay = (msg.payload.gatling.Original.time*1000) / (nidusCpuData.length - 1);\n\n            // Calculer le temps en millisecondes à partir de l'index\n            var timeMillis = i * realDelay;\n\n            // Convertir le temps en minutes et secondes\n            var minutes = Math.floor(timeMillis / 60000); // 60000 millisecondes équivalent à 1 minute\n            var seconds = ((timeMillis % 60000) / 1000).toFixed(0);\n\n            // Créer le label en fonction de la durée\n            if (minutes === 0) {\n                return seconds + ' s'; // Temps en secondes si inférieur à 1 minute\n            } else {\n                return minutes + ' min ' + seconds + ' s'; // Temps en minute:secondes si supérieur à 1 minute\n            }\n        }),\n\n\n        datasets: [\n            \n            {\n                label: \"Nidus CPU\",\n                borderColor: 'rgba(255, 69, 0, 1)',\n                fill: false,\n                data: nidusCpuData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Nidus RAM\",\n                borderColor: 'rgba(255, 165, 0, 1)',\n                fill: false,\n                data: nidusRamData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Nidus Temp\",\n                borderColor: 'rgba(255, 0, 0, 1)',\n                fill: false,\n                data: nidusTempData,\n                pointRadius: 0,\n            }\n        ]\n    }\n};\n\nmsg.payload = chartData;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 1220,
        "wires": [
            [
                "7597e5388ec322ac"
            ]
        ]
    },
    {
        "id": "915126411aa8e399",
        "type": "function",
        "z": "d3f49513ee177da2",
        "name": "Volt Line Chart",
        "func": "// Données reçues du flux précédent\nvar rawData = msg.payload.volt;\nvar delayInSeconds = msg.payload.gatling.Original.time; // Conversion en secondes\nmsg.topic = \"VoltLineChart\";\n// Extraction des données nécessaires\nvar voltCpuData = rawData[\"volt/benchmark/cpu\"];\nvar voltRamData = rawData[\"volt/benchmark/ram\"];\nvar voltTempData = rawData[\"volt/benchmark/temp\"];\n\n\n// Création du graphique\nvar chartData = {\n    type: 'line',  // Changement du type de graphique en \"line\"\n    options: {\n        scales: {\n            yAxes: [{\n                ticks: {\n                    fontSize: 30\n                }\n            }],\n            xAxes: [{\n                ticks: {\n                    fontSize: 30\n                }\n            }]\n        },\n        title: {\n            display: true,\n            text: 'Comparaison des performances',\n            fontSize: 40 \n        },\n        legend: {\n            display: true,\n            labels: {\n                // This more specific font property overrides the global property\n                fontSize: 30,\n                fontColor: 'black',\n                family: 'Arial'\n            },\n            font: {\n                size: 30\n            },\n        },\n        chartArea: {\n            backgroundColor: '#d3d7dd'\n        },\n        plugins: {\n            datalabels: {\n                display: false  // Désactiver l'affichage des étiquettes de données\n            }\n        }\n    },\n    data: {\n        labels: Array.from({ length: voltCpuData.length }, (_, i) => {\n            // Calculer le délai réel entre chaque valeur en millisecondes\n            var realDelay = (msg.payload.gatling.Original.time*1000) / (voltCpuData.length - 1);\n\n            // Calculer le temps en millisecondes à partir de l'index\n            var timeMillis = i * realDelay;\n\n            // Convertir le temps en minutes et secondes\n            var minutes = Math.floor(timeMillis / 60000); // 60000 millisecondes équivalent à 1 minute\n            var seconds = ((timeMillis % 60000) / 1000).toFixed(0);\n\n            // Créer le label en fonction de la durée\n            if (minutes === 0) {\n                return seconds + ' s'; // Temps en secondes si inférieur à 1 minute\n            } else {\n                return minutes + ' min ' + seconds + ' s'; // Temps en minute:secondes si supérieur à 1 minute\n            }\n        }),datasets: [\n            {\n                label: \"Volt CPU\",\n                borderColor: 'rgba(0, 128, 255, 1)',  // Couleur de la ligne (couleur froide pour Volt)\n                fill: false,  // Désactiver le remplissage sous la ligne\n                data: voltCpuData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Volt RAM\",\n                borderColor: 'rgba(0, 255, 128, 1)',\n                fill: false,\n                data: voltRamData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Volt Temp\",\n                borderColor: 'rgba(0, 173, 0, 1)',\n                fill: false,\n                data: voltTempData,\n                pointRadius: 0,\n            },\n\n        ]\n    }\n};\n\nmsg.payload = chartData;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 1180,
        "wires": [
            [
                "100ec7b19b085f9e"
            ]
        ]
    },
    {
        "id": "bbd717e69ecd1e77",
        "type": "change",
        "z": "d3f49513ee177da2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "complete",
                "pt": "msg",
                "to": "true",
                "tot": "bool",
                "dc": true
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "ChartComplete",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 640,
        "y": 1360,
        "wires": [
            [
                "252db462cdba8e38"
            ]
        ]
    },
    {
        "id": "d13823ca0a4f00a9",
        "type": "join",
        "z": "d3f49513ee177da2",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "6",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 690,
        "y": 1320,
        "wires": [
            [
                "bbd717e69ecd1e77"
            ]
        ]
    },
    {
        "id": "86e610107a77718e",
        "type": "function",
        "z": "d3f49513ee177da2",
        "name": "Watt Line Chart",
        "func": "// Données reçues du flux précédent\nvar rawData = msg.payload.Watt;\nvar delayInSeconds = msg.delay / 1000; // Conversion en secondes\n\n// Extraction des données nécessaires\nvar voltWatt = rawData;\n\n// Fonction pour calculer la moyenne mobile\nfunction movingAverage(data, windowSize) {\n    var smoothedData = [];\n    for (var i = 0; i < data.length; i++) {\n        var start = Math.max(0, i - Math.floor(windowSize / 2));\n        var end = Math.min(data.length - 1, i + Math.floor(windowSize / 2));\n        var sum = 0;\n        for (var j = start; j <= end; j++) {\n            sum += data[j];\n        }\n        smoothedData.push(sum / (end - start + 1));\n    }\n    return smoothedData;\n}\n\n// Appliquer la moyenne mobile avec une fenêtre de 5 échantillons (vous pouvez ajuster la taille de la fenêtre si nécessaire)\nvar smoothedVoltWatt = movingAverage(voltWatt, 5);\n\n// Création du graphique\nvar chartData = {\n    type: 'line',  // Changement du type de graphique en \"line\"\n    options: {\n        scales: {\n            yAxes: [{\n                ticks: {\n                    fontSize: 30\n                }\n            }],\n            xAxes: [{\n                ticks: {\n                    fontSize: 30\n                }\n            }]\n        },\n        title: {\n            display: true,\n            text: 'Comparaison des performances',\n            fontSize: 40\n        },\n        legend: {\n            display: true,\n            labels: {\n                // This more specific font property overrides the global property\n                fontSize: 30,\n                fontColor: 'black',\n                family: 'Arial'\n            },\n            font: {\n                size: 30\n            },\n        },\n        chartArea: {\n            backgroundColor: '#d3d7dd'\n        },\n        plugins: {\n            datalabels: {\n                display: false  // Désactiver l'affichage des étiquettes de données\n            }\n        }\n    },\n    data: {\n        labels: Array.from({ length: smoothedVoltWatt.length }, (_, i) => {\n            // Calculer le délai réel entre chaque valeur en millisecondes\n            var realDelay = msg.delay / (smoothedVoltWatt.length - 1);\n\n            // Calculer le temps en millisecondes à partir de l'index\n            var timeMillis = i * realDelay;\n\n            // Convertir le temps en minutes et secondes\n            var minutes = Math.floor(timeMillis / 60000); // 60000 millisecondes équivalent à 1 minute\n            var seconds = ((timeMillis % 60000) / 1000).toFixed(0);\n\n            // Créer le label en fonction de la durée\n            if (minutes === 0) {\n                return seconds + ' s'; // Temps en secondes si inférieur à 1 minute\n            } else {\n                return minutes + ' min ' + seconds + ' s'; // Temps en minute:secondes si supérieur à 1 minute\n            }\n        }),\n        datasets: [\n            {\n                label: \"Volt Watt\",\n                borderColor: 'rgba(0, 255, 255, 1)',\n                fill: false,\n                data: smoothedVoltWatt, // Utilisation des données lissées\n                pointRadius: 0,\n            },\n        ]\n    }\n};\n\nmsg.payload = chartData;\nmsg.topic = \"Watt\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 1100,
        "wires": [
            [
                "b1f4d45fe3421d44"
            ]
        ]
    },
    {
        "id": "b1f4d45fe3421d44",
        "type": "chart-image",
        "z": "d3f49513ee177da2",
        "name": "",
        "width": "1920",
        "height": "1920",
        "x": 1230,
        "y": 1100,
        "wires": [
            [
                "4c765b603a077965",
                "397d0c57cd843424"
            ]
        ]
    },
    {
        "id": "4c765b603a077965",
        "type": "file",
        "z": "d3f49513ee177da2",
        "name": "volt.watt",
        "filename": "graphPath.volt.watt",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1440,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "263f4d491ea23be3",
        "type": "chart-image",
        "z": "d3f49513ee177da2",
        "name": "",
        "width": "1920",
        "height": "1920",
        "x": 1230,
        "y": 940,
        "wires": [
            [
                "608d5f10238b842c",
                "397d0c57cd843424"
            ]
        ]
    },
    {
        "id": "a21f8150f8bd9c39",
        "type": "function",
        "z": "d3f49513ee177da2",
        "name": "Gatling bar chart",
        "func": "// Données reçues du flux précédent\nvar rawData = msg.payload.gatling.Global;  // Utilisez les données de msg.payload.gatling.Global\nmsg.topic = \"GatlingPass\"; // Définir le sujet du message\n\n// Extraction des données nécessaires\nvar groupData = [\n    rawData.group1,\n    rawData.group2,\n    rawData.group3,\n    rawData.group4\n];\n\nvar labels = [];\nvar percentages = [];\n\n// Parcourir les données des groupes et extraire les informations\nfor (var i = 1; i <= groupData.length; i++) {\n    var groupName = \"group\" + i;\n    labels.push(rawData[groupName].htmlName);\n    percentages.push(rawData[groupName].percentage);\n}\n\n// Création du graphique\nvar chartData = {\n    type: 'bar',  // Utiliser un graphique de type \"bar\"\n    options: {\n        title: {\n            display: true,\n            text: 'Répartition des performances par groupe', // Titre du graphique,\n            fontSize: 40 \n        },\n        legend: {\n            display: true,\n            labels: {\n                // This more specific font property overrides the global property\n                fontSize: 30,\n                fontColor: 'black',\n                family: 'Arial'\n            },\n            font: {\n                size: 30\n            },\n        },\n        chartArea: {\n            backgroundColor: '#d3d7dd' // Couleur de fond du graphique\n        },\n        scales: {\n            x: {\n                beginAtZero: true,\n                title: {\n                    display: true,\n                    text: 'Groupes' // Titre de l'axe des X\n                }\n            },\n\n            xAxes: [{\n                ticks: {\n                    fontSize: 30\n                }\n            }],\n            y: {\n                beginAtZero: true,\n                title: {\n                    display: true,\n                    text: 'Pourcentage' // Titre de l'axe des Y\n                }\n            },\n            yAxes: [{\n                ticks: {\n                    fontSize: 30\n                }\n            }],\n        },\n        plugins: {\n            datalabels: {\n                anchor: 'end',\n                align: 'top',\n                formatter: function (value) {\n                    return value + '%';  // Ajouter le symbole de pourcentage à l'étiquette\n                }\n            }\n        }\n    },\n    data: {\n        labels: labels,\n        datasets: [\n            {\n                label: \"Pourcentage\", // Légende de l'ensemble de données\n                backgroundColor: 'rgba(0, 128, 255, 0.7)',  // Couleur du remplissage des barres\n                data: percentages,\n                \n            }\n        ]\n    }\n};\nmsg.payload = chartData; // Attribuer les données du graphique au message\nreturn msg; // Renvoyer le message\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 940,
        "wires": [
            [
                "263f4d491ea23be3"
            ]
        ]
    },
    {
        "id": "608d5f10238b842c",
        "type": "file",
        "z": "d3f49513ee177da2",
        "name": "gatling.pass",
        "filename": "graphPath.gatling.pass",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1450,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "d1aa4e393678f4fe",
        "type": "function",
        "z": "d3f49513ee177da2",
        "name": "Gatling line chart By_Seconds",
        "func": "// Création du graphique\nvar chartData = {\n    type: 'line', // Utilisez un graphique de type \"line\"\n    options: {\n        scales: {\n            yAxes: [{\n                ticks: {\n                    fontSize: 30\n                }\n            }],\n            xAxes: [{\n                ticks: {\n                    fontSize: 30\n                }\n            }]\n        },\n        dataset: {\n            labels: {\n                // This more specific font property overrides the global property\n                fontSize: 30,\n                fontColor: 'black',\n                family: 'Arial'\n            },\n            font: {\n                size: 30\n            },\n        },\n        title: {\n            labels: {\n                // This more specific font property overrides the global property\n                fontSize: 30,\n                fontColor: 'black',\n                family: 'Arial'\n            },\n            font: {\n                size: 30\n            },\n            display: true,\n            text: 'Nombre de Requêtes Simultanées', // Titre du graphique\n            fontSize: 40\n        },\n        legend: {\n            labels: {\n                // This more specific font property overrides the global property\n                fontSize: 30,\n                fontColor: 'black',\n                family: 'Arial'\n            },\n            font: {\n                size: 30\n            },\n            display: true // Affichez la légende du graphique\n        },\n        chartArea: {\n            backgroundColor: '#d3d7dd' // Couleur de fond du graphique\n        },\n        plugins: {\n            datalabels: {\n                display: false // Désactivez l'affichage des étiquettes de données\n            }\n        }\n    },\n    data: {\n        labels: msg.payload.Log.bySeconds.data.labels,\n        datasets: msg.payload.Log.bySeconds.data.datasets,\n    }\n};\n\nmsg.payload = chartData; // Attribuez les données du graphique au message\nmsg.topic = \"bySeconds\";\nreturn msg; // Renvoyez le message\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 1020,
        "wires": [
            [
                "9009ce6e4b27f54b"
            ]
        ]
    },
    {
        "id": "9009ce6e4b27f54b",
        "type": "chart-image",
        "z": "d3f49513ee177da2",
        "name": "",
        "width": "1920",
        "height": "1920",
        "x": 1230,
        "y": 1020,
        "wires": [
            [
                "ea6f8b3acc1ddf4e",
                "397d0c57cd843424"
            ]
        ]
    },
    {
        "id": "ea6f8b3acc1ddf4e",
        "type": "file",
        "z": "d3f49513ee177da2",
        "name": "Gatling RequeteParSeconde",
        "filename": "graphPath.gatling.bySeconds",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1500,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "6f17735ef4b1dfc3",
        "type": "pdfmake",
        "z": "d3f49513ee177da2",
        "name": "",
        "outputType": "base64",
        "inputProperty": "payload",
        "options": "{}",
        "outputProperty": "payload",
        "x": 1360,
        "y": 1380,
        "wires": [
            [
                "5cdf2fcdec6764ee"
            ]
        ]
    },
    {
        "id": "5cdf2fcdec6764ee",
        "type": "file",
        "z": "d3f49513ee177da2",
        "name": "",
        "filename": "filePath",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "base64",
        "x": 1500,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "22c625cf342e9e09",
        "type": "function",
        "z": "d3f49513ee177da2",
        "name": "Créer le contenue du fichier",
        "func": "//Formatage du ventilateur\nvar ventilateur = msg.payload.stats.original.gatling.Original.flow ? \"Ventilateur activé\" : \"Ventilateur non-activé\";\n// Formatage de la date de début\nvar timestamp = msg.payload.stats.original.gatling.Assertion.start;\n\n// Créez un objet Date à partir du timestamp\nvar date = new Date(timestamp);\n\n// Définissez le format de date souhaité\nvar options = {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit'\n};\n\n// Formatez la date en une chaîne de caractères\nvar formattedDate = date.toLocaleDateString(\"fr-FR\", options);\n\n\n// Création des données pour le rapport PDF\nmsg.payload = {\n    header: function (currentPage, pageCount, pageSize) {\n        return [\n            {\n                text: \"Tobler Cyril\", \n                alignment: \"left\",\n                fontSize: 10,\n                margin: [15, 10, 0, 0]\n            },\n            {\n                text: \"Nom du projet : Confuse T-Rex\", // Nom du projet\n                alignment: \"center\",\n                fontSize: 10,\n                margin: [0, 0, 0, 0]\n            }\n        ];\n    },\n    footer: function (currentPage, pageCount) {\n        return {\n            columns: [\n                {\n                    text: currentPage.toString() + \" / \" + pageCount, // Numéro de page actuel / Nombre total de pages\n                    alignment: \"left\",\n                    fontSize: 10,\n                    margin: [15, 0, 0, 10]\n                },\n                {\n                    text: new Date().toLocaleDateString(\"fr-FR\"), // Date actuelle au format français\n                    alignment: \"right\",\n                    fontSize: 10,\n                    margin: [0, 0, 15, 10]\n                }\n            ],\n            margin: [0, 0, 0, 10]\n        };\n    },\n    content: [\n        {\n            text: \"Rapport d'utilisation : \" + msg.payload.stats.original.gatling.Original.nameFile , // Titre du rapport\n            style: \"header\",\n            margin: [0, 10, 0, 0]\n        },\n        {\n            text: \"Les valeurs sont des moyennes sur les \" + Math.floor(msg.payload.stats.original.gatling.Original.time / 60) + \" dernières minutes\" // Informations sur les valeurs\n        }, \n        {\n            text: ventilateur\n        },\n        {\n            text: \"Nidus :\", // Section Nidus\n            style: \"header2\"\n        },\n        {\n            text: \"CPU :                 \" + msg.payload.stats.moyenne[\"nidus/benchmark/cpu\"] // Valeur CPU de Nidus\n        },\n        {\n            text: \"RAM :                 \" + msg.payload.stats.moyenne[\"nidus/benchmark/ram\"] // Valeur RAM de Nidus\n        },\n        {\n            text: \"Nombre de processus : \" + msg.payload.stats.moyenne[\"nidus/benchmark/processes\"] // Nombre de processus de Nidus\n        },\n        {\n            text: \"Température CPU :     \" + msg.payload.stats.moyenne[\"nidus/benchmark/temp\"] // Température CPU de Nidus\n        },\n        {\n            image: 'nidusImage', // Image de Nidus\n            width: 500,\n            pageBreak: 'after', // Saut de page après l'image\n        },\n        {\n            text: \"Volt\", // Section Volt\n            style: \"header2\"\n        },\n        {\n            text: \"CPU :                 \" + msg.payload.stats.moyenne[\"volt/benchmark/cpu\"] // Valeur CPU de Volt\n        },\n        {\n            text: \"RAM :                 \" + msg.payload.stats.moyenne[\"volt/benchmark/ram\"] // Valeur RAM de Volt\n        },\n        {\n            text: \"Nombre de processus : \" + msg.payload.stats.moyenne[\"volt/benchmark/processes\"] // Nombre de processus de Volt\n        },\n        {\n            text: \"Température CPU :     \" + msg.payload.stats.moyenne[\"volt/benchmark/temp\"] // Température CPU de Volt\n        },\n        {\n            text: \"MilliWatt :           \" + msg.payload.stats.moyenne[\"volt/benchmark/watt\"] // Valeur MilliWatt de Volt\n        },\n        {\n            image: 'voltImage', // Image de Volt\n            width: 500,\n        },\n        {\n            image: 'wattImage', // Image Watt de Volt\n            width: 500,\n            pageBreak: 'after', // Saut de page après l'image\n        },\n        {\n            text: \"Gatling\", // Section Gatling\n            style: \"header2\"\n        },\n        {\n            text: \"Nom de la simulation :                 \" + msg.payload.stats.original.gatling.Assertion.simulation // Nom de la simulation Gatling\n        },\n        {\n            text: \"Commencée :                            \" + formattedDate // Date de début de la simulation Gatling (à formater)\n        },\n        {\n            text: \"Nombre d'utilisateur :                 \" + msg.payload.stats.original.gatling.Original.user_gatling // Nom de la simulation Gatling\n        },\n        {\n            text: \"Durée prévu :                          \" + msg.payload.stats.original.gatling.Original.time/60 + \"Min\" // Nom de la simulation Gatling\n        },\n        {\n            image: 'gatlingImage', // Image Gatling\n            width: 500,\n        },\n        {\n            image: 'gatlingGraphComplete', // Image graphique complet Gatling\n            width: 500,\n        }, \n        {\n            image: 'gatlingGraphBySeconds', // Image graphique complet Gatling\n            width: 500,\n        },\n    ],\n    images: {\n        voltImage: 'data:image/png;base64,' + msg.payload.voltGraph.toString('base64'), // Utilisation du buffer pour l'image Volt\n        wattImage: 'data:image/png;base64,' + msg.payload.wattGraph.toString('base64'),  // Utilisation du buffer pour l'image Watt de Volt\n        nidusImage: 'data:image/png;base64,' + msg.payload.nidusGraph.toString('base64'),  // Utilisation du buffer pour l'image Nidus\n        gatlingImage: 'data:image/png;base64,' + msg.payload.gatlingGraph.toString('base64'),  // Utilisation du buffer pour l'image Gatling\n        gatlingGraphComplete: 'data:image/png;base64,' + msg.payload.gatlingGraphComplete.toString('base64'),  // Utilisation du buffer pour l'image Gatling\n        gatlingGraphBySeconds: 'data:image/png;base64,' + msg.payload.gatlingGraphBySeconds.toString('base64'),  // Utilisation du buffer pour l'image Gatling\n    },\n    styles: {\n        header: {\n            fontSize: 22,\n            bold: true,\n            margin: [0, 30, 0, 0]\n        },\n        header2: {\n            fontSize: 18,\n            bold: true,\n            margin: [0, 20, 0, 0]\n        }\n    }\n};\n\nreturn msg; // Renvoyer le message\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1560,
        "y": 1420,
        "wires": [
            [
                "6f17735ef4b1dfc3"
            ]
        ]
    },
    {
        "id": "72f5c909f4bcb85b",
        "type": "join",
        "z": "d3f49513ee177da2",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "7",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 1530,
        "y": 1460,
        "wires": [
            [
                "0737ad1af2982ea4"
            ]
        ]
    },
    {
        "id": "0737ad1af2982ea4",
        "type": "change",
        "z": "d3f49513ee177da2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Moyenne_Graph",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1350,
        "y": 1420,
        "wires": [
            [
                "22c625cf342e9e09"
            ]
        ]
    },
    {
        "id": "76466e9a1cc52f50",
        "type": "file in",
        "z": "d3f49513ee177da2",
        "name": "Read Graph Nidus Complet",
        "filename": "graphPath.nidus.complet",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1060,
        "y": 1660,
        "wires": [
            [
                "3eaa7af41d564753"
            ]
        ]
    },
    {
        "id": "3eaa7af41d564753",
        "type": "base64",
        "z": "d3f49513ee177da2",
        "name": "",
        "action": "str",
        "property": "msg.payload",
        "x": 1280,
        "y": 1660,
        "wires": [
            [
                "d5178dcb171387eb"
            ]
        ]
    },
    {
        "id": "0f72891b2e8d42c2",
        "type": "file in",
        "z": "d3f49513ee177da2",
        "name": "Read Graph Volt Complet",
        "filename": "graphPath.volt.complet",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1050,
        "y": 1540,
        "wires": [
            [
                "72f6938b9f63466f"
            ]
        ]
    },
    {
        "id": "72f6938b9f63466f",
        "type": "base64",
        "z": "d3f49513ee177da2",
        "name": "",
        "action": "str",
        "property": "msg.payload",
        "x": 1280,
        "y": 1540,
        "wires": [
            [
                "ed2f3693e7f1586a"
            ]
        ]
    },
    {
        "id": "ed2f3693e7f1586a",
        "type": "change",
        "z": "d3f49513ee177da2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "voltGraph",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1270,
        "y": 1500,
        "wires": [
            [
                "72f5c909f4bcb85b"
            ]
        ]
    },
    {
        "id": "d5178dcb171387eb",
        "type": "change",
        "z": "d3f49513ee177da2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "nidusGraph",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1270,
        "y": 1700,
        "wires": [
            [
                "72f5c909f4bcb85b"
            ]
        ]
    },
    {
        "id": "9879e350c33d3a1d",
        "type": "file in",
        "z": "d3f49513ee177da2",
        "name": "Read Graph Volt Watt",
        "filename": "graphPath.volt.watt",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1040,
        "y": 1580,
        "wires": [
            [
                "28427ab96bb5d5a5"
            ]
        ]
    },
    {
        "id": "28427ab96bb5d5a5",
        "type": "base64",
        "z": "d3f49513ee177da2",
        "name": "",
        "action": "str",
        "property": "msg.payload",
        "x": 1280,
        "y": 1580,
        "wires": [
            [
                "33c1e8713ed18441"
            ]
        ]
    },
    {
        "id": "33c1e8713ed18441",
        "type": "change",
        "z": "d3f49513ee177da2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "wattGraph",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1270,
        "y": 1620,
        "wires": [
            [
                "72f5c909f4bcb85b"
            ]
        ]
    },
    {
        "id": "08699e97519c8893",
        "type": "file in",
        "z": "d3f49513ee177da2",
        "name": "Read Graph Gatling",
        "filename": "graphPath.gatling.pass",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1040,
        "y": 1740,
        "wires": [
            [
                "c63f0262aaa2e2b9"
            ]
        ]
    },
    {
        "id": "c63f0262aaa2e2b9",
        "type": "base64",
        "z": "d3f49513ee177da2",
        "name": "",
        "action": "str",
        "property": "msg.payload",
        "x": 1280,
        "y": 1740,
        "wires": [
            [
                "1dfcf57ba781b7f9"
            ]
        ]
    },
    {
        "id": "1dfcf57ba781b7f9",
        "type": "change",
        "z": "d3f49513ee177da2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "gatlingGraph",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1290,
        "y": 1780,
        "wires": [
            [
                "72f5c909f4bcb85b"
            ]
        ]
    },
    {
        "id": "1f46fbef1d033a11",
        "type": "file in",
        "z": "d3f49513ee177da2",
        "name": "Read Graph Gatling",
        "filename": "graphPath.gatling.complet",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1040,
        "y": 1820,
        "wires": [
            [
                "eba0a4970303b541"
            ]
        ]
    },
    {
        "id": "eba0a4970303b541",
        "type": "base64",
        "z": "d3f49513ee177da2",
        "name": "",
        "action": "str",
        "property": "msg.payload",
        "x": 1280,
        "y": 1820,
        "wires": [
            [
                "15dd1eb019f2a0a3"
            ]
        ]
    },
    {
        "id": "15dd1eb019f2a0a3",
        "type": "change",
        "z": "d3f49513ee177da2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "gatlingGraphComplete",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1290,
        "y": 1860,
        "wires": [
            [
                "72f5c909f4bcb85b"
            ]
        ]
    },
    {
        "id": "609dd180b15cc79b",
        "type": "file in",
        "z": "d3f49513ee177da2",
        "name": "Read Graph Gatling",
        "filename": "graphPath.gatling.bySeconds",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1040,
        "y": 1900,
        "wires": [
            [
                "5f036f3323d36842"
            ]
        ]
    },
    {
        "id": "5f036f3323d36842",
        "type": "base64",
        "z": "d3f49513ee177da2",
        "name": "",
        "action": "str",
        "property": "msg.payload",
        "x": 1280,
        "y": 1900,
        "wires": [
            [
                "f8627b10fa13f8a3"
            ]
        ]
    },
    {
        "id": "f8627b10fa13f8a3",
        "type": "change",
        "z": "d3f49513ee177da2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "gatlingGraphBySeconds",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1290,
        "y": 1940,
        "wires": [
            [
                "72f5c909f4bcb85b"
            ]
        ]
    },
    {
        "id": "f08e7523356969c2",
        "type": "json",
        "z": "d3f49513ee177da2",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 450,
        "y": 940,
        "wires": [
            [
                "e2439077e9c87dc3",
                "7a2bb985f72fbbb2"
            ]
        ]
    },
    {
        "id": "a6b0af3f988bebce",
        "type": "inject",
        "z": "d3f49513ee177da2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Watt\":[513.996,475.4400000000001,480.28600000000006,386.495,380.638,405.395,409.10200000000003,658.1449999999999,424.776,481.612,382.2,472.88800000000003,406.285,390.87,523.25,352.412,382.368,527.805,519.137],\"volt\":{\"volt/benchmark/cpu\":[\"6.4\",\"5.1\",\"6.4\",\"5.1\",\"3.9\",\"5.1\",\"6.4\"],\"volt/benchmark/ram\":[\"5.41\",\"5.39\",\"5.38\",\"5.37\",\"5.37\",\"5.36\",\"5.37\"],\"volt/benchmark/processes\":[\"151\",\"151\",\"151\",\"151\",\"151\",\"151\",\"151\"],\"volt/benchmark/temp\":[\"34.5\",\"34.0\",\"34.0\",\"34.5\",\"34.5\",\"34.0\",\"33.6\"]},\"nidus\":{\"nidus/benchmark/cpu\":[\"55\",\"47.9\",\"51.4\",\"45\",\"62\",\"43.1\",\"88\"],\"nidus/benchmark/ram\":[\"25.97\",\"26.63\",\"26.88\",\"27.38\",\"27.96\",\"28.37\",\"28.57\"],\"nidus/benchmark/processes\":[\"189\",\"189\",\"189\",\"190\",\"190\",\"190\",\"190\"],\"nidus/benchmark/temp\":[\"35.0\",\"36.5\",\"36.5\",\"37.0\",\"36.5\",\"37.4\",\"37.0\"]},\"gatling\":{\"Assertion\":{\"simulation\":\"CuriusTRex\",\"simulationId\":\"curiustrex-20230912121905985\",\"start\":1694521147966,\"description\":\"\",\"scenarios\":[\"CuriusTRex\"],\"assertions\":[]},\"Global\":{\"name\":\"All Requests\",\"numberOfRequests\":{\"total\":3418,\"ok\":3418,\"ko\":0},\"minResponseTime\":{\"total\":13,\"ok\":13,\"ko\":0},\"maxResponseTime\":{\"total\":3344,\"ok\":3344,\"ko\":0},\"meanResponseTime\":{\"total\":863,\"ok\":863,\"ko\":0},\"standardDeviation\":{\"total\":675,\"ok\":675,\"ko\":0},\"percentiles1\":{\"total\":620,\"ok\":620,\"ko\":0},\"percentiles2\":{\"total\":1185,\"ok\":1185,\"ko\":0},\"percentiles3\":{\"total\":2323,\"ok\":2323,\"ko\":0},\"percentiles4\":{\"total\":2763,\"ok\":2763,\"ko\":0},\"group1\":{\"name\":\"t < 800 ms\",\"htmlName\":\"t < 800 ms\",\"count\":2140,\"percentage\":63},\"group2\":{\"name\":\"800 ms <= t < 1200 ms\",\"htmlName\":\"t >= 800 ms <br> t < 1200 ms\",\"count\":434,\"percentage\":13},\"group3\":{\"name\":\"t >= 1200 ms\",\"htmlName\":\"t >= 1200 ms\",\"count\":844,\"percentage\":25},\"group4\":{\"name\":\"failed\",\"htmlName\":\"failed\",\"count\":0,\"percentage\":0},\"meanNumberOfRequestsPerSecond\":{\"total\":284.8333333333333,\"ok\":284.8333333333333,\"ko\":0}},\"Stats\":{\"type\":\"GROUP\",\"name\":\"All Requests\",\"path\":\"\",\"pathFormatted\":\"group_missing-name-b06d1\",\"stats\":{\"name\":\"All Requests\",\"numberOfRequests\":{\"total\":3418,\"ok\":3418,\"ko\":0},\"minResponseTime\":{\"total\":13,\"ok\":13,\"ko\":0},\"maxResponseTime\":{\"total\":3344,\"ok\":3344,\"ko\":0},\"meanResponseTime\":{\"total\":863,\"ok\":863,\"ko\":0},\"standardDeviation\":{\"total\":675,\"ok\":675,\"ko\":0},\"percentiles1\":{\"total\":620,\"ok\":620,\"ko\":0},\"percentiles2\":{\"total\":1185,\"ok\":1185,\"ko\":0},\"percentiles3\":{\"total\":2323,\"ok\":2323,\"ko\":0},\"percentiles4\":{\"total\":2763,\"ok\":2763,\"ko\":0},\"group1\":{\"name\":\"t < 800 ms\",\"htmlName\":\"t < 800 ms\",\"count\":2140,\"percentage\":63},\"group2\":{\"name\":\"800 ms <= t < 1200 ms\",\"htmlName\":\"t >= 800 ms <br> t < 1200 ms\",\"count\":434,\"percentage\":13},\"group3\":{\"name\":\"t >= 1200 ms\",\"htmlName\":\"t >= 1200 ms\",\"count\":844,\"percentage\":25},\"group4\":{\"name\":\"failed\",\"htmlName\":\"failed\",\"count\":0,\"percentage\":0},\"meanNumberOfRequestsPerSecond\":{\"total\":284.8333333333333,\"ok\":284.8333333333333,\"ko\":0}},\"contents\":{\"req_request-0-684d2\":{\"type\":\"REQUEST\",\"name\":\"request_0\",\"path\":\"request_0\",\"pathFormatted\":\"req_request-0-684d2\",\"stats\":{\"name\":\"request_0\",\"numberOfRequests\":{\"total\":180,\"ok\":180,\"ko\":0},\"minResponseTime\":{\"total\":111,\"ok\":111,\"ko\":0},\"maxResponseTime\":{\"total\":2093,\"ok\":2093,\"ko\":0},\"meanResponseTime\":{\"total\":972,\"ok\":972,\"ko\":0},\"standardDeviation\":{\"total\":435,\"ok\":435,\"ko\":0},\"percentiles1\":{\"total\":1043,\"ok\":1043,\"ko\":0},\"percentiles2\":{\"total\":1291,\"ok\":1291,\"ko\":0},\"percentiles3\":{\"total\":1651,\"ok\":1651,\"ko\":0},\"percentiles4\":{\"total\":1925,\"ok\":1925,\"ko\":0},\"group1\":{\"name\":\"t < 800 ms\",\"htmlName\":\"t < 800 ms\",\"count\":65,\"percentage\":36},\"group2\":{\"name\":\"800 ms <= t < 1200 ms\",\"htmlName\":\"t >= 800 ms <br> t < 1200 ms\",\"count\":54,\"percentage\":30},\"group3\":{\"name\":\"t >= 1200 ms\",\"htmlName\":\"t >= 1200 ms\",\"count\":61,\"percentage\":34},\"group4\":{\"name\":\"failed\",\"htmlName\":\"failed\",\"count\":0,\"percentage\":0},\"meanNumberOfRequestsPerSecond\":{\"total\":15,\"ok\":15,\"ko\":0}}},\"req_request-1-46da4\":{\"type\":\"REQUEST\",\"name\":\"request_1\",\"path\":\"request_1\",\"pathFormatted\":\"req_request-1-46da4\",\"stats\":{\"name\":\"request_1\",\"numberOfRequests\":{\"total\":180,\"ok\":180,\"ko\":0},\"minResponseTime\":{\"total\":21,\"ok\":21,\"ko\":0},\"maxResponseTime\":{\"total\":2553,\"ok\":2553,\"ko\":0},\"meanResponseTime\":{\"total\":497,\"ok\":497,\"ko\":0},\"standardDeviation\":{\"total\":281,\"ok\":281,\"ko\":0},\"percentiles1\":{\"total\":504,\"ok\":504,\"ko\":0},\"percentiles2\":{\"total\":630,\"ok\":630,\"ko\":0},\"percentiles3\":{\"total\":845,\"ok\":845,\"ko\":0},\"percentiles4\":{\"total\":1153,\"ok\":1153,\"ko\":0},\"group1\":{\"name\":\"t < 800 ms\",\"htmlName\":\"t < 800 ms\",\"count\":166,\"percentage\":92},\"group2\":{\"name\":\"800 ms <= t < 1200 ms\",\"htmlName\":\"t >= 800 ms <br> t < 1200 ms\",\"count\":12,\"percentage\":7},\"group3\":{\"name\":\"t >= 1200 ms\",\"htmlName\":\"t >= 1200 ms\",\"count\":2,\"percentage\":1},\"group4\":{\"name\":\"failed\",\"htmlName\":\"failed\",\"count\":0,\"percentage\":0},\"meanNumberOfRequestsPerSecond\":{\"total\":15,\"ok\":15,\"ko\":0}}},\"req_styles-css-4e7bb\":{\"type\":\"REQUEST\",\"name\":\"styles.css\",\"path\":\"styles.css\",\"pathFormatted\":\"req_styles-css-4e7bb\",\"stats\":{\"name\":\"styles.css\",\"numberOfRequests\":{\"total\":540,\"ok\":540,\"ko\":0},\"minResponseTime\":{\"total\":13,\"ok\":13,\"ko\":0},\"maxResponseTime\":{\"total\":2839,\"ok\":2839,\"ko\":0},\"meanResponseTime\":{\"total\":520,\"ok\":520,\"ko\":0},\"standardDeviation\":{\"total\":328,\"ok\":328,\"ko\":0},\"percentiles1\":{\"total\":507,\"ok\":507,\"ko\":0},\"percentiles2\":{\"total\":647,\"ok\":647,\"ko\":0},\"percentiles3\":{\"total\":914,\"ok\":914,\"ko\":0},\"percentiles4\":{\"total\":2125,\"ok\":2125,\"ko\":0},\"group1\":{\"name\":\"t < 800 ms\",\"htmlName\":\"t < 800 ms\",\"count\":488,\"percentage\":90},\"group2\":{\"name\":\"800 ms <= t < 1200 ms\",\"htmlName\":\"t >= 800 ms <br> t < 1200 ms\",\"count\":42,\"percentage\":8},\"group3\":{\"name\":\"t >= 1200 ms\",\"htmlName\":\"t >= 1200 ms\",\"count\":10,\"percentage\":2},\"group4\":{\"name\":\"failed\",\"htmlName\":\"failed\",\"count\":0,\"percentage\":0},\"meanNumberOfRequestsPerSecond\":{\"total\":45,\"ok\":45,\"ko\":0}}},\"req_request-2-93baf\":{\"type\":\"REQUEST\",\"name\":\"request_2\",\"path\":\"request_2\",\"pathFormatted\":\"req_request-2-93baf\",\"stats\":{\"name\":\"request_2\",\"numberOfRequests\":{\"total\":180,\"ok\":180,\"ko\":0},\"minResponseTime\":{\"total\":36,\"ok\":36,\"ko\":0},\"maxResponseTime\":{\"total\":2505,\"ok\":2505,\"ko\":0},\"meanResponseTime\":{\"total\":570,\"ok\":570,\"ko\":0},\"standardDeviation\":{\"total\":386,\"ok\":386,\"ko\":0},\"percentiles1\":{\"total\":530,\"ok\":530,\"ko\":0},\"percentiles2\":{\"total\":668,\"ok\":668,\"ko\":0},\"percentiles3\":{\"total\":1449,\"ok\":1449,\"ko\":0},\"percentiles4\":{\"total\":2130,\"ok\":2130,\"ko\":0},\"group1\":{\"name\":\"t < 800 ms\",\"htmlName\":\"t < 800 ms\",\"count\":160,\"percentage\":89},\"group2\":{\"name\":\"800 ms <= t < 1200 ms\",\"htmlName\":\"t >= 800 ms <br> t < 1200 ms\",\"count\":10,\"percentage\":6},\"group3\":{\"name\":\"t >= 1200 ms\",\"htmlName\":\"t >= 1200 ms\",\"count\":10,\"percentage\":6},\"group4\":{\"name\":\"failed\",\"htmlName\":\"failed\",\"count\":0,\"percentage\":0},\"meanNumberOfRequestsPerSecond\":{\"total\":15,\"ok\":15,\"ko\":0}}},\"req_home-jpg-f5ed5\":{\"type\":\"REQUEST\",\"name\":\"Home.jpg\",\"path\":\"Home.jpg\",\"pathFormatted\":\"req_home-jpg-f5ed5\",\"stats\":{\"name\":\"Home.jpg\",\"numberOfRequests\":{\"total\":360,\"ok\":360,\"ko\":0},\"minResponseTime\":{\"total\":14,\"ok\":14,\"ko\":0},\"maxResponseTime\":{\"total\":2747,\"ok\":2747,\"ko\":0},\"meanResponseTime\":{\"total\":994,\"ok\":994,\"ko\":0},\"standardDeviation\":{\"total\":694,\"ok\":694,\"ko\":0},\"percentiles1\":{\"total\":824,\"ok\":824,\"ko\":0},\"percentiles2\":{\"total\":1594,\"ok\":1594,\"ko\":0},\"percentiles3\":{\"total\":2126,\"ok\":2126,\"ko\":0},\"percentiles4\":{\"total\":2476,\"ok\":2476,\"ko\":0},\"group1\":{\"name\":\"t < 800 ms\",\"htmlName\":\"t < 800 ms\",\"count\":179,\"percentage\":50},\"group2\":{\"name\":\"800 ms <= t < 1200 ms\",\"htmlName\":\"t >= 800 ms <br> t < 1200 ms\",\"count\":34,\"percentage\":9},\"group3\":{\"name\":\"t >= 1200 ms\",\"htmlName\":\"t >= 1200 ms\",\"count\":147,\"percentage\":41},\"group4\":{\"name\":\"failed\",\"htmlName\":\"failed\",\"count\":0,\"percentage\":0},\"meanNumberOfRequestsPerSecond\":{\"total\":30,\"ok\":30,\"ko\":0}}},\"req_donne-es-jpg-5d5cc\":{\"type\":\"REQUEST\",\"name\":\"Données.jpg\",\"path\":\"Données.jpg\",\"pathFormatted\":\"req_donne-es-jpg-5d5cc\",\"stats\":{\"name\":\"Données.jpg\",\"numberOfRequests\":{\"total\":360,\"ok\":360,\"ko\":0},\"minResponseTime\":{\"total\":25,\"ok\":25,\"ko\":0},\"maxResponseTime\":{\"total\":3340,\"ok\":3340,\"ko\":0},\"meanResponseTime\":{\"total\":1182,\"ok\":1182,\"ko\":0},\"standardDeviation\":{\"total\":890,\"ok\":890,\"ko\":0},\"percentiles1\":{\"total\":835,\"ok\":835,\"ko\":0},\"percentiles2\":{\"total\":2007,\"ok\":2007,\"ko\":0},\"percentiles3\":{\"total\":2579,\"ok\":2579,\"ko\":0},\"percentiles4\":{\"total\":3037,\"ok\":3037,\"ko\":0},\"group1\":{\"name\":\"t < 800 ms\",\"htmlName\":\"t < 800 ms\",\"count\":175,\"percentage\":49},\"group2\":{\"name\":\"800 ms <= t < 1200 ms\",\"htmlName\":\"t >= 800 ms <br> t < 1200 ms\",\"count\":22,\"percentage\":6},\"group3\":{\"name\":\"t >= 1200 ms\",\"htmlName\":\"t >= 1200 ms\",\"count\":163,\"percentage\":45},\"group4\":{\"name\":\"failed\",\"htmlName\":\"failed\",\"count\":0,\"percentage\":0},\"meanNumberOfRequestsPerSecond\":{\"total\":30,\"ok\":30,\"ko\":0}}},\"req_test-jpg-bd183\":{\"type\":\"REQUEST\",\"name\":\"Test.jpg\",\"path\":\"Test.jpg\",\"pathFormatted\":\"req_test-jpg-bd183\",\"stats\":{\"name\":\"Test.jpg\",\"numberOfRequests\":{\"total\":360,\"ok\":360,\"ko\":0},\"minResponseTime\":{\"total\":19,\"ok\":19,\"ko\":0},\"maxResponseTime\":{\"total\":3281,\"ok\":3281,\"ko\":0},\"meanResponseTime\":{\"total\":1187,\"ok\":1187,\"ko\":0},\"standardDeviation\":{\"total\":884,\"ok\":884,\"ko\":0},\"percentiles1\":{\"total\":823,\"ok\":823,\"ko\":0},\"percentiles2\":{\"total\":2016,\"ok\":2016,\"ko\":0},\"percentiles3\":{\"total\":2573,\"ok\":2573,\"ko\":0},\"percentiles4\":{\"total\":2985,\"ok\":2985,\"ko\":0},\"group1\":{\"name\":\"t < 800 ms\",\"htmlName\":\"t < 800 ms\",\"count\":176,\"percentage\":49},\"group2\":{\"name\":\"800 ms <= t < 1200 ms\",\"htmlName\":\"t >= 800 ms <br> t < 1200 ms\",\"count\":21,\"percentage\":6},\"group3\":{\"name\":\"t >= 1200 ms\",\"htmlName\":\"t >= 1200 ms\",\"count\":163,\"percentage\":45},\"group4\":{\"name\":\"failed\",\"htmlName\":\"failed\",\"count\":0,\"percentage\":0},\"meanNumberOfRequestsPerSecond\":{\"total\":30,\"ok\":30,\"ko\":0}}},\"req_test-complet-jp-2d4ff\":{\"type\":\"REQUEST\",\"name\":\"Test_Complet.jpg\",\"path\":\"Test_Complet.jpg\",\"pathFormatted\":\"req_test-complet-jp-2d4ff\",\"stats\":{\"name\":\"Test_Complet.jpg\",\"numberOfRequests\":{\"total\":360,\"ok\":360,\"ko\":0},\"minResponseTime\":{\"total\":20,\"ok\":20,\"ko\":0},\"maxResponseTime\":{\"total\":3344,\"ok\":3344,\"ko\":0},\"meanResponseTime\":{\"total\":1202,\"ok\":1202,\"ko\":0},\"standardDeviation\":{\"total\":900,\"ok\":900,\"ko\":0},\"percentiles1\":{\"total\":860,\"ok\":860,\"ko\":0},\"percentiles2\":{\"total\":2030,\"ok\":2030,\"ko\":0},\"percentiles3\":{\"total\":2667,\"ok\":2667,\"ko\":0},\"percentiles4\":{\"total\":3054,\"ok\":3054,\"ko\":0},\"group1\":{\"name\":\"t < 800 ms\",\"htmlName\":\"t < 800 ms\",\"count\":171,\"percentage\":48},\"group2\":{\"name\":\"800 ms <= t < 1200 ms\",\"htmlName\":\"t >= 800 ms <br> t < 1200 ms\",\"count\":28,\"percentage\":8},\"group3\":{\"name\":\"t >= 1200 ms\",\"htmlName\":\"t >= 1200 ms\",\"count\":161,\"percentage\":45},\"group4\":{\"name\":\"failed\",\"htmlName\":\"failed\",\"count\":0,\"percentage\":0},\"meanNumberOfRequestsPerSecond\":{\"total\":30,\"ok\":30,\"ko\":0}}},\"req_request-3-d0973\":{\"type\":\"REQUEST\",\"name\":\"request_3\",\"path\":\"request_3\",\"pathFormatted\":\"req_request-3-d0973\",\"stats\":{\"name\":\"request_3\",\"numberOfRequests\":{\"total\":180,\"ok\":180,\"ko\":0},\"minResponseTime\":{\"total\":321,\"ok\":321,\"ko\":0},\"maxResponseTime\":{\"total\":2015,\"ok\":2015,\"ko\":0},\"meanResponseTime\":{\"total\":1153,\"ok\":1153,\"ko\":0},\"standardDeviation\":{\"total\":349,\"ok\":349,\"ko\":0},\"percentiles1\":{\"total\":1163,\"ok\":1163,\"ko\":0},\"percentiles2\":{\"total\":1371,\"ok\":1371,\"ko\":0},\"percentiles3\":{\"total\":1766,\"ok\":1766,\"ko\":0},\"percentiles4\":{\"total\":1968,\"ok\":1968,\"ko\":0},\"group1\":{\"name\":\"t < 800 ms\",\"htmlName\":\"t < 800 ms\",\"count\":26,\"percentage\":14},\"group2\":{\"name\":\"800 ms <= t < 1200 ms\",\"htmlName\":\"t >= 800 ms <br> t < 1200 ms\",\"count\":73,\"percentage\":41},\"group3\":{\"name\":\"t >= 1200 ms\",\"htmlName\":\"t >= 1200 ms\",\"count\":81,\"percentage\":45},\"group4\":{\"name\":\"failed\",\"htmlName\":\"failed\",\"count\":0,\"percentage\":0},\"meanNumberOfRequestsPerSecond\":{\"total\":15,\"ok\":15,\"ko\":0}}},\"req_request-4-e7d1b\":{\"type\":\"REQUEST\",\"name\":\"request_4\",\"path\":\"request_4\",\"pathFormatted\":\"req_request-4-e7d1b\",\"stats\":{\"name\":\"request_4\",\"numberOfRequests\":{\"total\":180,\"ok\":180,\"ko\":0},\"minResponseTime\":{\"total\":243,\"ok\":243,\"ko\":0},\"maxResponseTime\":{\"total\":2552,\"ok\":2552,\"ko\":0},\"meanResponseTime\":{\"total\":955,\"ok\":955,\"ko\":0},\"standardDeviation\":{\"total\":381,\"ok\":381,\"ko\":0},\"percentiles1\":{\"total\":1020,\"ok\":1020,\"ko\":0},\"percentiles2\":{\"total\":1178,\"ok\":1178,\"ko\":0},\"percentiles3\":{\"total\":1530,\"ok\":1530,\"ko\":0},\"percentiles4\":{\"total\":1850,\"ok\":1850,\"ko\":0},\"group1\":{\"name\":\"t < 800 ms\",\"htmlName\":\"t < 800 ms\",\"count\":56,\"percentage\":31},\"group2\":{\"name\":\"800 ms <= t < 1200 ms\",\"htmlName\":\"t >= 800 ms <br> t < 1200 ms\",\"count\":82,\"percentage\":46},\"group3\":{\"name\":\"t >= 1200 ms\",\"htmlName\":\"t >= 1200 ms\",\"count\":42,\"percentage\":23},\"group4\":{\"name\":\"failed\",\"htmlName\":\"failed\",\"count\":0,\"percentage\":0},\"meanNumberOfRequestsPerSecond\":{\"total\":15,\"ok\":15,\"ko\":0}}},\"req_request-5-48829\":{\"type\":\"REQUEST\",\"name\":\"request_5\",\"path\":\"request_5\",\"pathFormatted\":\"req_request-5-48829\",\"stats\":{\"name\":\"request_5\",\"numberOfRequests\":{\"total\":180,\"ok\":180,\"ko\":0},\"minResponseTime\":{\"total\":141,\"ok\":141,\"ko\":0},\"maxResponseTime\":{\"total\":2497,\"ok\":2497,\"ko\":0},\"meanResponseTime\":{\"total\":600,\"ok\":600,\"ko\":0},\"standardDeviation\":{\"total\":275,\"ok\":275,\"ko\":0},\"percentiles1\":{\"total\":553,\"ok\":553,\"ko\":0},\"percentiles2\":{\"total\":719,\"ok\":719,\"ko\":0},\"percentiles3\":{\"total\":1077,\"ok\":1077,\"ko\":0},\"percentiles4\":{\"total\":1301,\"ok\":1301,\"ko\":0},\"group1\":{\"name\":\"t < 800 ms\",\"htmlName\":\"t < 800 ms\",\"count\":154,\"percentage\":86},\"group2\":{\"name\":\"800 ms <= t < 1200 ms\",\"htmlName\":\"t >= 800 ms <br> t < 1200 ms\",\"count\":23,\"percentage\":13},\"group3\":{\"name\":\"t >= 1200 ms\",\"htmlName\":\"t >= 1200 ms\",\"count\":3,\"percentage\":2},\"group4\":{\"name\":\"failed\",\"htmlName\":\"failed\",\"count\":0,\"percentage\":0},\"meanNumberOfRequestsPerSecond\":{\"total\":15,\"ok\":15,\"ko\":0}}},\"req_request-6-027a9\":{\"type\":\"REQUEST\",\"name\":\"request_6\",\"path\":\"request_6\",\"pathFormatted\":\"req_request-6-027a9\",\"stats\":{\"name\":\"request_6\",\"numberOfRequests\":{\"total\":178,\"ok\":178,\"ko\":0},\"minResponseTime\":{\"total\":71,\"ok\":71,\"ko\":0},\"maxResponseTime\":{\"total\":1262,\"ok\":1262,\"ko\":0},\"meanResponseTime\":{\"total\":544,\"ok\":544,\"ko\":0},\"standardDeviation\":{\"total\":236,\"ok\":236,\"ko\":0},\"percentiles1\":{\"total\":537,\"ok\":537,\"ko\":0},\"percentiles2\":{\"total\":689,\"ok\":689,\"ko\":0},\"percentiles3\":{\"total\":992,\"ok\":992,\"ko\":0},\"percentiles4\":{\"total\":1085,\"ok\":1085,\"ko\":0},\"group1\":{\"name\":\"t < 800 ms\",\"htmlName\":\"t < 800 ms\",\"count\":154,\"percentage\":87},\"group2\":{\"name\":\"800 ms <= t < 1200 ms\",\"htmlName\":\"t >= 800 ms <br> t < 1200 ms\",\"count\":23,\"percentage\":13},\"group3\":{\"name\":\"t >= 1200 ms\",\"htmlName\":\"t >= 1200 ms\",\"count\":1,\"percentage\":1},\"group4\":{\"name\":\"failed\",\"htmlName\":\"failed\",\"count\":0,\"percentage\":0},\"meanNumberOfRequestsPerSecond\":{\"total\":14.833333333333334,\"ok\":14.833333333333334,\"ko\":0}}},\"req_request-7-f222f\":{\"type\":\"REQUEST\",\"name\":\"request_7\",\"path\":\"request_7\",\"pathFormatted\":\"req_request-7-f222f\",\"stats\":{\"name\":\"request_7\",\"numberOfRequests\":{\"total\":180,\"ok\":180,\"ko\":0},\"minResponseTime\":{\"total\":19,\"ok\":19,\"ko\":0},\"maxResponseTime\":{\"total\":1036,\"ok\":1036,\"ko\":0},\"meanResponseTime\":{\"total\":420,\"ok\":420,\"ko\":0},\"standardDeviation\":{\"total\":229,\"ok\":229,\"ko\":0},\"percentiles1\":{\"total\":415,\"ok\":415,\"ko\":0},\"percentiles2\":{\"total\":576,\"ok\":576,\"ko\":0},\"percentiles3\":{\"total\":827,\"ok\":827,\"ko\":0},\"percentiles4\":{\"total\":1000,\"ok\":1000,\"ko\":0},\"group1\":{\"name\":\"t < 800 ms\",\"htmlName\":\"t < 800 ms\",\"count\":170,\"percentage\":94},\"group2\":{\"name\":\"800 ms <= t < 1200 ms\",\"htmlName\":\"t >= 800 ms <br> t < 1200 ms\",\"count\":10,\"percentage\":6},\"group3\":{\"name\":\"t >= 1200 ms\",\"htmlName\":\"t >= 1200 ms\",\"count\":0,\"percentage\":0},\"group4\":{\"name\":\"failed\",\"htmlName\":\"failed\",\"count\":0,\"percentage\":0},\"meanNumberOfRequestsPerSecond\":{\"total\":15,\"ok\":15,\"ko\":0}}}}},\"Original\":{\"nameFile\":\"tre\",\"time\":6,\"stressVolt\":false,\"stressNidus\":false,\"timeStress\":0.1,\"user_gatling\":30,\"flow\":false}},\"Log\":{\"timeResponse\":{\"data\":{\"labels\":[\"Début de la Simulation\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"2 s\",\"2 s\",\"2 s\",\"2 s\",\"\",\"2 s\",\"2 s\",\"2 s\",\"2 s\",\"\",\"\",\"\",\"\",\"2 s\",\"\",\"\",\"2 s\",\"2 s\",\"2 s\",\"2 s\",\"2 s\",\"2 s\",\"2 s\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"3 s\",\"\",\"\",\"\",\"\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"\",\"\",\"\",\"3 s\",\"\",\"2 s\",\"2 s\",\"2 s\",\"2 s\",\"2 s\",\"2 s\",\"2 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"\",\"3 s\",\"3 s\",\"3 s\",\"\",\"3 s\",\"3 s\",\"\",\"\",\"3 s\",\"3 s\",\"\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"\",\"3 s\",\"\",\"3 s\",\"3 s\",\"\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"\",\"3 s\",\"\",\"3 s\",\"3 s\",\"\",\"\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"4 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"4 s\",\"3 s\",\"3 s\",\"4 s\",\"4 s\",\"3 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"3 s\",\"4 s\",\"4 s\",\"3 s\",\"3 s\",\"4 s\",\"4 s\",\"3 s\",\"3 s\",\"3 s\",\"4 s\",\"4 s\",\"3 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"3 s\",\"4 s\",\"3 s\",\"4 s\",\"3 s\",\"4 s\",\"\",\"4 s\",\"3 s\",\"\",\"4 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"3 s\",\"4 s\",\"3 s\",\"3 s\",\"4 s\",\"4 s\",\"3 s\",\"4 s\",\"\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"\",\"4 s\",\"3 s\",\"4 s\",\"3 s\",\"3 s\",\"4 s\",\"4 s\",\"4 s\",\"3 s\",\"4 s\",\"4 s\",\"\",\"\",\"3 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"3 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"\",\"4 s\",\"\",\"4 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"3 s\",\"4 s\",\"\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"\",\"5 s\",\"\",\"5 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"\",\"4 s\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"\",\"\",\"4 s\",\"4 s\",\"4 s\",\"\",\"5 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"5 s\",\"\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"\",\"4 s\",\"\",\"4 s\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"\",\"5 s\",\"5 s\",\"4 s\",\"5 s\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"\",\"4 s\",\"4 s\",\"\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"\",\"5 s\",\"\",\"\",\"\",\"4 s\",\"5 s\",\"4 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"5 s\",\"4 s\",\"5 s\",\"4 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"4 s\",\"5 s\",\"5 s\",\"\",\"4 s\",\"5 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"\",\"5 s\",\"4 s\",\"\",\"5 s\",\"4 s\",\"5 s\",\"4 s\",\"\",\"5 s\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"5 s\",\"5 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"5 s\",\"4 s\",\"5 s\",\"\",\"\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"4 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"\",\"4 s\",\"\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"4 s\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"4 s\",\"5 s\",\"4 s\",\"5 s\",\"5 s\",\"5 s\",\"6 s\",\"5 s\",\"5 s\",\"6 s\",\"5 s\",\"5 s\",\"6 s\",\"5 s\",\"6 s\",\"5 s\",\"6 s\",\"\",\"4 s\",\"\",\"4 s\",\"\",\"4 s\",\"\",\"5 s\",\"\",\"\",\"5 s\",\"\",\"4 s\",\"\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"6 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"4 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"6 s\",\"\",\"6 s\",\"5 s\",\"5 s\",\"4 s\",\"5 s\",\"5 s\",\"5 s\",\"4 s\",\"5 s\",\"5 s\",\"6 s\",\"5 s\",\"5 s\",\"4 s\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"6 s\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"\",\"5 s\",\"\",\"5 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"5 s\",\"6 s\",\"6 s\",\"\",\"6 s\",\"5 s\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"6 s\",\"\",\"6 s\",\"6 s\",\"5 s\",\"5 s\",\"6 s\",\"\",\"6 s\",\"5 s\",\"6 s\",\"6 s\",\"\",\"\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"4 s\",\"4 s\",\"6 s\",\"6 s\",\"6 s\",\"4 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"\",\"6 s\",\"5 s\",\"6 s\",\"5 s\",\"\",\"6 s\",\"5 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"5 s\",\"6 s\",\"6 s\",\"\",\"5 s\",\"\",\"\",\"6 s\",\"5 s\",\"6 s\",\"5 s\",\"\",\"\",\"5 s\",\"5 s\",\"5 s\",\"6 s\",\"5 s\",\"5 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"5 s\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"6 s\",\"5 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"\",\"\",\"6 s\",\"6 s\",\"\",\"\",\"\",\"5 s\",\"6 s\",\"\",\"6 s\",\"6 s\",\"\",\"6 s\",\"6 s\",\"6 s\",\"\",\"\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"7 s\",\"6 s\",\"5 s\",\"6 s\",\"5 s\",\"6 s\",\"5 s\",\"6 s\",\"5 s\",\"5 s\",\"5 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"6 s\",\"7 s\",\"6 s\",\"7 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"7 s\",\"7 s\",\"6 s\",\"\",\"6 s\",\"\",\"6 s\",\"\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"7 s\",\"6 s\",\"\",\"7 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"7 s\",\"\",\"7 s\",\"7 s\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"7 s\",\"\",\"\",\"7 s\",\"5 s\",\"6 s\",\"6 s\",\"5 s\",\"6 s\",\"\",\"7 s\",\"\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"\",\"6 s\",\"\",\"7 s\",\"\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"7 s\",\"6 s\",\"5 s\",\"7 s\",\"\",\"\",\"\",\"6 s\",\"6 s\",\"6 s\",\"7 s\",\"7 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"7 s\",\"6 s\",\"7 s\",\"6 s\",\"\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"\",\"7 s\",\"7 s\",\"6 s\",\"\",\"6 s\",\"5 s\",\"7 s\",\"6 s\",\"7 s\",\"6 s\",\"7 s\",\"7 s\",\"6 s\",\"5 s\",\"6 s\",\"6 s\",\"7 s\",\"6 s\",\"\",\"5 s\",\"\",\"5 s\",\"7 s\",\"6 s\",\"6 s\",\"\",\"\",\"6 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"5 s\",\"\",\"6 s\",\"6 s\",\"7 s\",\"6 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"\",\"\",\"\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"\",\"7 s\",\"6 s\",\"\",\"7 s\",\"\",\"\",\"6 s\",\"7 s\",\"5 s\",\"5 s\",\"\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"6 s\",\"7 s\",\"7 s\",\"6 s\",\"6 s\",\"\",\"6 s\",\"6 s\",\"7 s\",\"7 s\",\"\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"5 s\",\"6 s\",\"7 s\",\"\",\"7 s\",\"6 s\",\"\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"6 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"\",\"6 s\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"\",\"\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"\",\"\",\"6 s\",\"7 s\",\"\",\"6 s\",\"\",\"6 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"5 s\",\"6 s\",\"7 s\",\"7 s\",\"5 s\",\"6 s\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"5 s\",\"6 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"6 s\",\"\",\"\",\"7 s\",\"\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"6 s\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"6 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"6 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"7 s\",\"\",\"7 s\",\"7 s\",\"7 s\",\"\",\"7 s\",\"\",\"8 s\",\"7 s\",\"7 s\",\"\",\"8 s\",\"7 s\",\"7 s\",\"8 s\",\"8 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"8 s\",\"7 s\",\"7 s\",\"\",\"7 s\",\"\",\"8 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"8 s\",\"\",\"7 s\",\"7 s\",\"7 s\",\"\",\"7 s\",\"\",\"7 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"7 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"6 s\",\"8 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"7 s\",\"8 s\",\"\",\"8 s\",\"8 s\",\"7 s\",\"6 s\",\"6 s\",\"7 s\",\"8 s\",\"7 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"7 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"7 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"6 s\",\"8 s\",\"6 s\",\"6 s\",\"8 s\",\"6 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"7 s\",\"6 s\",\"8 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"6 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"7 s\",\"7 s\",\"8 s\",\"7 s\",\"7 s\",\"7 s\",\"8 s\",\"8 s\",\"\",\"6 s\",\"8 s\",\"6 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"6 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"7 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"7 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"6 s\",\"6 s\",\"8 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"7 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"6 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"8 s\",\"8 s\",\"7 s\",\"7 s\",\"8 s\",\"7 s\",\"7 s\",\"8 s\",\"7 s\",\"7 s\",\"7 s\",\"8 s\",\"8 s\",\"9 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"9 s\",\"7 s\",\"9 s\",\"7 s\",\"8 s\",\"7 s\",\"8 s\",\"9 s\",\"9 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"\",\"9 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"9 s\",\"7 s\",\"7 s\",\"8 s\",\"8 s\",\"7 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"9 s\",\"8 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"9 s\",\"8 s\",\"9 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"9 s\",\"7 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"7 s\",\"8 s\",\"7 s\",\"7 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"9 s\",\"9 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"9 s\",\"8 s\",\"8 s\",\"9 s\",\"9 s\",\"8 s\",\"8 s\",\"9 s\",\"8 s\",\"8 s\",\"7 s\",\"7 s\",\"9 s\",\"8 s\",\"7 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"8 s\",\"9 s\",\"8 s\",\"\",\"9 s\",\"9 s\",\"8 s\",\"8 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"6 s\",\"6 s\",\"8 s\",\"6 s\",\"6 s\",\"9 s\",\"8 s\",\"8 s\",\"6 s\",\"6 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"7 s\",\"9 s\",\"9 s\",\"8 s\",\"\",\"8 s\",\"9 s\",\"9 s\",\"\",\"9 s\",\"6 s\",\"7 s\",\"8 s\",\"6 s\",\"7 s\",\"7 s\",\"9 s\",\"9 s\",\"7 s\",\"9 s\",\"7 s\",\"7 s\",\"6 s\",\"9 s\",\"7 s\",\"8 s\",\"8 s\",\"9 s\",\"7 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"7 s\",\"8 s\",\"9 s\",\"7 s\",\"7 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"7 s\",\"8 s\",\"9 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"8 s\",\"7 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"8 s\",\"7 s\",\"8 s\",\"9 s\",\"8 s\",\"7 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"9 s\",\"8 s\",\"7 s\",\"9 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"9 s\",\"8 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"9 s\",\"9 s\",\"7 s\",\"8 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"9 s\",\"9 s\",\"8 s\",\"\",\"9 s\",\"8 s\",\"\",\"8 s\",\"9 s\",\"7 s\",\"9 s\",\"9 s\",\"9 s\",\"7 s\",\"7 s\",\"8 s\",\"9 s\",\"8 s\",\"9 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"9 s\",\"9 s\",\"7 s\",\"8 s\",\"9 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"7 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"8 s\",\"9 s\",\"9 s\",\"8 s\",\"8 s\",\"8 s\",\"9 s\",\"9 s\",\"7 s\",\"9 s\",\"7 s\",\"9 s\",\"8 s\",\"9 s\",\"7 s\",\"9 s\",\"9 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"9 s\",\"7 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"\",\"9 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"7 s\",\"9 s\",\"9 s\",\"9 s\",\"\",\"9 s\",\"9 s\",\"8 s\",\"\",\"9 s\",\"\",\"7 s\",\"8 s\",\"9 s\",\"9 s\",\"\",\"8 s\",\"\",\"9 s\",\"9 s\",\"7 s\",\"8 s\",\"7 s\",\"7 s\",\"9 s\",\"8 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"\",\"7 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"8 s\",\"8 s\",\"\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"10 s\",\"\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"10 s\",\"9 s\",\"10 s\",\"8 s\",\"\",\"9 s\",\"9 s\",\"10 s\",\"9 s\",\"10 s\",\"9 s\",\"10 s\",\"9 s\",\"8 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"7 s\",\"\",\"10 s\",\"10 s\",\"7 s\",\"9 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"8 s\",\"8 s\",\"10 s\",\"\",\"8 s\",\"\",\"8 s\",\"9 s\",\"10 s\",\"10 s\",\"\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"8 s\",\"\",\"10 s\",\"\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"8 s\",\"9 s\",\"8 s\",\"\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"8 s\",\"10 s\",\"8 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"9 s\",\"9 s\",\"10 s\",\"10 s\",\"8 s\",\"10 s\",\"10 s\",\"8 s\",\"9 s\",\"9 s\",\"\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"8 s\",\"9 s\",\"9 s\",\"10 s\",\"9 s\",\"\",\"9 s\",\"9 s\",\"9 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"9 s\",\"10 s\",\"8 s\",\"10 s\",\"\",\"10 s\",\"10 s\",\"10 s\",\"8 s\",\"10 s\",\"8 s\",\"10 s\",\"8 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"9 s\",\"8 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"9 s\",\"\",\"8 s\",\"10 s\",\"10 s\",\"9 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"8 s\",\"8 s\",\"10 s\",\"10 s\",\"8 s\",\"9 s\",\"8 s\",\"10 s\",\"10 s\",\"9 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"9 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"9 s\",\"9 s\",\"10 s\",\"10 s\",\"9 s\",\"8 s\",\"10 s\",\"10 s\",\"8 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"8 s\",\"9 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"9 s\",\"10 s\",\"\",\"\",\"10 s\",\"9 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"9 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"9 s\",\"8 s\",\"8 s\",\"10 s\",\"9 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"8 s\",\"8 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"8 s\",\"8 s\",\"10 s\",\"10 s\",\"11 s\",\"10 s\",\"10 s\",\"11 s\",\"9 s\",\"10 s\",\"10 s\",\"\",\"10 s\",\"9 s\",\"\",\"9 s\",\"11 s\",\"10 s\",\"9 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"11 s\",\"10 s\",\"11 s\",\"10 s\",\"9 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"11 s\",\"10 s\",\"9 s\",\"\",\"11 s\",\"9 s\",\"10 s\",\"10 s\",\"9 s\",\"9 s\",\"10 s\",\"11 s\",\"10 s\",\"\",\"11 s\",\"10 s\",\"11 s\",\"10 s\",\"10 s\",\"10 s\",\"11 s\",\"10 s\",\"11 s\",\"10 s\",\"9 s\",\"9 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"9 s\",\"9 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"9 s\",\"8 s\",\"8 s\",\"8 s\",\"10 s\",\"9 s\",\"9 s\",\"9 s\",\"11 s\",\"11 s\",\"9 s\",\"10 s\",\"\",\"11 s\",\"\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"11 s\",\"10 s\",\"10 s\",\"11 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"10 s\",\"9 s\",\"\",\"9 s\",\"8 s\",\"9 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"10 s\",\"10 s\",\"11 s\",\"9 s\",\"9 s\",\"9 s\",\"10 s\",\"9 s\",\"10 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"9 s\",\"11 s\",\"11 s\",\"10 s\",\"\",\"11 s\",\"\",\"9 s\",\"11 s\",\"11 s\",\"10 s\",\"9 s\",\"9 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"9 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"9 s\",\"10 s\",\"10 s\",\"\",\"\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"9 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"\",\"10 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"9 s\",\"\",\"10 s\",\"10 s\",\"11 s\",\"\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"\",\"11 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"11 s\",\"10 s\",\"10 s\",\"11 s\",\"11 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"11 s\",\"9 s\",\"11 s\",\"10 s\",\"9 s\",\"11 s\",\"10 s\",\"11 s\",\"10 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"\",\"11 s\",\"11 s\",\"9 s\",\"9 s\",\"9 s\",\"10 s\",\"9 s\",\"9 s\",\"11 s\",\"11 s\",\"10 s\",\"10 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"\",\"9 s\",\"11 s\",\"10 s\",\"9 s\",\"9 s\",\"10 s\",\"11 s\",\"10 s\",\"11 s\",\"9 s\",\"9 s\",\"11 s\",\"11 s\",\"10 s\",\"10 s\",\"11 s\",\"11 s\",\"10 s\",\"9 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"9 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"9 s\",\"11 s\",\"9 s\",\"11 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"11 s\",\"10 s\",\"\",\"11 s\",\"10 s\",\"9 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"9 s\",\"9 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"9 s\",\"9 s\",\"9 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"9 s\",\"9 s\",\"9 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"9 s\",\"9 s\",\"\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"\",\"10 s\",\"10 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"\",\"11 s\",\"11 s\",\"10 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"12 s\",\"12 s\",\"\",\"12 s\",\"10 s\",\"11 s\",\"11 s\",\"10 s\",\"10 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"\",\"11 s\",\"11 s\",\"\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"12 s\",\"11 s\",\"11 s\",\"12 s\",\"\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"12 s\",\"12 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"\",\"11 s\",\"11 s\",\"12 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"10 s\",\"11 s\",\"\",\"11 s\",\"11 s\",\"\",\"10 s\",\"10 s\",\"12 s\",\"12 s\",\"11 s\",\"11 s\",\"10 s\",\"12 s\",\"11 s\",\"12 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"12 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"\",\"12 s\",\"12 s\",\"10 s\",\"11 s\",\"\",\"10 s\",\"11 s\",\"11 s\",\"12 s\",\"11 s\",\"12 s\",\"11 s\",\"12 s\",\"\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"\",\"11 s\",\"12 s\",\"10 s\",\"10 s\",\"12 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"10 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"11 s\",\"12 s\",\"11 s\",\"12 s\",\"10 s\",\"11 s\",\"10 s\",\"10 s\",\"12 s\",\"10 s\",\"12 s\",\"11 s\",\"\",\"12 s\",\"10 s\",\"10 s\",\"10 s\",\"12 s\",\"12 s\",\"9 s\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"9 s\",\"9 s\",\"9 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"\",\"12 s\",\"11 s\",\"\",\"12 s\",\"9 s\",\"11 s\",\"9 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"10 s\",\"\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"12 s\",\"9 s\",\"12 s\",\"12 s\",\"11 s\",\"\",\"12 s\",\"11 s\",\"11 s\",\"11 s\",\"12 s\",\"12 s\",\"11 s\",\"\",\"9 s\",\"12 s\",\"9 s\",\"9 s\",\"12 s\",\"10 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"\",\"12 s\",\"12 s\",\"10 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"10 s\",\"12 s\",\"12 s\",\"\",\"12 s\",\"10 s\",\"10 s\",\"12 s\",\"11 s\",\"12 s\",\"\",\"12 s\",\"11 s\",\"12 s\",\"11 s\",\"12 s\",\"\",\"11 s\",\"11 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"\",\"12 s\",\"10 s\",\"12 s\",\"12 s\",\"12 s\",\"10 s\",\"11 s\",\"12 s\",\"10 s\",\"12 s\",\"10 s\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"11 s\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"10 s\",\"\",\"12 s\",\"12 s\",\"12 s\",\"10 s\",\"12 s\",\"10 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"10 s\",\"11 s\",\"10 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"\",\"11 s\",\"11 s\",\"10 s\",\"12 s\",\"10 s\",\"10 s\",\"10 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"12 s\",\"11 s\",\"11 s\",\"12 s\",\"12 s\",\"10 s\",\"12 s\",\"10 s\",\"12 s\",\"12 s\",\"11 s\",\"10 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"10 s\",\"12 s\",\"12 s\",\"10 s\",\"10 s\",\"11 s\",\"\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"11 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"10 s\",\"10 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"10 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"11 s\",\"10 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"10 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"10 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"10 s\",\"11 s\",\"12 s\",\"10 s\",\"12 s\",\"10 s\",\"12 s\",\"10 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"10 s\",\"11 s\",\"10 s\",\"12 s\",\"\",\"10 s\",\"11 s\",\"12 s\",\"10 s\",\"10 s\",\"11 s\",\"\",\"12 s\",\"12 s\",\"12 s\",\"10 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"11 s\",\"11 s\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"13 s\",\"11 s\",\"11 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"11 s\",\"12 s\",\"12 s\",\"\",\"12 s\",\"\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"13 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"\",\"13 s\",\"12 s\",\"12 s\",\"13 s\",\"13 s\",\"11 s\",\"11 s\",\"13 s\",\"12 s\",\"12 s\",\"\",\"11 s\",\"11 s\",\"12 s\",\"13 s\",\"12 s\",\"13 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"\",\"13 s\",\"12 s\",\"\",\"10 s\",\"10 s\",\"10 s\",\"12 s\",\"13 s\",\"12 s\",\"12 s\",\"12 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"10 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"13 s\",\"12 s\",\"12 s\",\"13 s\",\"13 s\",\"13 s\",\"12 s\",\"12 s\",\"12 s\",\"13 s\",\"12 s\",\"12 s\",\"12 s\",\"13 s\",\"10 s\",\"12 s\",\"11 s\",\"10 s\",\"10 s\",\"11 s\",\"11 s\",\"\",\"\",\"13 s\",\"11 s\",\"13 s\",\"11 s\",\"13 s\",\"13 s\",\"11 s\",\"13 s\",\"\",\"13 s\",\"12 s\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"12 s\",\"11 s\",\"11 s\",\"13 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"\",\"13 s\",\"13 s\",\"\",\"13 s\",\"12 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"12 s\",\"12 s\",\"13 s\",\"12 s\",\"12 s\",\"13 s\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"12 s\",\"\",\"12 s\",\"13 s\",\"13 s\",\"\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"12 s\",\"13 s\",\"13 s\",\"12 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"12 s\",\"12 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"13 s\",\"\",\"12 s\",\"12 s\",\"13 s\",\"12 s\",\"11 s\",\"\",\"13 s\",\"11 s\",\"13 s\",\"12 s\",\"\",\"12 s\",\"13 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"13 s\",\"11 s\",\"\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"13 s\",\"12 s\",\"\",\"\",\"11 s\",\"13 s\",\"11 s\",\"11 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"12 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"12 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"12 s\",\"\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"12 s\",\"\",\"12 s\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"\",\"13 s\",\"13 s\",\"\",\"13 s\",\"12 s\",\"12 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"13 s\",\"\",\"\",\"13 s\",\"12 s\",\"\",\"13 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"12 s\",\"13 s\",\"12 s\",\"12 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"13 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"\",\"13 s\",\"\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"\",\"13 s\",\"\"],\"datasets\":[{\"label\":\"Temps de Réponse\",\"borderColor\":\"rgba(0, 128, 255, 1)\",\"fill\":false,\"data\":[0,0,0,0,0,0,0,0,0,221,232,116,111,0,231,238,242,198,0,0,0,0,33,0,0,25,33,31,24,48,43,21,0,0,0,0,0,0,0,0,0,0,0,0,38,0,0,0,0,53,45,55,62,68,60,66,0,0,0,36,0,688,676,701,718,707,704,721,68,78,63,92,97,107,126,0,135,311,296,298,285,324,328,293,332,331,317,0,204,122,118,0,365,364,0,0,167,97,0,418,242,238,396,196,127,201,443,132,309,118,157,299,0,155,470,164,249,342,198,397,277,267,297,416,0,294,0,198,299,0,170,261,275,321,198,450,339,0,186,338,243,172,226,193,374,0,374,363,384,226,0,408,129,543,164,0,406,179,228,258,233,451,454,432,232,467,213,486,487,475,262,494,506,476,514,327,510,492,318,534,261,349,316,296,220,0,293,0,335,471,0,0,335,512,456,297,278,571,343,233,293,501,343,523,287,243,619,320,289,275,613,0,310,214,134,596,276,272,651,637,210,316,623,439,654,287,129,630,0,223,168,186,218,592,137,422,154,745,310,0,264,547,0,167,224,0,223,411,786,228,475,670,226,422,816,202,0,0,241,441,228,427,0,216,0,217,858,430,665,814,369,209,177,592,424,364,0,0,656,256,363,556,283,0,319,345,358,298,436,481,243,325,251,186,0,322,258,177,501,324,323,422,298,311,295,785,291,348,286,214,358,299,447,248,315,245,320,328,713,348,472,273,0,264,0,288,0,284,0,273,305,615,0,401,533,399,546,0,290,917,555,0,0,711,548,364,455,381,479,343,663,626,458,0,337,0,712,309,312,441,671,487,299,469,314,403,287,697,272,0,457,624,436,399,415,423,276,408,453,0,708,616,472,528,0,417,875,648,467,364,520,502,482,0,823,0,411,785,286,833,792,249,599,944,218,504,883,177,723,781,605,0,919,836,0,127,0,129,852,639,132,950,0,830,571,146,147,1093,968,1171,814,0,0,522,667,538,596,507,860,0,516,500,1222,595,518,520,440,0,0,503,1020,512,0,526,450,528,0,531,552,533,447,0,1001,536,240,616,471,0,734,515,0,594,257,257,550,849,0,0,828,616,1091,0,390,620,287,612,560,1139,538,439,569,414,1041,601,633,395,489,582,979,506,308,586,1174,480,584,598,405,0,456,560,1034,1334,1196,262,1008,1342,603,1044,0,1219,0,647,532,561,1236,1255,294,1087,1046,1249,1033,433,976,1269,0,656,470,898,375,436,420,1572,990,1553,923,325,1357,1312,1360,414,1178,1322,1367,525,0,1050,1300,0,410,491,871,848,1435,1232,221,435,205,1396,1091,1095,0,1195,200,1123,1077,620,1283,0,590,0,0,0,876,759,1304,708,826,598,182,1342,1115,1007,659,1117,1242,1093,544,631,1472,436,1448,607,853,206,503,457,1479,559,488,0,1560,608,1561,527,1563,1259,0,562,1341,0,955,1615,531,1622,0,483,620,485,1097,1408,1101,603,574,579,1374,551,1255,1313,1223,667,505,1188,623,0,0,900,685,1049,911,1049,555,542,678,554,1085,1767,629,370,639,354,690,0,498,633,355,575,0,1814,0,1604,314,1824,1596,1842,0,311,1310,1780,1317,950,597,687,537,1724,889,625,1349,1726,1026,1522,1172,533,1192,655,824,1471,330,1608,522,663,543,296,618,1046,310,1149,465,313,572,281,576,281,0,1968,0,1601,0,1599,0,645,0,0,587,0,1903,0,485,1288,643,609,1096,307,1997,0,1707,2015,467,1187,2025,1709,1074,764,1072,527,653,1204,1672,1021,598,640,1097,0,525,592,574,604,0,1128,542,555,567,871,647,478,0,519,1120,556,1987,592,633,1164,1933,571,646,447,1084,1083,1944,662,854,1959,1875,1175,1928,450,672,681,1936,1949,0,1223,0,1150,485,440,467,494,508,600,686,1260,532,487,0,460,705,508,472,426,727,1173,1185,1057,1173,517,0,508,478,749,741,494,0,576,1146,531,418,0,0,687,568,377,532,444,776,1917,1908,688,513,551,1910,547,572,403,574,407,996,414,532,666,419,0,717,1430,599,1218,0,556,1446,417,742,681,716,554,1813,1788,447,554,0,1834,0,0,556,996,693,1465,0,0,1721,1391,1112,701,993,1486,546,100,593,534,589,733,525,1194,1172,669,604,691,1544,730,580,525,607,557,582,1573,1031,936,979,476,1318,334,1244,279,283,718,274,274,566,275,0,0,257,569,0,0,0,1450,1005,0,241,564,0,757,1126,547,0,0,552,576,754,1488,826,516,569,1616,1719,1638,1727,2150,552,829,581,869,189,735,2011,721,1386,534,1426,301,2032,1770,1673,500,495,837,736,576,2050,819,276,634,278,835,588,501,837,576,829,509,749,452,827,511,595,597,836,1492,320,322,1090,0,603,0,482,0,639,762,749,832,348,605,0,326,628,503,869,630,648,348,0,347,385,864,637,841,1586,330,0,0,385,1591,859,781,1450,1244,0,401,0,1231,1425,1242,1212,0,1109,0,368,0,1313,1416,976,995,758,838,1122,728,1523,663,664,838,0,1330,809,672,662,840,664,954,730,793,721,431,759,2163,513,0,0,0,818,1393,823,605,463,1398,852,714,1391,828,817,685,607,1393,622,663,0,1620,624,605,566,619,568,0,747,539,613,558,848,467,0,561,479,716,0,749,2008,605,744,492,726,511,559,843,1999,750,752,596,737,0,2013,0,2648,531,1247,765,0,0,1704,1357,505,547,739,1351,1228,603,535,536,2350,0,1371,1337,720,1429,1359,569,571,594,848,436,0,0,0,1285,852,607,597,853,0,677,1344,0,707,0,0,1338,868,2052,2053,0,722,457,1308,874,741,648,1370,1436,726,428,1922,1297,0,1081,1044,773,523,0,1941,525,528,737,510,755,1592,2502,1031,742,0,505,1450,0,1052,483,467,722,484,1487,737,1585,1501,655,707,764,1471,892,659,719,790,702,742,702,796,749,515,807,719,688,0,1842,676,659,1159,763,893,768,0,0,770,821,535,885,0,774,864,824,832,834,0,0,1493,848,0,1587,0,1266,1556,777,833,694,425,775,817,611,825,2388,1729,539,639,2402,1548,530,767,1359,429,2393,1813,1524,567,534,547,1411,1526,0,0,1097,0,808,577,442,430,1231,1566,1093,565,628,679,2057,784,479,595,448,2076,1883,587,581,1793,749,2073,2086,1254,1279,585,440,845,546,2107,487,734,1835,690,2341,1835,446,485,439,1721,1842,1284,637,1277,489,474,1789,1182,489,0,451,1309,1315,0,482,0,440,915,976,0,465,1327,955,465,451,2049,998,857,986,471,1335,897,0,638,0,483,1957,1387,1024,1261,1958,1408,489,0,889,1486,1253,0,971,0,589,608,573,435,468,1579,593,574,495,1536,1549,1384,1207,407,819,554,501,516,1529,402,798,405,430,1497,1070,539,430,546,681,422,564,1125,419,581,2269,588,709,1128,427,443,386,561,1297,740,474,1075,475,0,567,515,1181,2340,2348,1015,444,1537,679,1201,517,447,460,449,450,1117,936,592,1071,676,517,470,427,442,521,1392,1391,1440,700,326,528,426,552,461,2366,680,2367,2649,447,2358,554,1479,567,568,1450,2666,432,427,1409,679,402,427,2679,373,1175,416,592,577,337,696,275,541,706,282,1223,1782,1266,238,1783,1281,1172,195,187,0,2288,717,2311,107,1301,795,461,2315,581,90,718,1613,575,1164,97,779,695,705,97,709,579,97,785,1231,1206,1588,801,724,691,801,1666,1162,626,1126,123,689,2325,3016,810,3017,3018,2469,2470,2471,528,130,630,806,627,1631,1259,625,1369,530,616,538,136,1264,2288,1272,802,766,749,173,545,174,1243,1581,1748,1235,1217,2281,192,194,1292,1306,755,1699,1427,706,1741,1902,1692,211,634,197,1315,1294,1427,2028,655,685,632,219,1468,220,1470,1019,1592,748,236,237,619,1291,1251,658,0,244,1106,570,760,547,592,574,589,671,264,1501,2226,704,563,1516,1923,549,554,498,248,670,378,2250,554,708,559,1442,396,439,245,675,232,1138,505,604,743,358,2136,773,316,360,339,2137,616,2013,2015,1481,654,634,1158,613,554,315,353,539,1099,616,792,529,640,1171,737,1256,598,1044,398,599,512,282,287,553,1104,292,636,715,1901,1901,285,542,1605,515,514,520,679,657,525,419,527,504,270,630,996,475,674,0,471,516,653,715,928,521,431,433,413,303,285,549,2820,2732,675,2827,2832,438,703,704,2746,2747,470,270,720,534,256,421,481,694,509,2176,478,246,695,0,731,317,490,0,267,2787,2222,709,2789,2399,2395,280,593,2236,482,2415,2197,2820,500,1787,769,1189,490,1942,736,435,504,480,485,767,2720,1638,511,2196,2109,485,449,523,1543,788,699,736,2150,1371,801,1018,717,666,369,1096,1070,2175,638,706,453,578,1308,342,840,595,348,1349,326,1487,2505,1723,605,1429,2253,602,555,731,547,1725,1406,1148,1266,1715,1829,728,1402,2497,865,1713,629,576,927,1894,863,582,1473,1163,2552,1735,1478,1886,1589,1700,600,645,2034,1530,821,747,1468,552,1740,1940,1561,2553,632,631,1840,0,399,1660,0,1597,784,2733,977,1027,624,2682,2747,1988,424,2030,409,2042,2129,1963,2235,684,613,2270,2133,591,1575,789,916,965,416,674,894,2437,1520,1195,748,894,709,847,583,1650,576,1894,575,537,1506,2093,1603,431,894,2560,983,2560,819,1716,901,2839,710,978,1945,1988,1765,3259,436,967,786,957,0,808,569,766,1766,970,3281,1982,1792,1734,1140,2381,437,974,854,2015,737,0,812,1481,1043,1022,636,597,1361,979,2647,445,849,835,0,1005,835,1694,0,1290,0,3344,1997,732,1110,0,1589,0,1376,562,2495,1500,2508,2496,533,1833,481,816,1798,745,746,1363,1298,884,690,1421,1278,790,1214,1338,731,657,1201,522,524,525,1390,1212,540,542,0,2546,914,567,774,775,1245,775,910,781,780,1218,573,1372,1261,586,1503,901,1486,1488,2274,2275,1744,0,711,563,595,707,2267,590,607,604,1135,614,615,616,665,592,580,574,579,1769,584,0,1239,627,627,733,1940,1946,628,659,661,1469,1968,695,628,918,620,1878,0,893,1556,520,736,680,721,610,733,1841,718,516,688,716,528,3340,0,716,677,3263,1462,528,887,544,531,577,686,637,1244,0,717,1424,556,648,689,1662,653,803,769,658,2670,2541,725,0,2680,0,2684,1293,728,702,0,1409,688,685,569,679,727,752,659,630,634,612,617,613,640,613,794,621,804,688,620,622,637,2202,0,622,0,609,715,621,779,2221,1458,2212,0,1142,724,651,519,656,760,2745,710,2756,661,621,513,1903,1530,1131,564,723,2436,466,710,2766,1145,1513,0,1406,666,697,743,654,578,778,486,1373,666,671,702,672,1318,490,711,570,2301,1013,1459,684,1782,0,1222,1540,1173,574,491,1146,520,1424,522,504,1800,724,646,807,711,1980,1148,562,2218,674,0,714,526,542,2468,1036,2470,542,2470,543,653,1300,827,728,687,1262,548,0,525,1271,636,693,1253,2439,526,2036,542,1076,523,523,1236,656,2031,0,2358,764,659,2042,2049,853,655,1037,743,2284,3006,631,512,3024,2148,2401,645,1050,1225,1949,591,491,664,1135,1276,2099,2100,507,667,1057,2354,2355,2435,2462,492,664,1891,368,1920,1319,485,946,1885,3079,677,950,2346,574,1343,1047,663,1394,587,964,1247,579,579,2159,970,578,2636,1914,2162,973,531,967,556,501,645,1371,1481,530,0,0,984,1710,1721,517,1155,1201,1182,510,1985,1221,1558,511,1810,992,395,514,977,506,1236,1660,1185,1292,508,508,2043,564,1194,1999,2573,2576,436,1708,2015,572,427,446,812,516,1176,581,447,2002,2720,2597,568,458,1026,1021,2526,2526,1016,492,363,493,413,364,1830,711,463,0,497,2303,0,2152,379,587,2208,2400,473,488,465,364,508,387,1033,2400,2391,1278,1015,519,2215,474,2238,459,1043,458,474,2223,0,425,1819,1017,489,2234,2236,490,479,510,0,399,1024,463,1124,543,526,428,1105,449,504,2159,2097,486,1064,446,448,377,378,1860,2071,491,1830,439,374,395,477,478,2096,2762,2763,2764,1052,2259,2281,1832,389,481,2127,1151,0,496,0,485,498,492,493,1832,1835,2098,2747,462,1042,1070,408,2561,1764,2561,2563,806,2150,0,1671,2775,2195,416,583,1233,513,1097,1097,608,2027,2028,1761,1009,2124,1216,619,2046,627,473,1760,480,445,1018,475,2911,1984,2005,2496,2926,1997,2496,628,471,1677,0,466,0,2337,489,489,1134,2485,2340,454,981,335,471,632,1037,446,2213,463,2171,444,418,441,525,2182,445,648,1049,649,1030,425,408,393,2158,914,1025,0,0,432,730,516,662,661,434,1126,1830,359,352,439,448,498,0,956,294,441,935,478,285,284,2414,0,935,1427,382,0,904,858,880,1740,335,369,308,309,839,0,653,2472,2474,2475,2411,2413,514,831,1639,627,826,2384,2509,1982,1972,1972,308,1998,314,1423,2020,626,1666,317,1151,533,2529,340,809,467,1342,77,327,72,71,67,402,610,394,540,380,59,2055,349,72,0,564,537,2477,2486,2488,1608,2426,2426,566,566,1726,1707,623,369,1209,227,539,556,578,84,0,2462,284,1698,2007,2011,1042,349,997,622,2021,2177,150,604,1752,1518,620,587,983,2195,601,945,581,1555,1523,146,895,668,1464,640,2216,988,1262,417,952,1616,852,425,308,169,1584,1570,910,572,594,1125,408,1161,410,692,2693,312,2682,416,2675,1587,1336,1338,565,1338,0,557,1473,2713,654,1567,839,393,184,182,670,178,359,1629,2565,2570,986,2525,551,312,2525,903,936,2493,2482,2555,368,2421,498,294,491,645,2504,912,465,2580,283,317,833,2299,285,646,2474,2474,2474,399,2065,397,398,298,317,348,349,505,349,324,637,1984,323,629,2459,490,802,406,2103,0,503,1927,337,390,500,694,0,323,609,506,418,511,419,885,421,424,2265,2267,0,2034,350,319,324,1674,479,423,437,621,2167,0,1639,1606,1864,324,353,351,382,0,346,348,2126,2080,357,331,332,351,372,374,369,1625,1593,2101,1866,272,290,395,278,281,0,281,1665,355,362,2114,2041,398,467,1714,388,377,0,392,860,401,413,387,409,0,366,370,0,615,450,1123,1205,415,310,424,372,334,0,401,390,1024,388,526,410,391,0,400,416,419,799,733,372,439,2007,440,298,369,1146,522,439,2019,498,387,461,509,0,509,433,310,404,2030,512,446,536,1885,457,1885,515,0,437,447,0,1414,2049,371,363,1353,461,1996,381,453,381,1997,1141,465,466,335,452,456,534,522,526,1918,404,405,343,527,491,1048,528,1955,478,0,400,459,1980,861,0,1975,761,775,476,1002,477,695,471,0,1278,479,426,458,401,755,2447,571,565,0,1149,479,2447,2458,476,2122,544,1146,1129,1013,2429,537,2430,485,486,1008,487,855,500,730,465,2429,693,1924,1924,348,1926,516,1067,0,514,2156,2158,2158,343,222,3230,615,511,522,373,379,199,200,481,3233,3249,3067,202,482,483,218,203,205,539,422,208,214,543,205,500,502,0,408,1306,0,299,3097,1309,2962,190,194,195,324,184,959,578,579,838,330,2221,0,2255,2256,1817,2963,343,3001,490,354,986,0,573,861,861,864,455,126,1140,0,2866,339,2861,2861,659,2632,381,874,337,135,342,140,891,958,139,574,142,599,605,353,603,467,361,353,485,356,481,358,482,0,138,366,2667,150,367,355,556,383,2484,431,356,0,409,2564,2566,338,1030,362,0,321,1409,510,1423,350,0,1061,1061,352,799,212,343,0,362,2591,607,220,117,2394,1049,354,2399,701,2407,1049,64,66,66,1058,1082,1084,374,717,376,405,714,1084,1808,0,389,267,367,1958,394,2564,293,394,297,1225,97,1173,243,297,1113,165,285,2459,1120,2451,411,407,649,410,1116,295,97,1118,94,0,1109,1112,2463,713,2268,1997,2269,411,291,413,366,369,1070,1217,302,303,339,1117,284,2004,913,915,1343,2270,546,1345,1345,546,551,1898,286,1892,848,411,936,2327,141,484,907,1725,551,138,150,2025,693,587,2347,2330,1118,0,142,570,417,147,1094,444,1730,448,1141,448,72,160,707,2318,2031,78,1436,79,110,2313,470,80,471,1169,0,66,1170,461,730,1171,224,1162,2329,127,105,447,966,708,938,132,2292,134,86,301,1261,115,2297,106,662,123,301,124,92,124,2301,1075,492,2027,103,2028,494,2029,496,442,1989,852,386,93,2096,1985,2098,119,0,2029,1857,129,2031,2031,1848,0,113,811,109,2042,110,111,384,1835,357,1528,1529,1821,345,195,352,0,105,155,106,1973,1256,1257,1234,933,169,149,1259,171,134,137,78,1441,1195,127,1336,231,231,160,204,206,913,1099,1890,546,139,0,138,0,138,123,602,142,82,1119,210,211,212,0,87,182,164,126,128,2069,1388,128,169,574,0,1401,1505,181,45,246,25,244,315,1132,916,597,0,144,186,0,2285,2286,2287,323,115,378,630,894,117,125,172,172,174,127,175,2262,643,1693,643,790,133,449,780,130,187,134,859,293,456,134,456,651,457,195,2235,422,2230,2236,2237,2167,2168,0,0,134,1518,146,1520,146,138,1521,67,0,243,383,135,244,384,246,385,1622,1622,147,381,1516,382,707,0,151,257,0,136,829,247,235,140,237,236,239,1268,1285,161,1286,422,161,156,163,405,165,312,0,575,172,85,0,0,147,234,153,158,235,240,119,0,122,1038,140,126,931,0,240,162,256,153,0,140,262,324,171,774,428,0,79,160,159,226,891,257,169,0,1064,493,76,481,2363,0,93,2180,360,926,0,1354,274,2181,2183,2192,2189,121,2183,0,0,221,120,129,280,130,988,209,256,992,0,0,1547,283,1561,1559,229,115,93,296,350,96,98,99,244,103,0,942,0,254,244,86,250,0,935,112,168,279,203,59,1014,197,60,56,281,171,180,148,294,67,299,1068,155,0,305,33,157,35,209,0,0,189,222,227,168,296,58,0,176,60,599,307,187,561,180,211,177,276,180,184,0,223,224,498,99,193,0,222,463,192,1062,156,1062,0,228,232,1070,194,141,287,79,80,213,246,249,937,216,231,260,104,0,1265,0,1594,114,118,1601,117,237,119,1605,123,0,139,141,0,303,1102,1166,235,208,209,209,0,162,0,459,165,161,156,741,499,682,0,658,510,0,0,356,941,0,99,0,233,101,106,389,0,1365,162,1368,1374,92,94,13,95,80,360,134,0,29,19,14,18,19,43,20,460,0,52,721,32,0,52,0,143,33,86,35,101,37,102,101,41,65,187,0,163,68,0,79,60,808,302,298,125,0,356,0,74,0,0,28,391,91,38,42,40,43,165,0,49,46,51,50,26,25,25,24,61,99,0,75,0,47,0],\"pointRadius\":0}]}},\"bySeconds\":{\"data\":{\"labels\":[\"Début de la Simulation\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"2 s\",\"2 s\",\"2 s\",\"2 s\",\"\",\"2 s\",\"2 s\",\"2 s\",\"2 s\",\"\",\"\",\"\",\"\",\"2 s\",\"\",\"\",\"2 s\",\"2 s\",\"2 s\",\"2 s\",\"2 s\",\"2 s\",\"2 s\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"3 s\",\"\",\"\",\"\",\"\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"\",\"\",\"\",\"3 s\",\"\",\"2 s\",\"2 s\",\"2 s\",\"2 s\",\"2 s\",\"2 s\",\"2 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"\",\"3 s\",\"3 s\",\"3 s\",\"\",\"3 s\",\"3 s\",\"\",\"\",\"3 s\",\"3 s\",\"\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"\",\"3 s\",\"\",\"3 s\",\"3 s\",\"\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"\",\"3 s\",\"\",\"3 s\",\"3 s\",\"\",\"\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"4 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"4 s\",\"3 s\",\"3 s\",\"4 s\",\"4 s\",\"3 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"3 s\",\"4 s\",\"4 s\",\"3 s\",\"3 s\",\"4 s\",\"4 s\",\"3 s\",\"3 s\",\"3 s\",\"4 s\",\"4 s\",\"3 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"3 s\",\"4 s\",\"3 s\",\"4 s\",\"3 s\",\"4 s\",\"\",\"4 s\",\"3 s\",\"\",\"4 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"3 s\",\"4 s\",\"3 s\",\"3 s\",\"4 s\",\"4 s\",\"3 s\",\"4 s\",\"\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"\",\"4 s\",\"3 s\",\"4 s\",\"3 s\",\"3 s\",\"4 s\",\"4 s\",\"4 s\",\"3 s\",\"4 s\",\"4 s\",\"\",\"\",\"3 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"3 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"\",\"4 s\",\"\",\"4 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"3 s\",\"4 s\",\"\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"\",\"5 s\",\"\",\"5 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"\",\"4 s\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"\",\"\",\"4 s\",\"4 s\",\"4 s\",\"\",\"5 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"5 s\",\"\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"\",\"4 s\",\"\",\"4 s\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"\",\"5 s\",\"5 s\",\"4 s\",\"5 s\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"\",\"4 s\",\"4 s\",\"\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"\",\"5 s\",\"\",\"\",\"\",\"4 s\",\"5 s\",\"4 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"5 s\",\"4 s\",\"5 s\",\"4 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"4 s\",\"5 s\",\"5 s\",\"\",\"4 s\",\"5 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"\",\"5 s\",\"4 s\",\"\",\"5 s\",\"4 s\",\"5 s\",\"4 s\",\"\",\"5 s\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"5 s\",\"5 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"5 s\",\"4 s\",\"5 s\",\"\",\"\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"4 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"\",\"4 s\",\"\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"4 s\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"4 s\",\"5 s\",\"4 s\",\"5 s\",\"5 s\",\"5 s\",\"6 s\",\"5 s\",\"5 s\",\"6 s\",\"5 s\",\"5 s\",\"6 s\",\"5 s\",\"6 s\",\"5 s\",\"6 s\",\"\",\"4 s\",\"\",\"4 s\",\"\",\"4 s\",\"\",\"5 s\",\"\",\"\",\"5 s\",\"\",\"4 s\",\"\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"6 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"4 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"6 s\",\"\",\"6 s\",\"5 s\",\"5 s\",\"4 s\",\"5 s\",\"5 s\",\"5 s\",\"4 s\",\"5 s\",\"5 s\",\"6 s\",\"5 s\",\"5 s\",\"4 s\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"6 s\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"\",\"5 s\",\"\",\"5 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"5 s\",\"6 s\",\"6 s\",\"\",\"6 s\",\"5 s\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"6 s\",\"\",\"6 s\",\"6 s\",\"5 s\",\"5 s\",\"6 s\",\"\",\"6 s\",\"5 s\",\"6 s\",\"6 s\",\"\",\"\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"4 s\",\"4 s\",\"6 s\",\"6 s\",\"6 s\",\"4 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"\",\"6 s\",\"5 s\",\"6 s\",\"5 s\",\"\",\"6 s\",\"5 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"5 s\",\"6 s\",\"6 s\",\"\",\"5 s\",\"\",\"\",\"6 s\",\"5 s\",\"6 s\",\"5 s\",\"\",\"\",\"5 s\",\"5 s\",\"5 s\",\"6 s\",\"5 s\",\"5 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"5 s\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"6 s\",\"5 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"\",\"\",\"6 s\",\"6 s\",\"\",\"\",\"\",\"5 s\",\"6 s\",\"\",\"6 s\",\"6 s\",\"\",\"6 s\",\"6 s\",\"6 s\",\"\",\"\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"7 s\",\"6 s\",\"5 s\",\"6 s\",\"5 s\",\"6 s\",\"5 s\",\"6 s\",\"5 s\",\"5 s\",\"5 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"6 s\",\"7 s\",\"6 s\",\"7 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"7 s\",\"7 s\",\"6 s\",\"\",\"6 s\",\"\",\"6 s\",\"\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"7 s\",\"6 s\",\"\",\"7 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"7 s\",\"\",\"7 s\",\"7 s\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"7 s\",\"\",\"\",\"7 s\",\"5 s\",\"6 s\",\"6 s\",\"5 s\",\"6 s\",\"\",\"7 s\",\"\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"\",\"6 s\",\"\",\"7 s\",\"\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"7 s\",\"6 s\",\"5 s\",\"7 s\",\"\",\"\",\"\",\"6 s\",\"6 s\",\"6 s\",\"7 s\",\"7 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"7 s\",\"6 s\",\"7 s\",\"6 s\",\"\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"\",\"7 s\",\"7 s\",\"6 s\",\"\",\"6 s\",\"5 s\",\"7 s\",\"6 s\",\"7 s\",\"6 s\",\"7 s\",\"7 s\",\"6 s\",\"5 s\",\"6 s\",\"6 s\",\"7 s\",\"6 s\",\"\",\"5 s\",\"\",\"5 s\",\"7 s\",\"6 s\",\"6 s\",\"\",\"\",\"6 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"5 s\",\"\",\"6 s\",\"6 s\",\"7 s\",\"6 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"\",\"\",\"\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"\",\"7 s\",\"6 s\",\"\",\"7 s\",\"\",\"\",\"6 s\",\"7 s\",\"5 s\",\"5 s\",\"\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"6 s\",\"7 s\",\"7 s\",\"6 s\",\"6 s\",\"\",\"6 s\",\"6 s\",\"7 s\",\"7 s\",\"\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"5 s\",\"6 s\",\"7 s\",\"\",\"7 s\",\"6 s\",\"\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"6 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"\",\"6 s\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"\",\"\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"\",\"\",\"6 s\",\"7 s\",\"\",\"6 s\",\"\",\"6 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"5 s\",\"6 s\",\"7 s\",\"7 s\",\"5 s\",\"6 s\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"5 s\",\"6 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"6 s\",\"\",\"\",\"7 s\",\"\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"6 s\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"6 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"6 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"7 s\",\"\",\"7 s\",\"7 s\",\"7 s\",\"\",\"7 s\",\"\",\"8 s\",\"7 s\",\"7 s\",\"\",\"8 s\",\"7 s\",\"7 s\",\"8 s\",\"8 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"8 s\",\"7 s\",\"7 s\",\"\",\"7 s\",\"\",\"8 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"8 s\",\"\",\"7 s\",\"7 s\",\"7 s\",\"\",\"7 s\",\"\",\"7 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"7 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"6 s\",\"8 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"7 s\",\"8 s\",\"\",\"8 s\",\"8 s\",\"7 s\",\"6 s\",\"6 s\",\"7 s\",\"8 s\",\"7 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"7 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"7 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"6 s\",\"8 s\",\"6 s\",\"6 s\",\"8 s\",\"6 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"7 s\",\"6 s\",\"8 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"6 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"7 s\",\"7 s\",\"8 s\",\"7 s\",\"7 s\",\"7 s\",\"8 s\",\"8 s\",\"\",\"6 s\",\"8 s\",\"6 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"6 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"7 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"7 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"6 s\",\"6 s\",\"8 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"7 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"6 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"8 s\",\"8 s\",\"7 s\",\"7 s\",\"8 s\",\"7 s\",\"7 s\",\"8 s\",\"7 s\",\"7 s\",\"7 s\",\"8 s\",\"8 s\",\"9 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"9 s\",\"7 s\",\"9 s\",\"7 s\",\"8 s\",\"7 s\",\"8 s\",\"9 s\",\"9 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"\",\"9 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"9 s\",\"7 s\",\"7 s\",\"8 s\",\"8 s\",\"7 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"9 s\",\"8 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"9 s\",\"8 s\",\"9 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"9 s\",\"7 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"7 s\",\"8 s\",\"7 s\",\"7 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"9 s\",\"9 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"9 s\",\"8 s\",\"8 s\",\"9 s\",\"9 s\",\"8 s\",\"8 s\",\"9 s\",\"8 s\",\"8 s\",\"7 s\",\"7 s\",\"9 s\",\"8 s\",\"7 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"8 s\",\"9 s\",\"8 s\",\"\",\"9 s\",\"9 s\",\"8 s\",\"8 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"6 s\",\"6 s\",\"8 s\",\"6 s\",\"6 s\",\"9 s\",\"8 s\",\"8 s\",\"6 s\",\"6 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"7 s\",\"9 s\",\"9 s\",\"8 s\",\"\",\"8 s\",\"9 s\",\"9 s\",\"\",\"9 s\",\"6 s\",\"7 s\",\"8 s\",\"6 s\",\"7 s\",\"7 s\",\"9 s\",\"9 s\",\"7 s\",\"9 s\",\"7 s\",\"7 s\",\"6 s\",\"9 s\",\"7 s\",\"8 s\",\"8 s\",\"9 s\",\"7 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"7 s\",\"8 s\",\"9 s\",\"7 s\",\"7 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"7 s\",\"8 s\",\"9 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"8 s\",\"7 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"8 s\",\"7 s\",\"8 s\",\"9 s\",\"8 s\",\"7 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"9 s\",\"8 s\",\"7 s\",\"9 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"9 s\",\"8 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"9 s\",\"9 s\",\"7 s\",\"8 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"9 s\",\"9 s\",\"8 s\",\"\",\"9 s\",\"8 s\",\"\",\"8 s\",\"9 s\",\"7 s\",\"9 s\",\"9 s\",\"9 s\",\"7 s\",\"7 s\",\"8 s\",\"9 s\",\"8 s\",\"9 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"9 s\",\"9 s\",\"7 s\",\"8 s\",\"9 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"7 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"8 s\",\"9 s\",\"9 s\",\"8 s\",\"8 s\",\"8 s\",\"9 s\",\"9 s\",\"7 s\",\"9 s\",\"7 s\",\"9 s\",\"8 s\",\"9 s\",\"7 s\",\"9 s\",\"9 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"9 s\",\"7 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"\",\"9 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"7 s\",\"9 s\",\"9 s\",\"9 s\",\"\",\"9 s\",\"9 s\",\"8 s\",\"\",\"9 s\",\"\",\"7 s\",\"8 s\",\"9 s\",\"9 s\",\"\",\"8 s\",\"\",\"9 s\",\"9 s\",\"7 s\",\"8 s\",\"7 s\",\"7 s\",\"9 s\",\"8 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"\",\"7 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"8 s\",\"8 s\",\"\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"10 s\",\"\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"10 s\",\"9 s\",\"10 s\",\"8 s\",\"\",\"9 s\",\"9 s\",\"10 s\",\"9 s\",\"10 s\",\"9 s\",\"10 s\",\"9 s\",\"8 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"7 s\",\"\",\"10 s\",\"10 s\",\"7 s\",\"9 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"8 s\",\"8 s\",\"10 s\",\"\",\"8 s\",\"\",\"8 s\",\"9 s\",\"10 s\",\"10 s\",\"\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"8 s\",\"\",\"10 s\",\"\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"8 s\",\"9 s\",\"8 s\",\"\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"8 s\",\"10 s\",\"8 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"9 s\",\"9 s\",\"10 s\",\"10 s\",\"8 s\",\"10 s\",\"10 s\",\"8 s\",\"9 s\",\"9 s\",\"\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"8 s\",\"9 s\",\"9 s\",\"10 s\",\"9 s\",\"\",\"9 s\",\"9 s\",\"9 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"9 s\",\"10 s\",\"8 s\",\"10 s\",\"\",\"10 s\",\"10 s\",\"10 s\",\"8 s\",\"10 s\",\"8 s\",\"10 s\",\"8 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"9 s\",\"8 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"9 s\",\"\",\"8 s\",\"10 s\",\"10 s\",\"9 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"8 s\",\"8 s\",\"10 s\",\"10 s\",\"8 s\",\"9 s\",\"8 s\",\"10 s\",\"10 s\",\"9 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"9 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"9 s\",\"9 s\",\"10 s\",\"10 s\",\"9 s\",\"8 s\",\"10 s\",\"10 s\",\"8 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"8 s\",\"9 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"9 s\",\"10 s\",\"\",\"\",\"10 s\",\"9 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"9 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"9 s\",\"8 s\",\"8 s\",\"10 s\",\"9 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"8 s\",\"8 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"8 s\",\"8 s\",\"10 s\",\"10 s\",\"11 s\",\"10 s\",\"10 s\",\"11 s\",\"9 s\",\"10 s\",\"10 s\",\"\",\"10 s\",\"9 s\",\"\",\"9 s\",\"11 s\",\"10 s\",\"9 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"11 s\",\"10 s\",\"11 s\",\"10 s\",\"9 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"11 s\",\"10 s\",\"9 s\",\"\",\"11 s\",\"9 s\",\"10 s\",\"10 s\",\"9 s\",\"9 s\",\"10 s\",\"11 s\",\"10 s\",\"\",\"11 s\",\"10 s\",\"11 s\",\"10 s\",\"10 s\",\"10 s\",\"11 s\",\"10 s\",\"11 s\",\"10 s\",\"9 s\",\"9 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"9 s\",\"9 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"9 s\",\"8 s\",\"8 s\",\"8 s\",\"10 s\",\"9 s\",\"9 s\",\"9 s\",\"11 s\",\"11 s\",\"9 s\",\"10 s\",\"\",\"11 s\",\"\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"11 s\",\"10 s\",\"10 s\",\"11 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"10 s\",\"9 s\",\"\",\"9 s\",\"8 s\",\"9 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"10 s\",\"10 s\",\"11 s\",\"9 s\",\"9 s\",\"9 s\",\"10 s\",\"9 s\",\"10 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"9 s\",\"11 s\",\"11 s\",\"10 s\",\"\",\"11 s\",\"\",\"9 s\",\"11 s\",\"11 s\",\"10 s\",\"9 s\",\"9 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"9 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"9 s\",\"10 s\",\"10 s\",\"\",\"\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"9 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"\",\"10 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"9 s\",\"\",\"10 s\",\"10 s\",\"11 s\",\"\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"\",\"11 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"11 s\",\"10 s\",\"10 s\",\"11 s\",\"11 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"11 s\",\"9 s\",\"11 s\",\"10 s\",\"9 s\",\"11 s\",\"10 s\",\"11 s\",\"10 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"\",\"11 s\",\"11 s\",\"9 s\",\"9 s\",\"9 s\",\"10 s\",\"9 s\",\"9 s\",\"11 s\",\"11 s\",\"10 s\",\"10 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"\",\"9 s\",\"11 s\",\"10 s\",\"9 s\",\"9 s\",\"10 s\",\"11 s\",\"10 s\",\"11 s\",\"9 s\",\"9 s\",\"11 s\",\"11 s\",\"10 s\",\"10 s\",\"11 s\",\"11 s\",\"10 s\",\"9 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"9 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"9 s\",\"11 s\",\"9 s\",\"11 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"11 s\",\"10 s\",\"\",\"11 s\",\"10 s\",\"9 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"9 s\",\"9 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"9 s\",\"9 s\",\"9 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"9 s\",\"9 s\",\"9 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"9 s\",\"9 s\",\"\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"\",\"10 s\",\"10 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"\",\"11 s\",\"11 s\",\"10 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"12 s\",\"12 s\",\"\",\"12 s\",\"10 s\",\"11 s\",\"11 s\",\"10 s\",\"10 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"\",\"11 s\",\"11 s\",\"\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"12 s\",\"11 s\",\"11 s\",\"12 s\",\"\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"12 s\",\"12 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"\",\"11 s\",\"11 s\",\"12 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"10 s\",\"11 s\",\"\",\"11 s\",\"11 s\",\"\",\"10 s\",\"10 s\",\"12 s\",\"12 s\",\"11 s\",\"11 s\",\"10 s\",\"12 s\",\"11 s\",\"12 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"12 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"\",\"12 s\",\"12 s\",\"10 s\",\"11 s\",\"\",\"10 s\",\"11 s\",\"11 s\",\"12 s\",\"11 s\",\"12 s\",\"11 s\",\"12 s\",\"\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"\",\"11 s\",\"12 s\",\"10 s\",\"10 s\",\"12 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"10 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"11 s\",\"12 s\",\"11 s\",\"12 s\",\"10 s\",\"11 s\",\"10 s\",\"10 s\",\"12 s\",\"10 s\",\"12 s\",\"11 s\",\"\",\"12 s\",\"10 s\",\"10 s\",\"10 s\",\"12 s\",\"12 s\",\"9 s\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"9 s\",\"9 s\",\"9 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"\",\"12 s\",\"11 s\",\"\",\"12 s\",\"9 s\",\"11 s\",\"9 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"10 s\",\"\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"12 s\",\"9 s\",\"12 s\",\"12 s\",\"11 s\",\"\",\"12 s\",\"11 s\",\"11 s\",\"11 s\",\"12 s\",\"12 s\",\"11 s\",\"\",\"9 s\",\"12 s\",\"9 s\",\"9 s\",\"12 s\",\"10 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"\",\"12 s\",\"12 s\",\"10 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"10 s\",\"12 s\",\"12 s\",\"\",\"12 s\",\"10 s\",\"10 s\",\"12 s\",\"11 s\",\"12 s\",\"\",\"12 s\",\"11 s\",\"12 s\",\"11 s\",\"12 s\",\"\",\"11 s\",\"11 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"\",\"12 s\",\"10 s\",\"12 s\",\"12 s\",\"12 s\",\"10 s\",\"11 s\",\"12 s\",\"10 s\",\"12 s\",\"10 s\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"11 s\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"10 s\",\"\",\"12 s\",\"12 s\",\"12 s\",\"10 s\",\"12 s\",\"10 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"10 s\",\"11 s\",\"10 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"\",\"11 s\",\"11 s\",\"10 s\",\"12 s\",\"10 s\",\"10 s\",\"10 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"12 s\",\"11 s\",\"11 s\",\"12 s\",\"12 s\",\"10 s\",\"12 s\",\"10 s\",\"12 s\",\"12 s\",\"11 s\",\"10 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"10 s\",\"12 s\",\"12 s\",\"10 s\",\"10 s\",\"11 s\",\"\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"11 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"10 s\",\"10 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"10 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"11 s\",\"10 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"10 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"10 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"10 s\",\"11 s\",\"12 s\",\"10 s\",\"12 s\",\"10 s\",\"12 s\",\"10 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"10 s\",\"11 s\",\"10 s\",\"12 s\",\"\",\"10 s\",\"11 s\",\"12 s\",\"10 s\",\"10 s\",\"11 s\",\"\",\"12 s\",\"12 s\",\"12 s\",\"10 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"11 s\",\"11 s\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"13 s\",\"11 s\",\"11 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"11 s\",\"12 s\",\"12 s\",\"\",\"12 s\",\"\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"13 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"\",\"13 s\",\"12 s\",\"12 s\",\"13 s\",\"13 s\",\"11 s\",\"11 s\",\"13 s\",\"12 s\",\"12 s\",\"\",\"11 s\",\"11 s\",\"12 s\",\"13 s\",\"12 s\",\"13 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"\",\"13 s\",\"12 s\",\"\",\"10 s\",\"10 s\",\"10 s\",\"12 s\",\"13 s\",\"12 s\",\"12 s\",\"12 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"10 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"13 s\",\"12 s\",\"12 s\",\"13 s\",\"13 s\",\"13 s\",\"12 s\",\"12 s\",\"12 s\",\"13 s\",\"12 s\",\"12 s\",\"12 s\",\"13 s\",\"10 s\",\"12 s\",\"11 s\",\"10 s\",\"10 s\",\"11 s\",\"11 s\",\"\",\"\",\"13 s\",\"11 s\",\"13 s\",\"11 s\",\"13 s\",\"13 s\",\"11 s\",\"13 s\",\"\",\"13 s\",\"12 s\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"12 s\",\"11 s\",\"11 s\",\"13 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"\",\"13 s\",\"13 s\",\"\",\"13 s\",\"12 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"12 s\",\"12 s\",\"13 s\",\"12 s\",\"12 s\",\"13 s\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"12 s\",\"\",\"12 s\",\"13 s\",\"13 s\",\"\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"12 s\",\"13 s\",\"13 s\",\"12 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"12 s\",\"12 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"13 s\",\"\",\"12 s\",\"12 s\",\"13 s\",\"12 s\",\"11 s\",\"\",\"13 s\",\"11 s\",\"13 s\",\"12 s\",\"\",\"12 s\",\"13 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"13 s\",\"11 s\",\"\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"13 s\",\"12 s\",\"\",\"\",\"11 s\",\"13 s\",\"11 s\",\"11 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"12 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"12 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"12 s\",\"\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"12 s\",\"\",\"12 s\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"\",\"13 s\",\"13 s\",\"\",\"13 s\",\"12 s\",\"12 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"13 s\",\"\",\"\",\"13 s\",\"12 s\",\"\",\"13 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"12 s\",\"13 s\",\"12 s\",\"12 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"13 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"\",\"13 s\",\"\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"\",\"13 s\",\"\"],\"datasets\":[{\"label\":\"Requêtes Simultanées\",\"borderColor\":\"rgba(0, 128, 255, 1)\",\"fill\":false,\"data\":[0,0,0,0,0,0,0,0,0,1,4,8,7,0,5,2,3,6,0,0,0,0,2,0,0,4,2,9,3,7,8,13,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,16,10,8,15,12,20,13,0,0,0,25,0,11,14,10,5,13,14,7,29,25,33,27,27,30,29,0,33,14,17,25,22,12,18,28,21,25,28,0,33,28,33,0,27,29,0,0,29,66,0,19,33,33,28,33,71,34,23,74,33,75,71,32,0,73,26,72,44,33,69,33,30,37,31,34,0,38,0,75,41,0,78,69,66,44,77,33,35,0,77,49,75,78,77,79,37,0,51,51,48,78,0,41,81,31,79,0,53,77,77,78,78,39,44,65,81,52,81,48,45,62,77,63,54,61,55,79,64,68,79,48,83,77,78,79,82,0,82,0,82,76,0,0,80,74,78,81,82,68,81,81,82,77,80,75,81,82,57,81,83,79,66,0,82,82,80,72,81,83,64,68,78,80,73,78,69,83,79,74,0,75,75,79,79,77,82,81,80,57,81,0,78,77,0,78,77,0,78,81,58,81,82,79,81,82,59,82,0,0,76,81,82,81,0,81,0,80,60,82,80,73,81,79,92,82,79,76,0,0,82,81,80,82,76,0,81,81,77,80,76,81,88,80,87,126,0,83,112,129,79,84,88,82,102,100,120,84,120,99,119,131,98,121,81,132,123,133,127,124,82,119,77,134,0,133,0,134,0,135,0,143,140,80,0,128,83,134,84,0,147,81,83,0,0,79,97,147,131,138,128,148,80,81,132,0,156,0,81,166,168,144,83,131,170,135,171,149,178,82,177,0,147,118,151,161,157,159,177,167,159,0,95,130,160,146,0,178,78,132,164,177,154,162,165,0,84,0,177,107,198,87,117,204,146,80,209,179,81,203,133,120,156,0,78,119,0,212,0,213,118,154,213,80,0,122,178,214,216,75,81,76,134,0,0,182,161,178,178,183,126,0,184,189,78,177,184,185,202,0,0,189,83,193,0,193,202,194,0,195,190,196,208,0,121,197,212,182,206,0,171,199,0,193,211,211,200,154,0,0,165,191,105,0,212,197,211,198,204,90,210,209,203,214,133,202,198,215,204,206,145,203,215,210,95,207,207,209,214,0,215,204,143,79,95,214,146,79,208,145,0,95,0,203,207,202,96,89,211,144,147,109,157,213,168,100,0,203,211,179,212,217,214,77,169,80,180,213,85,113,85,211,133,109,86,210,0,167,125,0,212,215,196,201,81,138,213,212,215,105,172,175,0,147,212,168,176,211,140,0,217,0,0,0,206,214,141,211,204,213,207,142,176,197,214,180,152,181,210,213,125,216,127,213,206,202,214,225,126,210,215,0,112,211,113,212,115,178,0,216,152,0,203,92,215,92,0,227,214,218,203,161,207,216,218,211,173,217,189,183,196,213,212,201,227,0,0,214,214,209,213,209,216,212,216,216,208,112,222,200,218,205,227,0,206,214,208,213,0,115,0,151,207,102,156,103,0,203,202,126,201,213,211,214,203,136,214,212,201,137,219,179,213,201,210,212,214,184,206,168,198,212,200,206,206,214,207,212,209,209,200,216,200,217,0,95,0,178,0,178,0,201,0,0,199,0,129,0,206,212,200,200,214,220,106,0,175,106,207,215,116,177,208,210,208,205,198,218,181,212,208,202,211,0,208,208,205,208,0,210,207,203,207,212,207,212,0,205,215,206,143,207,203,214,151,208,204,216,223,226,152,206,208,153,177,216,162,221,207,208,163,164,0,212,0,215,218,219,222,219,216,213,207,214,218,219,0,219,204,220,219,237,208,227,226,216,226,221,0,220,228,209,208,227,0,219,214,218,225,0,0,214,221,217,220,224,204,184,186,217,237,221,187,226,223,218,224,219,200,221,231,220,226,0,219,215,224,212,0,228,215,226,217,220,220,224,203,210,226,219,0,204,0,0,217,203,227,216,0,0,211,215,204,234,205,219,223,259,220,230,222,236,231,201,206,221,221,220,223,231,230,228,217,232,231,221,211,216,217,239,199,242,203,246,247,216,246,247,234,248,0,0,253,238,0,0,0,212,217,0,261,241,0,225,209,242,0,0,242,238,223,207,214,239,240,213,217,215,225,204,240,225,239,215,277,231,213,228,208,239,202,262,212,221,213,241,243,223,240,240,214,229,263,236,264,228,240,242,229,239,231,243,240,253,230,244,239,240,231,200,266,268,234,0,238,0,253,0,238,243,238,233,270,238,0,277,239,253,228,242,244,275,0,280,275,238,243,242,203,282,0,0,275,207,241,238,208,222,0,276,0,238,218,228,230,0,216,0,281,0,219,218,232,230,248,238,220,245,204,253,254,238,0,227,242,255,260,239,261,243,247,242,253,285,247,215,282,0,0,0,242,224,243,263,287,225,242,257,226,242,247,264,264,227,266,267,0,206,268,277,281,276,281,0,262,281,276,280,247,292,0,281,293,264,0,262,209,282,264,292,267,293,285,248,208,265,266,279,267,0,207,0,205,295,232,267,0,0,210,220,291,296,270,218,229,286,292,297,215,0,223,232,281,218,227,295,297,291,267,298,0,0,0,239,263,299,298,272,0,292,235,0,291,0,0,240,276,204,206,0,295,307,242,277,296,300,244,230,295,311,209,237,0,260,264,297,304,0,211,303,304,296,313,291,223,224,267,298,0,314,230,0,263,316,312,300,314,229,299,226,231,294,293,297,240,286,296,294,298,290,294,292,296,294,312,299,293,297,0,229,301,298,262,294,295,295,0,0,295,299,310,294,0,291,298,300,295,296,0,0,237,297,0,243,0,261,244,297,292,311,297,300,290,309,293,201,226,294,312,201,240,301,304,253,303,202,218,239,297,298,298,252,238,0,0,290,0,310,299,300,302,277,241,296,296,314,311,232,316,301,297,301,225,221,297,295,236,311,233,233,281,283,296,311,319,301,226,306,310,238,299,214,239,311,310,315,237,238,281,297,282,310,313,239,297,313,0,313,283,281,0,314,0,306,311,312,0,306,286,317,306,305,226,314,304,316,304,286,309,0,302,0,303,241,285,319,302,242,284,295,0,293,280,293,0,316,0,307,313,304,298,292,276,306,305,290,281,282,294,301,299,304,292,292,293,280,304,301,309,302,287,311,298,310,292,307,317,293,307,312,294,226,294,305,311,313,314,318,301,306,306,316,299,316,0,299,307,313,219,222,297,314,296,287,315,314,318,316,321,322,299,309,298,295,304,313,322,316,317,316,304,309,302,302,328,316,319,315,319,237,299,238,232,319,239,317,299,316,317,309,232,319,317,317,299,322,316,237,328,297,323,317,321,339,301,337,319,305,336,298,288,302,339,288,294,302,341,348,0,238,308,238,358,297,303,322,238,317,358,309,291,317,299,355,298,313,314,354,313,318,356,303,304,299,305,304,314,317,307,291,311,319,313,351,321,244,215,311,216,217,240,242,243,327,343,320,314,319,311,300,319,296,332,317,333,343,301,249,301,312,322,318,343,333,344,309,312,299,314,314,255,344,345,305,301,315,312,294,320,299,301,316,341,328,345,307,311,300,290,329,324,333,345,296,346,296,299,308,320,347,348,336,315,306,333,0,351,303,343,317,340,336,343,338,339,353,301,280,333,338,302,291,341,340,347,359,336,356,281,343,339,340,307,354,364,354,335,360,298,349,341,335,350,295,338,358,353,358,296,343,293,293,310,344,339,307,353,350,357,362,364,315,348,334,355,347,318,338,299,353,317,358,358,344,361,359,357,320,361,350,342,314,315,363,343,304,339,342,340,350,349,342,355,344,352,365,353,327,364,350,0,362,359,363,352,338,359,367,365,367,367,370,348,246,249,363,246,248,367,358,360,250,251,368,372,362,360,376,360,369,355,356,301,370,393,356,0,358,373,366,0,394,257,302,343,258,301,301,393,353,301,359,301,316,260,358,312,353,326,358,300,342,367,360,365,370,342,272,295,370,313,307,364,392,369,313,351,358,357,300,320,355,349,369,359,399,345,352,297,360,363,400,363,333,405,358,365,404,329,401,317,301,299,364,323,298,385,392,363,394,299,321,354,344,307,300,365,329,312,355,313,393,402,363,288,370,402,324,350,304,313,325,292,316,316,401,394,306,322,359,365,331,400,314,293,323,316,399,402,302,0,406,318,0,318,365,293,367,359,401,297,294,300,410,289,410,288,305,303,309,401,400,309,304,400,338,395,370,358,409,405,364,298,341,354,400,370,404,393,397,333,403,314,402,407,339,296,336,413,392,301,366,300,400,327,393,297,406,370,315,315,319,273,423,364,400,370,0,404,410,403,324,371,275,314,319,331,365,311,424,372,405,314,406,0,404,351,370,363,404,410,343,374,302,425,399,405,0,384,406,334,0,361,0,275,321,398,369,0,348,0,350,418,304,362,304,310,425,327,425,400,334,404,403,359,362,404,408,344,370,399,362,357,407,414,362,424,425,426,363,363,427,428,0,314,404,426,406,408,368,409,401,407,405,365,424,361,367,426,344,405,353,353,299,300,341,0,413,439,428,421,311,435,438,435,402,441,441,442,426,439,444,443,441,349,442,0,391,439,439,426,339,340,441,442,443,362,341,439,439,411,438,348,0,413,362,454,442,443,443,449,438,351,442,466,439,442,465,295,0,438,438,314,366,466,424,468,466,462,452,454,406,0,438,383,469,454,449,358,456,441,438,457,290,306,445,0,290,0,289,405,447,451,0,398,456,456,467,456,453,450,462,468,467,470,469,471,467,473,442,469,451,454,473,474,469,338,0,474,0,472,454,473,454,339,405,343,0,409,464,474,471,474,453,301,468,301,473,468,477,359,398,414,471,465,322,480,466,301,413,398,0,406,468,472,467,465,471,465,478,404,466,466,473,467,407,477,473,481,343,443,405,465,359,0,414,403,423,483,477,426,477,401,477,485,362,464,472,469,466,361,425,477,348,471,0,464,481,482,335,439,335,483,335,484,479,413,470,459,474,424,486,0,486,423,483,479,425,335,489,363,491,436,492,492,426,482,357,0,343,461,478,357,359,473,478,450,471,354,301,477,496,303,355,343,484,457,442,367,492,499,486,451,441,359,360,500,482,450,358,359,343,345,498,482,386,483,367,430,491,465,391,303,481,464,360,496,430,466,491,427,498,464,437,505,504,365,466,506,334,393,365,467,492,466,497,480,495,433,421,486,0,0,465,403,402,481,463,457,455,480,373,450,410,481,406,458,478,482,465,483,452,407,463,450,484,487,370,481,462,392,352,350,477,411,394,482,479,477,483,482,468,483,478,393,334,352,481,478,471,470,354,358,473,479,486,478,480,487,401,501,477,0,479,362,0,366,488,483,360,351,477,479,476,497,478,488,471,353,358,463,481,478,362,477,362,478,480,489,478,363,0,489,398,484,479,367,367,480,489,476,0,496,485,489,463,480,477,486,473,486,477,376,391,489,481,490,490,486,488,402,400,489,405,494,487,487,493,496,402,345,345,346,479,368,368,409,488,494,398,481,0,495,0,497,498,496,496,408,409,401,350,491,484,482,484,356,418,358,358,482,404,0,438,350,398,484,490,469,496,479,480,489,402,404,424,493,401,481,489,403,491,484,424,484,497,498,483,343,411,411,363,343,406,360,492,497,441,0,490,0,387,487,492,486,361,389,490,502,477,491,495,496,487,404,488,402,486,473,485,494,402,484,496,494,497,505,472,478,475,402,483,502,0,0,475,489,491,496,496,477,497,430,462,457,481,473,485,0,480,430,478,485,474,425,425,389,0,485,460,460,0,482,477,481,442,433,443,427,428,478,0,484,379,379,383,394,394,473,489,463,485,489,404,367,424,425,425,429,421,430,479,422,497,461,430,501,475,368,421,488,465,479,391,431,392,399,400,432,486,428,477,427,405,423,432,406,0,477,476,399,401,401,468,401,403,475,475,464,467,474,425,498,395,470,470,476,409,0,403,400,470,438,441,479,412,479,477,441,412,403,476,468,483,477,469,488,412,475,492,463,478,482,406,496,478,482,476,413,489,496,413,486,474,483,414,394,404,485,485,495,440,454,479,404,488,405,479,375,400,391,406,393,485,503,503,429,504,0,427,490,379,462,478,496,402,396,399,464,401,394,484,401,404,497,403,425,395,405,486,487,402,400,404,395,404,414,399,410,441,401,486,404,405,404,398,485,413,406,430,399,400,401,402,438,404,404,409,409,399,399,403,400,404,423,451,409,426,406,402,476,398,443,0,400,467,409,392,398,429,0,401,426,397,395,397,397,473,397,395,432,432,0,457,404,404,400,485,403,398,391,412,441,0,492,493,469,406,398,401,401,0,410,410,452,457,410,408,410,404,404,406,407,498,497,454,477,422,421,397,432,428,0,433,492,406,407,457,468,399,406,486,410,410,0,407,440,408,410,409,407,0,420,420,0,393,397,492,490,409,427,410,421,432,0,419,421,482,416,406,419,422,0,419,420,419,423,404,423,411,461,413,429,431,496,401,416,461,401,423,415,400,0,401,424,426,425,462,406,419,399,479,419,479,407,0,422,421,0,485,462,427,429,495,421,483,431,424,433,484,484,423,424,422,421,421,411,413,411,482,427,429,419,415,422,454,415,478,423,0,429,431,478,405,0,478,400,397,430,427,430,400,431,0,497,427,424,427,423,406,445,416,418,0,476,425,447,450,427,474,421,469,462,425,453,425,453,429,431,430,433,398,424,407,428,451,402,496,497,391,496,426,427,0,424,479,479,480,391,358,383,424,427,433,390,391,358,359,424,383,384,403,361,419,420,358,363,365,427,396,365,361,429,357,422,422,0,392,477,0,361,405,481,407,361,363,363,360,357,395,429,430,403,361,474,0,477,477,484,407,363,411,397,363,398,0,419,405,407,405,388,339,426,0,414,356,415,418,425,439,361,398,359,338,358,336,405,403,344,420,342,420,418,358,422,386,357,365,388,362,388,362,389,0,346,366,441,344,359,360,400,359,470,364,360,0,360,459,459,363,395,361,0,357,481,390,481,356,0,395,398,357,420,340,361,0,359,463,408,339,310,465,397,358,465,426,469,404,273,272,274,405,398,398,360,423,361,359,421,397,490,0,360,343,361,486,360,470,352,359,351,414,274,407,345,353,396,308,344,469,398,472,358,367,397,365,400,344,274,400,258,0,405,404,473,416,486,487,489,365,338,361,348,350,392,407,342,344,353,404,343,488,424,424,428,489,360,428,430,361,359,477,338,485,427,349,424,483,254,360,432,485,361,252,252,479,388,362,482,491,400,0,252,362,352,251,410,350,490,349,394,352,206,252,390,496,479,211,423,210,212,498,352,209,352,394,0,208,398,348,389,398,258,403,498,211,206,352,430,376,427,212,495,212,209,296,401,210,494,206,359,208,290,210,211,211,496,406,353,477,211,479,353,479,351,344,489,409,339,215,478,490,480,208,0,488,485,208,488,489,485,0,215,389,212,481,212,213,322,490,293,424,424,497,284,207,287,0,206,211,207,490,403,405,409,417,213,215,403,213,209,209,180,405,398,207,402,206,207,212,208,208,408,423,494,338,208,0,198,0,198,189,351,198,176,428,212,213,214,0,174,210,200,174,174,493,404,178,200,339,0,404,407,196,159,212,167,214,212,425,385,346,0,173,187,0,479,481,481,207,167,235,343,363,167,166,173,176,176,166,177,480,346,423,347,360,167,253,362,166,177,166,367,212,253,165,254,346,254,176,482,240,489,482,485,490,493,0,0,167,403,163,403,163,161,403,160,0,178,208,163,179,210,179,211,405,405,161,207,404,208,342,0,160,174,0,164,362,180,174,163,174,176,175,428,432,162,432,206,164,167,164,208,164,194,0,272,162,159,0,0,165,167,164,163,169,167,163,0,160,375,159,160,361,0,169,158,169,159,0,160,168,175,160,342,212,0,127,159,159,163,358,162,159,0,363,206,114,208,490,0,116,483,173,357,0,428,163,496,496,486,494,118,497,0,0,159,115,115,164,118,365,161,159,365,0,0,404,164,398,400,162,102,101,167,165,99,99,101,162,104,0,351,0,162,160,111,160,0,351,99,104,163,118,98,354,118,99,100,165,105,105,104,163,100,163,367,101,0,165,87,104,89,120,0,0,102,120,118,103,156,85,0,104,94,213,150,102,193,109,100,111,117,111,109,0,99,100,169,92,111,0,105,159,115,350,99,351,0,108,105,351,112,90,104,71,72,115,108,108,304,115,112,109,70,0,365,0,428,74,72,428,79,106,79,425,77,0,81,81,0,109,343,348,94,87,89,92,0,76,0,154,76,83,80,208,163,178,0,171,163,0,0,104,253,0,49,0,86,52,50,99,0,367,69,365,365,45,45,27,46,46,111,52,0,30,31,28,26,30,29,30,105,0,29,172,28,0,30,0,43,30,32,32,31,32,32,33,30,29,52,0,46,28,0,29,30,172,74,82,34,0,94,0,33,0,0,9,92,25,5,4,8,8,31,0,8,9,8,11,7,9,10,11,12,6,0,10,0,8,0],\"pointRadius\":0}]}}}}",
        "payloadType": "json",
        "x": 290,
        "y": 980,
        "wires": [
            [
                "f08e7523356969c2"
            ]
        ]
    },
    {
        "id": "e2439077e9c87dc3",
        "type": "function",
        "z": "d3f49513ee177da2",
        "name": "Ajoute le chemin du fichier ",
        "func": "var now = new Date();\nvar jour = (\"0\" + now.getDate()).slice(-2);\nvar mois = (\"0\" + (now.getMonth() + 1)).slice(-2);\n\n// Récupérer le nom de fichier de msg.payload.nameFile, ou utiliser \"default\" si absent\nvar nameFile = msg.payload.gatling.Original.nameFile || \"default\";\n// Remplacer les caractères interdits dans le nom de fichier par des underscores\nnameFile = nameFile.replace(/[\\\\/:\"*?<>|]+/g, \"_\");\n\n// Construire le chemin du fichier PDF\nmsg.filePath = \"/home/NodeRed/pdf/\" + nameFile + \"_\" + msg.payload.gatling.Original.time + \"Min_\" + jour + mois + \"js.pdf\";\n\n// Construire les chemins des fichiers graphiques\nmsg.graphPath = {\n    volt: {\n        complet: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.gatling.Original.time + \"Min_\" + jour + mois + \"VOLTjs.png\",\n        cpu: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.gatling.Original.time + \"Min_\" + jour + mois + \"vcpujs.png\",\n        ram: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.gatling.Original.time + \"Min_\" + jour + mois + \"vramjs.png\",\n        proc: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.gatling.Original.time + \"Min_\" + jour + mois + \"vprocjs.png\",\n        temp: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.gatling.Original.time + \"Min_\" + jour + mois + \"vtempjs.png\",\n        watt: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.gatling.Original.time + \"Min_\" + jour + mois + \"vwattjs.png\"\n    },\n    nidus: {\n        complet: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.gatling.Original.time + \"Min_\" + jour + mois + \"NIDUSjs.png\",\n        cpu: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.gatling.Original.time + \"Min_\" + jour + mois + \"ncpujs.png\",\n        ram: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.gatling.Original.time + \"Min_\" + jour + mois + \"nramjs.png\",\n        proc: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.gatling.Original.time + \"Min_\" + jour + mois + \"nprocjs.png\",\n        temp: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.gatling.Original.time + \"Min_\" + jour + mois + \"ntempjs.png\"\n    },\n    gatling: {\n        complet: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.gatling.Original.time + \"Min_\" + jour + mois + \"gatlingjs.png\",\n        pass: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.gatling.Original.time + \"Min_\" + jour + mois + \"passjs.png\",\n        bySeconds: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.gatling.Original.time + \"Min_\" + jour + mois + \"bySecondsjs.png\",\n        //proc: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"nproc.png\",\n        //temp: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"ntemp.png\"\n    },\n    json :{\n        complet: \"/home/NodeRed/json/\" + nameFile + \"_\" + msg.payload.gatling.Original.time + \"Min_\" + jour + mois + \"Complet.json\",\n    }\n};\nmsg.topic = \"original\"\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 940,
        "wires": [
            [
                "a21f8150f8bd9c39",
                "dfb06f1dcafba65d",
                "d1aa4e393678f4fe",
                "86e610107a77718e",
                "915126411aa8e399",
                "b9a352636a61129d",
                "252db462cdba8e38"
            ]
        ]
    },
    {
        "id": "7a2bb985f72fbbb2",
        "type": "function",
        "z": "d3f49513ee177da2",
        "name": "Moyenne",
        "func": "// Tableaux de données d'entrée\nvar wattData = msg.payload.Watt;\nvar voltData = msg.payload.volt;\nvar nidusData = msg.payload.nidus;\n\n// Fonction pour calculer la moyenne d'un tableau de données\nfunction calculateAverage(data) {\n    var sum = 0;\n    for (var i = 0; i < data.length; i++) {\n        sum += parseFloat(data[i]);\n    }\n    return (sum / data.length).toFixed(2);\n}\n\n// Calcul des moyennes\nvar moyenne = {\n    \"Watt\": calculateAverage(wattData),\n    \"volt/benchmark/cpu\": calculateAverage(voltData['volt/benchmark/cpu']),\n    \"volt/benchmark/ram\": calculateAverage(voltData['volt/benchmark/ram']),\n    \"volt/benchmark/processes\": calculateAverage(voltData['volt/benchmark/processes']),\n    \"volt/benchmark/temp\": calculateAverage(voltData['volt/benchmark/temp']),\n    \"nidus/benchmark/cpu\": calculateAverage(nidusData['nidus/benchmark/cpu']),\n    \"nidus/benchmark/ram\": calculateAverage(nidusData['nidus/benchmark/ram']),\n    \"nidus/benchmark/processes\": calculateAverage(nidusData['nidus/benchmark/processes']),\n    \"nidus/benchmark/temp\": calculateAverage(nidusData['nidus/benchmark/temp']),\n    \"bySeconds\": calculateAverage(wattData)\n};\n\nmsg.moyenne = moyenne;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1160,
        "wires": [
            [
                "fbabe8d6af492a99"
            ]
        ]
    },
    {
        "id": "fbabe8d6af492a99",
        "type": "change",
        "z": "d3f49513ee177da2",
        "name": "Organise Payload-Topic",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "moyenne",
                "tot": "msg",
                "dc": true
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "moyenne",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 1400,
        "wires": [
            [
                "252db462cdba8e38"
            ]
        ]
    },
    {
        "id": "8bbddc96986f146e",
        "type": "join",
        "z": "d3f49513ee177da2",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 850,
        "y": 1380,
        "wires": [
            [
                "0f72891b2e8d42c2",
                "9879e350c33d3a1d",
                "76466e9a1cc52f50",
                "08699e97519c8893",
                "1f46fbef1d033a11",
                "609dd180b15cc79b",
                "ccadae5bf5845fa0"
            ]
        ]
    },
    {
        "id": "ccadae5bf5845fa0",
        "type": "change",
        "z": "d3f49513ee177da2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "stats",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1270,
        "y": 1460,
        "wires": [
            [
                "72f5c909f4bcb85b"
            ]
        ]
    },
    {
        "id": "6f25a04902ba1d25",
        "type": "comment",
        "z": "a922dcbcf6a2e8c4",
        "name": "File Browser",
        "info": "1) Update the default folder in the Init node\n2) Update the default folder in the Reset node as well\n3) You can duplicate the Reset nodes and use them as saved shortcuts\n4) Check the Convert Timestamps function node if you want to see your dates in a different format. I just used the Javascript toISOString format.\n5) The Graph button can read any CSV file which have any number of values, but the first column always contains a timestamp column with javascript timestamp of the data point.",
        "x": 530,
        "y": 200,
        "wires": []
    },
    {
        "id": "1c4e8ca2e74e3c5c",
        "type": "inject",
        "z": "a922dcbcf6a2e8c4",
        "name": "Init",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "change",
        "payload": "/home/NodeRed/pdf",
        "payloadType": "str",
        "x": 530,
        "y": 360,
        "wires": [
            [
                "345ba0404594d119"
            ]
        ]
    },
    {
        "id": "79e20eb04483680c",
        "type": "ui_button",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "group": "7a02dc45cdd22958",
        "order": 7,
        "width": 4,
        "height": 2,
        "passthru": true,
        "label": "Refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "refresh",
        "payload": "/home/NodeRed/pdf",
        "payloadType": "str",
        "topic": "change",
        "topicType": "str",
        "x": 540,
        "y": 400,
        "wires": [
            [
                "345ba0404594d119"
            ]
        ]
    },
    {
        "id": "3843583d460371ed",
        "type": "ui_template",
        "z": "a922dcbcf6a2e8c4",
        "group": "7a02dc45cdd22958",
        "name": "",
        "order": 4,
        "width": 18,
        "height": "6",
        "format": "<div ng-bind-html=\"msg.payload\" height=\"400\" style=\"height: 400px;\"><br/>\n</div>\n<style>\n/* Applique des styles aux liens */\na[href] {\ncolor: #d93347; /* Couleur du lien */\ntext-decoration: none; /* Pas de soulignement */\n}\n\n/* Applique des styles au survol des liens */\na[href]:hover {\ncolor: #cb0505; /* Couleur du lien au survol */\ntext-decoration: underline; /* Soulignement au survol */\n}\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1520,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "c6bd58acb05c9d54",
        "type": "template",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<table width=\"100%\">\n    <tr><th>Nom de Fichier</th><th>Taille</th><th>Créer</th><th>Changer</th></tr>\n    {{#payload}}\n        <tr>\n            <td><a href=\"/download?filename={{name}}\" target=\"blank\">{{fname}}</a></td>\n            <td>{{stat.size}}</td>\n            <td>{{stat.created}}</td>\n            <td>{{stat.changed}}</td>\n        </tr>\n    {{/payload}}\n</table>\n",
        "output": "str",
        "x": 1360,
        "y": 400,
        "wires": [
            [
                "3843583d460371ed"
            ]
        ]
    },
    {
        "id": "f95104a3aeee341f",
        "type": "function",
        "z": "a922dcbcf6a2e8c4",
        "name": "Convert timestamps",
        "func": "// Parcourir chaque élément dans le tableau \"payload\" du message\nfor (var i = 0; i < msg.payload.length; i++) {\n    // Formater et mettre à jour les propriétés de date/heure dans l'objet \"stat\"\n    msg.payload[i].stat.created = msg.payload[i].stat.created.toISOString().slice(0, 19).replace('T', ' ');\n    msg.payload[i].stat.changed = msg.payload[i].stat.changed.toISOString().slice(0, 19).replace('T', ' ');\n    msg.payload[i].stat.accessed = msg.payload[i].stat.accessed.toISOString().slice(0, 19).replace('T', ' ');\n    msg.payload[i].stat.statusChanged = msg.payload[i].stat.statusChanged.toISOString().slice(0, 19).replace('T', ' ');\n\n    // Extraire le nom de fichier à partir de la propriété \"name\" et mettre à jour \"fname\"\n    msg.payload[i].fname = msg.payload[i].name.replace(/^.*(\\\\|\\/|\\:)/, '');\n}\n\nreturn msg; // Renvoyer le message modifié\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 400,
        "wires": [
            [
                "c6bd58acb05c9d54"
            ]
        ]
    },
    {
        "id": "7ffab4b6bb62d3ba",
        "type": "http in",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "url": "/download",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 620,
        "y": 460,
        "wires": [
            [
                "1aeacf9bcd562aad"
            ]
        ]
    },
    {
        "id": "a9096e33e13a15fa",
        "type": "http response",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1410,
        "y": 460,
        "wires": []
    },
    {
        "id": "1aeacf9bcd562aad",
        "type": "function",
        "z": "a922dcbcf6a2e8c4",
        "name": "Get the file name",
        "func": "msg.filename = msg.req.query.filename;\nmsg.contentdisposition = \"attachment; filename=\\\"\" + msg.req.query.filename.replace(/^.*(\\\\|\\/|\\:)/, '') + \"\\\"\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 870,
        "y": 460,
        "wires": [
            [
                "0c825041986df20c"
            ]
        ],
        "outputLabels": [
            "Folder selected",
            "File selected"
        ]
    },
    {
        "id": "0c825041986df20c",
        "type": "file in",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "filename": "",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 1060,
        "y": 460,
        "wires": [
            [
                "89587c20b7da1a31"
            ]
        ]
    },
    {
        "id": "89587c20b7da1a31",
        "type": "change",
        "z": "a922dcbcf6a2e8c4",
        "name": "Set Headers",
        "rules": [
            {
                "t": "set",
                "p": "headers",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "headers.content-type",
                "pt": "msg",
                "to": "text/csv",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "headers.Content-Disposition",
                "pt": "msg",
                "to": "contentdisposition",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1230,
        "y": 460,
        "wires": [
            [
                "a9096e33e13a15fa"
            ]
        ]
    },
    {
        "id": "345ba0404594d119",
        "type": "function",
        "z": "a922dcbcf6a2e8c4",
        "name": "Folder handling",
        "func": "// Récupérer la valeur de la variable \"folder\" depuis le contexte\nlet folder = context.get(\"folder\");\n// Si la variable \"folder\" n'est pas définie, l'initialiser avec \"/\"\nif (folder === undefined) {\n    folder = \"/\";\n    context.set(\"folder\", folder); // Enregistrer la valeur dans le contexte\n}\n\n// Récupérer la valeur de la variable \"hidden\" depuis le contexte\nlet hidden = context.get(\"hidden\");\n// Si la variable \"hidden\" n'est pas définie, l'initialiser avec \"false\"\nif (hidden === undefined) {\n    hidden = false;\n    context.set(\"hidden\", hidden); // Enregistrer la valeur dans le contexte\n}\n\n// Si le sujet du message est \"up\"\nif (msg.topic === \"up\") {\n    var the_arr = folder.split('/');\n    the_arr.pop(); // Supprimer le dernier élément du tableau\n    folder = the_arr.join('/'); // Rejoindre les éléments du tableau pour former le nouveau chemin\n    context.set(\"folder\", folder); // Enregistrer le nouveau chemin dans le contexte\n}\n\n// Si le sujet du message est \"change\"\nif (msg.topic === \"change\") {\n    folder = msg.payload; // Mettre à jour la valeur de \"folder\" avec le contenu du champ \"payload\"\n    context.set(\"folder\", folder); // Enregistrer la nouvelle valeur dans le contexte\n}\n\n// Si le sujet du message est \"hidden\"\nif (msg.topic === \"hidden\") {\n    hidden = msg.payload; // Mettre à jour la valeur de \"hidden\" avec le contenu du champ \"payload\"\n    context.set(\"hidden\", hidden); // Enregistrer la nouvelle valeur dans le contexte\n}\n\n// Construire un objet JSON contenant les valeurs actuelles de \"folder\" et \"hidden\"\nmsg.payload = { \"start\": folder, \"hidden\": hidden };\n\nreturn msg; // Renvoyer le message modifié\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 400,
        "wires": [
            [
                "e2bc16ad279f51a2"
            ]
        ]
    },
    {
        "id": "e2bc16ad279f51a2",
        "type": "fs-file-lister",
        "z": "a922dcbcf6a2e8c4",
        "name": "Files",
        "start": "/home/pi",
        "pattern": "*.*",
        "folders": "*",
        "hidden": false,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": true,
        "showWarnings": false,
        "x": 930,
        "y": 400,
        "wires": [
            [
                "f95104a3aeee341f"
            ]
        ]
    },
    {
        "id": "be74b8b65e1283ad",
        "type": "pdfmake",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "outputType": "base64",
        "inputProperty": "payload",
        "options": "{}",
        "outputProperty": "payload",
        "x": 1860,
        "y": 820,
        "wires": [
            [
                "136f6a4ec149ad92"
            ]
        ]
    },
    {
        "id": "136f6a4ec149ad92",
        "type": "file",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "filename": "filepath",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "base64",
        "x": 2000,
        "y": 820,
        "wires": [
            [
                "906750247874af8d"
            ]
        ]
    },
    {
        "id": "ccfddceb0c81ceb6",
        "type": "function",
        "z": "a922dcbcf6a2e8c4",
        "name": "Ajoute le chemin du fichier ",
        "func": "var now = new Date();\nvar jour = (\"0\" + now.getDate()).slice(-2);\nvar mois = (\"0\" + (now.getMonth() + 1)).slice(-2);\n\n// Récupérer le nom de fichier de msg.payload.nameFile, ou utiliser \"default\" si absent\nvar nameFile = msg.payload.nameFile || \"default\";\n// Remplacer les caractères interdits dans le nom de fichier par des underscores\nnameFile = nameFile.replace(/[\\\\/:\"*?<>|]+/g, \"_\");\n\n// Construire le chemin du fichier PDF\nmsg.filePath = \"/home/NodeRed/pdf/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \".pdf\";\n\n// Construire les chemins des fichiers graphiques\nmsg.graphPath = {\n    volt: {\n        complet: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"VOLT.png\",\n        cpu: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"vcpu.png\",\n        ram: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"vram.png\",\n        proc: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"vproc.png\",\n        temp: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"vtemp.png\",\n        watt: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"vwatt.png\"\n    },\n    nidus: {\n        complet: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"NIDUS.png\",\n        cpu: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"ncpu.png\",\n        ram: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"nram.png\",\n        proc: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"nproc.png\",\n        temp: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"ntemp.png\"\n    },\n    gatling: {\n        complet: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"gatling.png\",\n        pass: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"pass.png\",\n        //ram: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"nram.png\",\n        //proc: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"nproc.png\",\n        //temp: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"ntemp.png\"\n    }\n};\n\n// Renvoyer le message modifié\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 880,
        "wires": [
            [
                "2f480a709148df91"
            ]
        ]
    },
    {
        "id": "2764d5f2f9d5d843",
        "type": "ui_form",
        "z": "a922dcbcf6a2e8c4",
        "name": "Configuration du Test",
        "label": "",
        "group": "7a02dc45cdd22958",
        "order": 5,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Nom du Fichier",
                "value": "nameFile",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Temps de mesure en minutes",
                "value": "time",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Stress test Nidus",
                "value": "stressNidus",
                "type": "checkbox",
                "required": true,
                "rows": null
            },
            {
                "label": "Stress test Volt",
                "value": "stressVolt",
                "type": "checkbox",
                "required": true,
                "rows": null
            },
            {
                "label": "Temps de Stress test",
                "value": "timeStress",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Temps de montée",
                "value": "time_gatling",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Nombre d'utilisateur",
                "value": "user_gatling",
                "type": "text",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "nameFile": "",
            "time": "",
            "stressNidus": false,
            "stressVolt": false,
            "timeStress": "",
            "time_gatling": "",
            "user_gatling": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": false,
        "className": "",
        "x": 300,
        "y": 880,
        "wires": [
            [
                "b975eb740154e03e",
                "ccfddceb0c81ceb6",
                "8460edb64649c3a2"
            ]
        ]
    },
    {
        "id": "85f75875ce5072e4",
        "type": "function",
        "z": "a922dcbcf6a2e8c4",
        "name": "Créer le contenue du fichier",
        "func": "// Création des données pour le rapport PDF\nmsg.payload = {\n    header: function (currentPage, pageCount, pageSize) {\n        return [\n            {\n                text: \"Tobler Cyril\", // Votre nom\n                alignment: \"left\",\n                fontSize: 10,\n                margin: [15, 10, 0, 0]\n            },\n            {\n                text: \"Nom du projet : Confuse T-Rex\", // Nom de votre projet\n                alignment: \"center\",\n                fontSize: 10,\n                margin: [0, 0, 0, 0]\n            }\n        ];\n    },\n    footer: function (currentPage, pageCount) {\n        return {\n            columns: [\n                {\n                    text: currentPage.toString() + \" / \" + pageCount, // Numéro de page actuel / Nombre total de pages\n                    alignment: \"left\",\n                    fontSize: 10,\n                    margin: [15, 0, 0, 10]\n                },\n                {\n                    text: new Date().toLocaleDateString(\"fr-FR\"), // Date actuelle au format français\n                    alignment: \"right\",\n                    fontSize: 10,\n                    margin: [0, 0, 15, 10]\n                }\n            ],\n            margin: [0, 0, 0, 10]\n        };\n    },\n    content: [\n        {\n            text: \"Rapport d'utilisation\", // Titre du rapport\n            style: \"header\",\n            margin: [0, 10, 0, 0]\n        },\n        {\n            text: \"Les valeurs sont des moyennes sur les \" + Math.floor(msg.delay / (1000 * 60)) + \" dernières minutes\" // Informations sur les valeurs\n        },\n        {\n            text: \"Nidus :\", // Section Nidus\n            style: \"header2\"\n        },\n        {\n            text: \"CPU :                 \" + msg.payload.moyenne[\"nidus/benchmark/cpu\"] // Valeur CPU de Nidus\n        },\n        {\n            text: \"RAM :                 \" + msg.payload.moyenne[\"nidus/benchmark/ram\"] // Valeur RAM de Nidus\n        },\n        {\n            text: \"Nombre de processus : \" + msg.payload.moyenne[\"nidus/benchmark/processes\"] // Nombre de processus de Nidus\n        },\n        {\n            text: \"Température CPU :     \" + msg.payload.moyenne[\"nidus/benchmark/temp\"] // Température CPU de Nidus\n        },\n        {\n            image: 'nidusImage', // Image de Nidus\n            width: 500,\n            pageBreak: 'after', // Saut de page après l'image\n        },\n        {\n            text: \"Volt\", // Section Volt\n            style: \"header2\"\n        },\n        {\n            text: \"CPU :                 \" + msg.payload.moyenne[\"volt/benchmark/cpu\"] // Valeur CPU de Volt\n        },\n        {\n            text: \"RAM :                 \" + msg.payload.moyenne[\"volt/benchmark/ram\"] // Valeur RAM de Volt\n        },\n        {\n            text: \"Nombre de processus : \" + msg.payload.moyenne[\"volt/benchmark/processes\"] // Nombre de processus de Volt\n        },\n        {\n            text: \"Température CPU :     \" + msg.payload.moyenne[\"volt/benchmark/temp\"] // Température CPU de Volt\n        },\n        {\n            text: \"MilliWatt :           \" + msg.payload.moyenne[\"volt/benchmark/watt\"] // Valeur MilliWatt de Volt\n        },\n        {\n            image: 'voltImage', // Image de Volt\n            width: 500,\n        },\n        {\n            image: 'wattImage', // Image Watt de Volt\n            width: 500,\n            pageBreak: 'after', // Saut de page après l'image\n        },\n        {\n            text: \"Gatling\", // Section Gatling\n            style: \"header2\"\n        },\n        {\n            text: \"Nom de la simulation :                 \" + msg.payload.gatling.Assertion.simulation // Nom de la simulation Gatling\n        },\n        {\n            text: \"Commencée :                 \" + msg.payload.gatling.Assertion.start // Date de début de la simulation Gatling (à formater)\n        },\n        {\n            image: 'gatlingImage', // Image Gatling\n            width: 500,\n        },\n        {\n            image: 'gatlingGraphComplete', // Image graphique complet Gatling\n            width: 500,\n        },\n    ],\n    images: {\n        voltImage: 'data:image/png;base64,' + msg.payload.voltGraph.toString('base64'), // Utilisation du buffer pour l'image Volt\n        wattImage: 'data:image/png;base64,' + msg.payload.wattGraph.toString('base64'),  // Utilisation du buffer pour l'image Watt de Volt\n        nidusImage: 'data:image/png;base64,' + msg.payload.nidusGraph.toString('base64'),  // Utilisation du buffer pour l'image Nidus\n        gatlingImage: 'data:image/png;base64,' + msg.payload.gatlingGraph.toString('base64'),  // Utilisation du buffer pour l'image Gatling\n        gatlingGraphComplete: 'data:image/png;base64,' + msg.payload.gatlingGraphComplete.toString('base64'),  // Utilisation du buffer pour l'image Gatling\n    },\n    styles: {\n        header: {\n            fontSize: 22,\n            bold: true,\n            margin: [0, 30, 0, 0]\n        },\n        header2: {\n            fontSize: 18,\n            bold: true,\n            margin: [0, 20, 0, 0]\n        }\n    }\n};\n\nreturn msg; // Renvoyer le message\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2060,
        "y": 860,
        "wires": [
            [
                "be74b8b65e1283ad"
            ]
        ]
    },
    {
        "id": "2f480a709148df91",
        "type": "function",
        "z": "a922dcbcf6a2e8c4",
        "name": "Activate",
        "func": "var delay = msg.payload.time !== null ? msg.payload.time * 60 * 1000 : 30000; // Convertir en millisecondes si nécessaire\n\n// Créer les objets de message pour chaque sortie\nvar msg1 = {\n    cmd: \"subscribe\",\n    topic: \"/\",\n    complete: true,\n    out:1,\n    delay: delay, // Délai en ms\n    filepath: msg.filePath,\n    graphPath: msg.graphPath\n};\n\nvar msg2 = {\n    cmd: \"subscribe\",\n    topic: \"volt/benchmark/cpu\",\n    out: 2,\n    delay: delay, // Délai en ms\n    filepath: msg.filePath,\n    graphPath: msg.graphPath\n};\n\nvar msg3 = {\n    cmd: \"subscribe\",\n    topic: \"volt/benchmark/ram\",\n    out: 3,\n    delay: delay, // Délai en ms\n    filepath: msg.filePath,\n    graphPath: msg.graphPath\n};\n\nvar msg4 = {\n    cmd: \"subscribe\",\n    topic: \"volt/benchmark/processes\",\n    out: 4,\n    delay: delay, // Délai en ms\n    filepath: msg.filePath,\n    graphPath: msg.graphPath\n};\n\nvar msg5 = {\n    cmd: \"subscribe\",\n    topic: \"volt/benchmark/temp\",\n    out: 5,\n    delay: delay, // Délai en ms\n    filepath: msg.filePath,\n    graphPath: msg.graphPath\n};\n\n\n\nvar msg6 = {\n    cmd: \"subscribe\",\n    topic: \"nidus/benchmark/cpu\",\n    out: 6,\n    delay: delay, // Délai en ms\n    filepath: msg.filePath,\n    graphPath: msg.graphPath\n};\n\nvar msg7 = {\n    cmd: \"subscribe\",\n    topic: \"nidus/benchmark/ram\",\n    out: 7,\n    delay: delay, // Délai en ms\n    filepath: msg.filePath,\n    graphPath: msg.graphPath\n};\n\nvar msg8 = {\n    cmd: \"subscribe\",\n    topic: \"nidus/benchmark/processes\",\n    out: 8,\n    delay: delay, // Délai en ms\n    filepath: msg.filePath,\n    graphPath: msg.graphPath\n};\nvar msg9 = {\n    cmd: \"subscribe\",\n    topic: \"nidus/benchmark/temp\",\n    out: 9,\n    delay: delay, // Délai en ms\n    filepath: msg.filePath,\n    graphPath: msg.graphPath\n};\n\n\n// Envoyer les messages aux sorties correspondantes\n// Les messages seront envoyés dans l'ordre de 0 à 6, correspondant aux sorties activées\n// Assurez-vous que le nœud \"Function\" a sept sorties activées pour recevoir ces messages\nnode.send([msg1, msg2, msg3, msg4, msg5, msg6, msg7,msg8,msg9]);\n",
        "outputs": 9,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 880,
        "wires": [
            [
                "e57c37f6d2304a76",
                "2c32ec0fc5756fa3"
            ],
            [
                "928688dfc7e23a1b"
            ],
            [
                "3d2e6d7d9144dbc8"
            ],
            [
                "94f3bffcc46817ed"
            ],
            [
                "233ac3203df094e7"
            ],
            [
                "9b68fcc68bf63570"
            ],
            [
                "0efa5b24d3d7217a"
            ],
            [
                "70e86e2eaa84fb45"
            ],
            [
                "703e1bffc421d496"
            ]
        ]
    },
    {
        "id": "e57c37f6d2304a76",
        "type": "delay",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "pauseType": "delayv",
        "timeout": "15",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 940,
        "y": 600,
        "wires": [
            [
                "9c1d83d903dfd7c6"
            ]
        ]
    },
    {
        "id": "739d1dee7ab0721f",
        "type": "join",
        "z": "a922dcbcf6a2e8c4",
        "name": "Values",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "9",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1350,
        "y": 720,
        "wires": [
            [
                "d97a7e3571e5c7a3",
                "0dc4013efbfe82f3",
                "eac3d22677e48498",
                "015cd0934fa7211e",
                "988608530bbba437"
            ]
        ]
    },
    {
        "id": "598fe1090c5b4a0f",
        "type": "join",
        "z": "a922dcbcf6a2e8c4",
        "name": "Moyennes",
        "mode": "custom",
        "build": "object",
        "property": "moyenne",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1530,
        "y": 820,
        "wires": [
            [
                "08696f6284b66ed1"
            ]
        ]
    },
    {
        "id": "906750247874af8d",
        "type": "link out",
        "z": "a922dcbcf6a2e8c4",
        "name": "End_PDF",
        "mode": "link",
        "links": [
            "c78fb67e4a0af0ac"
        ],
        "x": 2095,
        "y": 820,
        "wires": []
    },
    {
        "id": "c78fb67e4a0af0ac",
        "type": "link in",
        "z": "a922dcbcf6a2e8c4",
        "name": "From_PDF",
        "links": [
            "906750247874af8d"
        ],
        "x": 445,
        "y": 400,
        "wires": [
            [
                "79e20eb04483680c"
            ]
        ]
    },
    {
        "id": "d184317a0e5101a3",
        "type": "function",
        "z": "a922dcbcf6a2e8c4",
        "name": "MiseAJourDelay",
        "func": "// Vérifier si msg.delay est défini\nif (msg.delay !== undefined) {\n    if(msg.delay === 1){\n        return null;\n    }\n    // Convertir msg.delay en nombre (si c'est une chaîne)\n    const currentDelay = parseFloat(msg.delay);\n\n    // Vérifier si currentDelay est un nombre valide\n    if (!isNaN(currentDelay)) {\n        // Soustraire 250 de currentDelay, mais s'assurer que le résultat est positif\n        const newDelay = Math.max(currentDelay - 250, 0);\n\n        // Mettre à jour msg.delay avec la nouvelle valeur\n        msg.delay = newDelay;\n\n        // Si le nouveau délai est 0, ne rien retourner\n        if (newDelay === 0) {\n            msg.delay = 1;\n            msg.originalDelay = 1;\n            return msg;\n        } else {\n            // Sinon, retourner le message avec le nouveau délai\n            return msg;\n        }\n    } else {\n        // msg.delay n'est pas un nombre valide\n        return null;\n    }\n} else {\n    // msg.delay n'est pas défini\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 720,
        "wires": [
            [
                "9df740cb5948f531",
                "fae046fbf8314952",
                "46ae434f01cfb101",
                "96d571dd904366d8"
            ]
        ]
    },
    {
        "id": "9df740cb5948f531",
        "type": "delay",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "pauseType": "delay",
        "timeout": "250",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 690,
        "y": 720,
        "wires": [
            [
                "d184317a0e5101a3"
            ]
        ]
    },
    {
        "id": "2c32ec0fc5756fa3",
        "type": "function",
        "z": "a922dcbcf6a2e8c4",
        "name": "CopyDelay",
        "func": "// Vérifier si msg.delay est défini\nif (msg.delay !== undefined) {\nmsg.originalDelay = msg.delay;\nreturn msg;\n}else{\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 780,
        "wires": [
            [
                "d184317a0e5101a3"
            ]
        ]
    },
    {
        "id": "d97a7e3571e5c7a3",
        "type": "function",
        "z": "a922dcbcf6a2e8c4",
        "name": "Gatling line chart Complet",
        "func": "// Assurez-vous que msg.payload.gatling.Log est un tableau\nvar logEntries = Array.isArray(msg.payload.gatling.Log) ? msg.payload.gatling.Log : [];\n\n// Création du graphique\nvar chartData = {\n    type: 'line', // Utilisez un graphique de type \"line\"\n    options: {\n        title: {\n            display: true,\n            text: 'Comparaison des performances' // Titre du graphique\n        },\n        legend: {\n            display: true // Affichez la légende du graphique\n        },\n        chartArea: {\n            backgroundColor: '#d3d7dd' // Couleur de fond du graphique\n        },\n        plugins: {\n            datalabels: {\n                display: false // Désactivez l'affichage des étiquettes de données\n            }\n        }\n    },\n    data: {\n        labels: logEntries.map(function (entry) {\n            if (entry.type === 'RUN') {\n                return 'Début de la Simulation'; // Label pour les opérations de type \"RUN\"\n            } else if (entry.type === 'REQUEST') {\n                // Calcul de la différence en millisecondes entre le début de la simulation et le début de la requête\n                var simulationStart = logEntries.find(function (item) {\n                    return item.type === 'RUN';\n                });\n                if (simulationStart) {\n                    var startTime = simulationStart.start;\n                    var requestTime = entry.start;\n                    var timeDiff = requestTime - startTime;\n                    return (timeDiff / 1000).toFixed(0) + ' s'; // Temps en secondes\n                } else {\n                    return 'N/A'; // Si aucune opération de type \"RUN\" n'est trouvée\n                }\n            } else {\n                return ''; // Autres types d'opérations (USER, etc.) sans label\n            }\n        }),\n        datasets: [\n            {\n                label: \"Temps de Réponse\", // Légende de l'ensemble de données\n                borderColor: 'rgba(0, 128, 255, 1)', // Couleur de la ligne du graphique\n                fill: false, // Désactivez le remplissage sous la ligne\n                data: logEntries.map(function (entry) {\n                    if (entry.type === 'REQUEST') {\n                        // Calcul de la différence en millisecondes entre le début et la fin de la requête\n                        var requestStart = entry.start;\n                        var requestEnd = entry.end;\n                        var requestTime = requestEnd - requestStart;\n                        return requestTime;\n                    } else {\n                        return 0; // Valeurs pour les opérations de type \"RUN\" ou autres\n                    }\n                }),\n                pointRadius: 0, // Diamètre des points sur le graphique\n            }\n        ]\n    }\n};\n\nmsg.payload = chartData; // Attribuez les données du graphique au message\n\nreturn msg; // Renvoyez le message\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 500,
        "wires": [
            [
                "b1f6c0a2b59f3166"
            ]
        ]
    },
    {
        "id": "b1f6c0a2b59f3166",
        "type": "chart-image",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "width": "1920",
        "height": "1920",
        "x": 1850,
        "y": 500,
        "wires": [
            [
                "a7517383bc84984d"
            ]
        ]
    },
    {
        "id": "a7517383bc84984d",
        "type": "file",
        "z": "a922dcbcf6a2e8c4",
        "name": "Gatling Complet",
        "filename": "graphPath.gatling.complet",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2100,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "0dc4013efbfe82f3",
        "type": "function",
        "z": "a922dcbcf6a2e8c4",
        "name": "Vertical Line Chart",
        "func": "// Données reçues du flux précédent\nvar rawData = msg.payload;\nvar delayInSeconds = msg.delay / 1000; // Conversion en secondes\n\n// Extraction des données nécessaires\nvar voltCpuData = rawData[\"volt/benchmark/cpu\"];\nvar voltRamData = rawData[\"volt/benchmark/ram\"];\nvar voltProcessesData = rawData[\"volt/benchmark/processes\"];\nvar voltTempData = rawData[\"volt/benchmark/temp\"];\nvar nidusCpuData = rawData[\"nidus/benchmark/cpu\"];\nvar nidusRamData = rawData[\"nidus/benchmark/ram\"];\nvar nidusProcessesData = rawData[\"nidus/benchmark/processes\"];\nvar nidusTempData = rawData[\"nidus/benchmark/temp\"];\n\n// Création du graphique\nvar chartData = {\n    type: 'line',  // Changement du type de graphique en \"line\"\n    options: {\n        title: {\n            display: true,\n            text: 'Comparaison des performances'\n        },\n        legend: {\n            display: true\n        },\n        chartArea: {\n            backgroundColor: '#d3d7dd'\n        },\n        plugins: {\n            datalabels: {\n                display: false  // Désactiver l'affichage des étiquettes de données\n            }\n        }\n    },\n    data: {\n        labels: Array.from({ length: voltCpuData.length }, (_, i) => (i * delayInSeconds).toFixed(1)),  // Temps en secondes\n        datasets: [\n            {\n                label: \"Volt CPU\",\n                borderColor: 'rgba(0, 128, 255, 1)',  // Couleur de la ligne (couleur froide pour Volt)\n                fill: false,  // Désactiver le remplissage sous la ligne\n                data: voltCpuData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Volt RAM\",\n                borderColor: 'rgba(0, 255, 128, 1)',\n                fill: false,\n                data: voltRamData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Volt Temp\",\n                borderColor: 'rgba(255, 193, 37, 1)',\n                fill: false,\n                data: voltTempData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Nidus CPU\",\n                borderColor: 'rgba(255, 69, 0, 1)',\n                fill: false,\n                data: nidusCpuData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Nidus RAM\",\n                borderColor: 'rgba(255, 165, 0, 1)',\n                fill: false,\n                data: nidusRamData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Nidus Temp\",\n                borderColor: 'rgba(255, 0, 0, 1)',\n                fill: false,\n                data: nidusTempData,\n                pointRadius: 0,\n            }\n        ]\n    }\n};\n\nmsg.payload = chartData;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 620,
        "wires": [
            [
                "cb25325db959a379"
            ]
        ]
    },
    {
        "id": "cb25325db959a379",
        "type": "chart-image",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "width": "1920",
        "height": "1080",
        "x": 1830,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "76413a7f1a82bb8c",
        "type": "file",
        "z": "a922dcbcf6a2e8c4",
        "name": "Image dump",
        "filename": "/home/NodeRed/line.png",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2110,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "603fed50adeb7c76",
        "type": "chart-image",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "width": "1920",
        "height": "1920",
        "x": 1830,
        "y": 660,
        "wires": [
            [
                "57970209259779ad",
                "0430440efc580a59"
            ]
        ]
    },
    {
        "id": "57970209259779ad",
        "type": "file",
        "z": "a922dcbcf6a2e8c4",
        "name": "volt.complet",
        "filename": "graphPath.volt.complet",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2110,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "1e88c8e297e90be9",
        "type": "chart-image",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "width": "1920",
        "height": "1920",
        "x": 1830,
        "y": 700,
        "wires": [
            [
                "c6029531073cca5b",
                "0430440efc580a59"
            ]
        ]
    },
    {
        "id": "c6029531073cca5b",
        "type": "file",
        "z": "a922dcbcf6a2e8c4",
        "name": "volt.complet",
        "filename": "graphPath.nidus.complet",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2110,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "015cd0934fa7211e",
        "type": "function",
        "z": "a922dcbcf6a2e8c4",
        "name": "Nidus Line Chart",
        "func": "// Données reçues du flux précédent\nvar rawData = msg.payload;\nvar delayInSeconds = msg.delay / 1000; // Conversion en secondes\nmsg.topic = \"NidusLineChart\";\n// Extraction des données nécessaires\nvar nidusCpuData = rawData[\"nidus/benchmark/cpu\"];\nvar nidusRamData = rawData[\"nidus/benchmark/ram\"];\nvar nidusTempData = rawData[\"nidus/benchmark/temp\"];\n\n// Création du graphique\nvar chartData = {\n    type: 'line',  // Changement du type de graphique en \"line\"\n    options: {\n        title: {\n            display: true,\n            text: 'Comparaison des performances'\n        },\n        legend: {\n            display: true\n        },\n        chartArea: {\n            backgroundColor: '#d3d7dd'\n        },\n        plugins: {\n            datalabels: {\n                display: false  // Désactiver l'affichage des étiquettes de données\n            }\n        }\n    },\n    data: {\n        labels: Array.from({ length: nidusCpuData.length }, (_, i) => (i * delayInSeconds).toFixed(1)),  // Temps en secondes\n        datasets: [\n            \n            {\n                label: \"Nidus CPU\",\n                borderColor: 'rgba(255, 69, 0, 1)',\n                fill: false,\n                data: nidusCpuData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Nidus RAM\",\n                borderColor: 'rgba(255, 165, 0, 1)',\n                fill: false,\n                data: nidusRamData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Nidus Temp\",\n                borderColor: 'rgba(255, 0, 0, 1)',\n                fill: false,\n                data: nidusTempData,\n                pointRadius: 0,\n            }\n        ]\n    }\n};\n\nmsg.payload = chartData;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 700,
        "wires": [
            [
                "1e88c8e297e90be9"
            ]
        ]
    },
    {
        "id": "eac3d22677e48498",
        "type": "function",
        "z": "a922dcbcf6a2e8c4",
        "name": "Volt Line Chart",
        "func": "// Données reçues du flux précédent\nvar rawData = msg.payload;\nvar delayInSeconds = msg.delay / 1000; // Conversion en secondes\nmsg.topic = \"VoltLineChart\";\n// Extraction des données nécessaires\nvar voltCpuData = rawData[\"volt/benchmark/cpu\"];\nvar voltRamData = rawData[\"volt/benchmark/ram\"];\nvar voltTempData = rawData[\"volt/benchmark/temp\"];\n\n\n// Création du graphique\nvar chartData = {\n    type: 'line',  // Changement du type de graphique en \"line\"\n    options: {\n        title: {\n            display: true,\n            text: 'Comparaison des performances'\n        },\n        legend: {\n            display: true\n        },\n        chartArea: {\n            backgroundColor: '#d3d7dd'\n        },\n        plugins: {\n            datalabels: {\n                display: false  // Désactiver l'affichage des étiquettes de données\n            }\n        }\n    },\n    data: {\n        labels: Array.from({ length: voltCpuData.length }, (_, i) => (i * delayInSeconds).toFixed(1)),  // Temps en secondes\n        datasets: [\n            {\n                label: \"Volt CPU\",\n                borderColor: 'rgba(0, 128, 255, 1)',  // Couleur de la ligne (couleur froide pour Volt)\n                fill: false,  // Désactiver le remplissage sous la ligne\n                data: voltCpuData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Volt RAM\",\n                borderColor: 'rgba(0, 255, 128, 1)',\n                fill: false,\n                data: voltRamData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Volt Temp\",\n                borderColor: 'rgba(0, 173, 0, 1)',\n                fill: false,\n                data: voltTempData,\n                pointRadius: 0,\n            },\n\n        ]\n    }\n};\n\nmsg.payload = chartData;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 660,
        "wires": [
            [
                "603fed50adeb7c76"
            ]
        ]
    },
    {
        "id": "8460edb64649c3a2",
        "type": "function",
        "z": "a922dcbcf6a2e8c4",
        "name": "Commmandes de StressTest",
        "func": "const sshNidus = \"ssh tobby@nidus\"; \nconst sshVolt = \"ssh tobby@157.26.228.77\"; \n\n    var stressCommandsNidus;\n    var stressCommandsVolt;\n\n    if (msg.payload.stressNidus) {\n        var msg1 = {\n            payload : `stress-ng --cpu 2 --io 1 --timeout ${msg.payload.timeStress*60}s --cpu-load 100 --vm-bytes 3G`\n        };\n    }\n\n    if (msg.payload.stressVolt) {\n        var msg2 = {\n            payload: `ssh tobby@157.26.228.77 \\\"stress-ng --cpu 2 --io 1 --timeout ${msg.payload.timeStress*60}s --cpu-load 100 --vm-bytes 3G\\\"`\n        };\n    }\n    node.send([msg1, msg2]);\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 920,
        "wires": [
            [
                "ef49101dcb56820d"
            ],
            [
                "ef49101dcb56820d"
            ]
        ]
    },
    {
        "id": "ef49101dcb56820d",
        "type": "exec",
        "z": "a922dcbcf6a2e8c4",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 790,
        "y": 980,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "fae046fbf8314952",
        "type": "ui_template",
        "z": "a922dcbcf6a2e8c4",
        "group": "7a02dc45cdd22958",
        "name": "ProgressBar",
        "order": 6,
        "width": 0,
        "height": 0,
        "format": "<style>\n    .custom-progress-bar .md-progress-linear-fill {\n        height: 20px;\n        /* Définissez la hauteur souhaitée ici */\n    }\n</style>\n\n<div layout=\"column\" layout-align=\"center center\">\n    <md-progress-linear class=\"md-accent custom-progress-bar\" md-mode=\"determinate\"\n        value=\"{{(msg.originalDelay - msg.delay) / msg.originalDelay * 100}}\"\n        ng-show=\"msg.delay !== undefined && msg.originalDelay !== undefined\"></md-progress-linear>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 690,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "b1da83a2a3862753",
        "type": "join",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "7",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 1970,
        "y": 900,
        "wires": [
            [
                "6b3f454dbe69b14f"
            ]
        ]
    },
    {
        "id": "08696f6284b66ed1",
        "type": "change",
        "z": "a922dcbcf6a2e8c4",
        "name": "Organise Payload-Topic",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "moyenne",
                "tot": "msg",
                "dc": true
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "moyenne",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1550,
        "y": 880,
        "wires": [
            [
                "b1da83a2a3862753",
                "7cbe2c5767d519af",
                "ac0a9fbac6663571",
                "acd8521fb2d3d1e9",
                "6604a1a9e5c5b180",
                "43c8dd92a5c31e0a"
            ]
        ]
    },
    {
        "id": "98b45eb91516072f",
        "type": "change",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "complete",
                "pt": "msg",
                "to": "true",
                "tot": "bool",
                "dc": true
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "ChartComplete",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1960,
        "y": 760,
        "wires": [
            [
                "598fe1090c5b4a0f"
            ]
        ]
    },
    {
        "id": "6b3f454dbe69b14f",
        "type": "change",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Moyenne_Graph",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1850,
        "y": 860,
        "wires": [
            [
                "85f75875ce5072e4"
            ]
        ]
    },
    {
        "id": "ac0a9fbac6663571",
        "type": "file in",
        "z": "a922dcbcf6a2e8c4",
        "name": "Read Graph Nidus Complet",
        "filename": "graphPath.nidus.complet",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1560,
        "y": 1100,
        "wires": [
            [
                "d978bc6f789e8521"
            ]
        ]
    },
    {
        "id": "d978bc6f789e8521",
        "type": "base64",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "action": "str",
        "property": "msg.payload",
        "x": 1780,
        "y": 1100,
        "wires": [
            [
                "fb6a13e3a14f15c5"
            ]
        ]
    },
    {
        "id": "7cbe2c5767d519af",
        "type": "file in",
        "z": "a922dcbcf6a2e8c4",
        "name": "Read Graph Volt Complet",
        "filename": "graphPath.volt.complet",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1550,
        "y": 980,
        "wires": [
            [
                "ae3866eff55ca64b"
            ]
        ]
    },
    {
        "id": "ae3866eff55ca64b",
        "type": "base64",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "action": "str",
        "property": "msg.payload",
        "x": 1780,
        "y": 980,
        "wires": [
            [
                "ae146adec9b9a032"
            ]
        ]
    },
    {
        "id": "ae146adec9b9a032",
        "type": "change",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "voltGraph",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1770,
        "y": 940,
        "wires": [
            [
                "b1da83a2a3862753"
            ]
        ]
    },
    {
        "id": "fb6a13e3a14f15c5",
        "type": "change",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "nidusGraph",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1770,
        "y": 1140,
        "wires": [
            [
                "b1da83a2a3862753"
            ]
        ]
    },
    {
        "id": "2f38cc5b57afe5b8",
        "type": "debug",
        "z": "a922dcbcf6a2e8c4",
        "name": "CATCH_ERROR",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 1260,
        "wires": []
    },
    {
        "id": "727e8e57d05b142b",
        "type": "catch",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 340,
        "y": 1260,
        "wires": [
            [
                "2f38cc5b57afe5b8"
            ]
        ]
    },
    {
        "id": "0430440efc580a59",
        "type": "join",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "4",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1790,
        "y": 760,
        "wires": [
            [
                "98b45eb91516072f"
            ]
        ]
    },
    {
        "id": "5832f222acb611c6",
        "type": "ina-sensor",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "handle": "173c4031bd3a25c0",
        "x": 430,
        "y": 560,
        "wires": [
            [
                "b26ae55967e0b99e"
            ],
            [
                "b26ae55967e0b99e"
            ]
        ]
    },
    {
        "id": "e7f84c7008ec3606",
        "type": "join",
        "z": "a922dcbcf6a2e8c4",
        "name": "Join_2",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 930,
        "y": 560,
        "wires": [
            [
                "306223d02a96192b"
            ]
        ]
    },
    {
        "id": "46ae434f01cfb101",
        "type": "function",
        "z": "a922dcbcf6a2e8c4",
        "name": "USE",
        "func": "msg.use = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 600,
        "wires": [
            [
                "e7f84c7008ec3606"
            ]
        ]
    },
    {
        "id": "eb6ea2ed3a088172",
        "type": "function",
        "z": "a922dcbcf6a2e8c4",
        "name": "MilliWatt",
        "func": "// Récupérer les valeurs de courant (mA) et de tension (V) depuis les propriétés msg.payload\nvar current_mA = msg.payload.miliamps;\nvar voltage_V = msg.payload.voltage;\n\n// Calculer la puissance en watts (W)\nvar power_W = (current_mA / 1000) * voltage_V;  // Convertir le courant en ampères\n\n// Vérifier si la tension est négative\nif (voltage_V < 0.5) {\n    // Si la tension est négative, ne rien faire et retourner le message inchangé\n    return null;\n}\n\n// Créer un nouvel objet msg avec la puissance en watts comme payload\nmsg.payload = power_W*1000;\nmsg.topic = \"Watt\";\n// Renvoyer le message modifié\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 560,
        "wires": [
            [
                "e7f84c7008ec3606"
            ]
        ]
    },
    {
        "id": "b26ae55967e0b99e",
        "type": "join",
        "z": "a922dcbcf6a2e8c4",
        "name": "Join_Amp_Volt",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 620,
        "y": 560,
        "wires": [
            [
                "eb6ea2ed3a088172"
            ]
        ]
    },
    {
        "id": "306223d02a96192b",
        "type": "switch",
        "z": "a922dcbcf6a2e8c4",
        "name": "DropWhenNotUse",
        "property": "use",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1110,
        "y": 560,
        "wires": [
            [
                "7e85c4fd50f858cd"
            ],
            []
        ]
    },
    {
        "id": "9c1d83d903dfd7c6",
        "type": "join",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 1150,
        "y": 600,
        "wires": [
            [
                "954b20e3d5ce1feb"
            ]
        ]
    },
    {
        "id": "954b20e3d5ce1feb",
        "type": "function",
        "z": "a922dcbcf6a2e8c4",
        "name": "Rename",
        "func": "// Définir le sujet du message\nmsg.topic = \"volt/benchmark/watt\";\n\n// Vérifier si le tableau payload existe et n'est pas vide\nif (msg.payload && Array.isArray(msg.payload) && msg.payload.length > 0) {\n    // Convertir les valeurs en chaînes de caractères en nombres entiers\n    var numericValues = msg.payload.map(function (value) {\n        return parseInt(value, 10); // 10 indique la base décimale\n    }).filter(function (value) {\n        return !isNaN(value); // Filtrer les valeurs non numériques\n    });\n\n    // Vérifier si des valeurs numériques ont été trouvées\n    if (numericValues.length > 0) {\n        // Calculer la somme des valeurs numériques dans le tableau\n        var sum = numericValues.reduce(function (acc, value) {\n            return acc + value;\n        }, 0);\n\n        // Calculer la moyenne en divisant la somme par le nombre d'éléments\n        var moyenne = sum / numericValues.length;\n\n        // Arrondir la moyenne à deux chiffres après la virgule et au multiple de 0.05 le plus proche\n        moyenne = Math.round(moyenne * 20) / 20;\n\n        // Ajouter la moyenne au message\n        msg.moyenne = moyenne.toFixed(2);\n    } else {\n        // Si aucune valeur numérique n'a été trouvée, définir la moyenne à 0\n        msg.moyenne = \"0.00\";\n    }\n} else {\n    // Si le tableau est vide ou n'existe pas, définir la moyenne à 0\n    msg.moyenne.volt.benchmark.cpu = \"0.00\";\n}\n\n// Renvoyer le message modifié\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 600,
        "wires": [
            [
                "2066f01c2c7ae07f",
                "598fe1090c5b4a0f"
            ]
        ]
    },
    {
        "id": "7e85c4fd50f858cd",
        "type": "change",
        "z": "a922dcbcf6a2e8c4",
        "name": "Set Payload Watt",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.Watt",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1330,
        "y": 560,
        "wires": [
            [
                "9c1d83d903dfd7c6"
            ]
        ]
    },
    {
        "id": "2066f01c2c7ae07f",
        "type": "function",
        "z": "a922dcbcf6a2e8c4",
        "name": "Watt Line Chart",
        "func": "// Données reçues du flux précédent\nvar rawData = msg.payload;\nvar delayInSeconds = msg.delay / 1000; // Conversion en secondes\n\n// Extraction des données nécessaires\nvar voltWatt = rawData;\n// Création du graphique\nvar chartData = {\n    type: 'line',  // Changement du type de graphique en \"line\"\n    options: {\n        title: {\n            display: true,\n            text: 'Comparaison des performances'\n        },\n        legend: {\n            display: true\n        },\n        chartArea: {\n            backgroundColor: '#d3d7dd'\n        },\n        plugins: {\n            datalabels: {\n                display: false  // Désactiver l'affichage des étiquettes de données\n            }\n        }\n    },\n    data: {\n        labels: Array.from({ length: voltWatt.length }, (_, i) => (i * delayInSeconds).toFixed(1)),  // Temps en secondes\n        datasets: [\n            \n            {\n                label: \"Volt Watt\",\n                borderColor: 'rgba(0, 255, 255, 1)',\n                fill: false,\n                data: voltWatt,\n                pointRadius: 0,\n            },\n        ]\n    }\n};\n\nmsg.payload = chartData;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 540,
        "wires": [
            [
                "045abdd5d7ffb815"
            ]
        ]
    },
    {
        "id": "045abdd5d7ffb815",
        "type": "chart-image",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "width": "1920",
        "height": "1920",
        "x": 1850,
        "y": 540,
        "wires": [
            [
                "69eacb13e42212e2",
                "0430440efc580a59"
            ]
        ]
    },
    {
        "id": "69eacb13e42212e2",
        "type": "file",
        "z": "a922dcbcf6a2e8c4",
        "name": "volt.watt",
        "filename": "graphPath.volt.watt",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2100,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "acd8521fb2d3d1e9",
        "type": "file in",
        "z": "a922dcbcf6a2e8c4",
        "name": "Read Graph Volt Watt",
        "filename": "graphPath.volt.watt",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1540,
        "y": 1020,
        "wires": [
            [
                "91130d44ce2261fa"
            ]
        ]
    },
    {
        "id": "91130d44ce2261fa",
        "type": "base64",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "action": "str",
        "property": "msg.payload",
        "x": 1780,
        "y": 1020,
        "wires": [
            [
                "b198efa470dc9a78"
            ]
        ]
    },
    {
        "id": "b198efa470dc9a78",
        "type": "change",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "wattGraph",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1770,
        "y": 1060,
        "wires": [
            [
                "b1da83a2a3862753"
            ]
        ]
    },
    {
        "id": "96d571dd904366d8",
        "type": "function",
        "z": "a922dcbcf6a2e8c4",
        "name": "Prepare Payload Time",
        "func": "// Vérifier si les valeurs sont toutes les deux égales à 1 milliseconde\nif (msg.originalDelay === 1 && msg.delay === 1) {\n    msg.payload = \"00:00\";  // Cas spécial\n} else {\n    // Calculer le temps effectué et le temps total (en millisecondes)\n    var tempsEffectue = msg.originalDelay - msg.delay;\n    var tempsTotal = msg.originalDelay;\n\n    // Convertir les millisecondes en secondes\n    tempsEffectue /= 1000;\n    tempsTotal /= 1000;\n\n    // Arrondir les secondes\n    tempsEffectue = Math.round(tempsEffectue);\n    tempsTotal = Math.round(tempsTotal);\n\n    // Formater les temps dans le format \"mm:ss\"\n    var formatTemps = function (temps) {\n        var minutes = Math.floor(temps / 60);\n        var secondes = temps % 60;\n        return (minutes < 10 ? \"0\" : \"\") + minutes + \":\" + (secondes < 10 ? \"0\" : \"\") + secondes;\n    };\n\n    // Former le résultat\n    var tempsFormate = formatTemps(tempsEffectue) + \"/\" + formatTemps(tempsTotal);\n\n    msg.payload = tempsFormate;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 660,
        "wires": [
            [
                "998dbf39131946cb"
            ]
        ]
    },
    {
        "id": "998dbf39131946cb",
        "type": "ui_text",
        "z": "a922dcbcf6a2e8c4",
        "group": "7a02dc45cdd22958",
        "order": 8,
        "width": 10,
        "height": 2,
        "name": "Time",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "30",
        "color": "#e01b24",
        "x": 430,
        "y": 600,
        "wires": []
    },
    {
        "id": "4573ffb6c4528aeb",
        "type": "ui_toast",
        "z": "a922dcbcf6a2e8c4",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "Valider",
        "cancel": "Annuler",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 330,
        "y": 980,
        "wires": [
            [
                "7b4f3b6bf52fe0c5"
            ]
        ]
    },
    {
        "id": "5143686e3921674e",
        "type": "ui_button",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "group": "7a02dc45cdd22958",
        "order": 9,
        "width": 4,
        "height": 2,
        "passthru": true,
        "label": "Purge",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "Voulez vous vraiment purger tout les fichier generé par Node-Red ?",
        "payloadType": "str",
        "topic": "Purge des fichier !!!",
        "topicType": "str",
        "x": 310,
        "y": 940,
        "wires": [
            [
                "4573ffb6c4528aeb"
            ]
        ]
    },
    {
        "id": "bc2d12ad39c8a821",
        "type": "function",
        "z": "a922dcbcf6a2e8c4",
        "name": "Purge",
        "func": "if (msg.payload === \"Valider\"){\n    msg.payload = \"rm -r /home/NodeRed/* && rm -r /home/tobby/.gatling/gatling-charts-highcharts-bundle-3.9.5/results/*\";\n    return msg;\n}else{\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1060,
        "wires": [
            [
                "ef49101dcb56820d"
            ]
        ]
    },
    {
        "id": "2a33fab123820cb9",
        "type": "ui_toast",
        "z": "a922dcbcf6a2e8c4",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "Valider",
        "cancel": "Annuler",
        "raw": false,
        "className": "",
        "topic": "VRAIMENT ???",
        "name": "",
        "x": 330,
        "y": 1060,
        "wires": [
            [
                "bc2d12ad39c8a821",
                "f4a52e8692a83d01"
            ]
        ]
    },
    {
        "id": "7b4f3b6bf52fe0c5",
        "type": "function",
        "z": "a922dcbcf6a2e8c4",
        "name": "function 3",
        "func": "if (msg.payload === \"Valider\"){\n    msg.payload = \"En êtes vous bien sûr ???\";\n    return msg;\n}else{\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 1020,
        "wires": [
            [
                "2a33fab123820cb9"
            ]
        ]
    },
    {
        "id": "f4a52e8692a83d01",
        "type": "delay",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 520,
        "y": 1100,
        "wires": [
            [
                "d1ad6d659335c295"
            ]
        ]
    },
    {
        "id": "d1ad6d659335c295",
        "type": "function",
        "z": "a922dcbcf6a2e8c4",
        "name": "Mkdir",
        "func": "if (msg.payload === \"Valider\"){\n    msg.payload = \"mkdir /home/NodeRed/png /home/NodeRed/pdf\";\n    return msg;\n}else{\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1100,
        "wires": [
            [
                "ef49101dcb56820d"
            ]
        ]
    },
    {
        "id": "b975eb740154e03e",
        "type": "function",
        "z": "a922dcbcf6a2e8c4",
        "name": "Command_Gatling",
        "func": "msg.original = msg.payload;\nif (msg.topic !== \"inject\" && msg.payload.time_gatling !== undefined && msg.payload.user_gatling !== undefined) {\n    // Crée la commande en utilisant les valeurs spécifiées\n    msg.payload.time = msg.payload.time_gatling * 60;\n    msg.payload = `/home/tobby/.gatling/gatling-charts-highcharts-bundle-3.9.5/bin/gatling.sh -s CuriusTRex -bm --run-mode local -erjo \"-Dusers=${msg.payload.user_gatling} -Dramp=${msg.payload.time_gatling}\"`;\n} else {\n    // Utilise la commande d'origine car il ne s'agit pas d'un noeud inject ou les valeurs ne sont pas fournies\n    // Par défaut, utilisez la commande actuelle\n    msg.payload = \"/home/tobby/.gatling/gatling-charts-highcharts-bundle-3.9.5/bin/gatling.sh -s CuriusTRex -bm --run-mode local -erjo \\\" -Dusers=5 -Dramp=5\\\"\";\n}\n\n// Renvoie le message modifié\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1180,
        "wires": [
            [
                "e80abad9260c1ef3"
            ]
        ]
    },
    {
        "id": "e80abad9260c1ef3",
        "type": "exec",
        "z": "a922dcbcf6a2e8c4",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 710,
        "y": 1160,
        "wires": [
            [
                "5c4ef43f4797fcea"
            ],
            [],
            []
        ]
    },
    {
        "id": "93b81e31bea6ad80",
        "type": "inject",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "payload.gatling",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "inject",
        "x": 330,
        "y": 1180,
        "wires": [
            [
                "b975eb740154e03e"
            ]
        ]
    },
    {
        "id": "5c4ef43f4797fcea",
        "type": "function",
        "z": "a922dcbcf6a2e8c4",
        "name": "extractFilePathsAndCreateJsonKeyValue",
        "func": "// Fonction pour extraire le chemin après \"file://\"\nvar inputPayload = msg.payload;\n\n// Recherche de l'index de \"file://\"\nvar fileIndex = inputPayload.indexOf(\"file://\");\n\n// Si \"file://\" est trouvé, extrayez le chemin après\nif (fileIndex !== -1) {\n    // Extraire le chemin après \"file://\"\n    var filePath = inputPayload.substring(fileIndex + 7); // +7 pour sauter \"file://\"\n\n    // Supprimer le fichier index.html du chemin, s'il est présent\n        filePath = filePath.substring(0, filePath.length - 12); // -11 pour enlever \"/index.html\"\n\n    // Mettre le chemin extrait dans le message de sortie\n    msg.payload = filePath;\n\n    // Tableau de noms de fichiers .json\n    var jsonFilesList = [\n        \"assertions.json\",\n        \"global_stats.json\",\n        \"stats.json\"\n    ];\n\n    // Créer un tableau de clé-valeurs pour les fichiers .json\n    var jsonFilesKeyValue = {};\n\n    // Parcourir la liste des noms de fichiers et construire les chemins complets\n    for (var i = 0; i < jsonFilesList.length; i++) {\n        var jsonFileName = jsonFilesList[i];\n        var jsonFilePath = filePath + '/js/' + jsonFileName;\n        jsonFilesKeyValue[jsonFileName] = jsonFilePath;\n    }\n\n    // Ajouter le tableau de clé-valeurs au message\n    msg.jsonFiles = jsonFilesKeyValue;\n\n    // Renvoyer le message modifié\n    return msg;\n} else {\n    // Aucun \"file://\" trouvé, renvoyer le message d'origine\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 1220,
        "wires": [
            [
                "7a32d8f0501731ad",
                "53ed3b7bd0332155",
                "14a5c0936050c6ec",
                "363883f6259139cf"
            ]
        ]
    },
    {
        "id": "c5268070.c55a3",
        "type": "ui_template",
        "z": "a922dcbcf6a2e8c4",
        "group": "7a02dc45cdd22958",
        "name": "Upload Btn",
        "order": 11,
        "width": 4,
        "height": 2,
        "format": "<body>\n  <!-- Bouton pour déclencher l'importation des données -->\n  <button class=\"md-raised md-button md-ink-ripple\" onclick=\"importerDonnees()\">Télécharger</button>\n\n  <script>\n    // Conservez la portée originale\n    let restaureScope = scope;\n\n    // Fonction pour importer les données\n    function importerDonnees() {\n      // Créez un élément d'entrée de type fichier\n      let input = document.createElement('input');\n      input.type = 'file';\n      input.id = 'boutonRestaurer';\n\n      // Définissez l'événement onchange\n      input.onchange = _ => {\n        // Obtenez le nom du fichier choisi\n        let nomFichier = input.files[0].name;\n\n        // Vous pouvez utiliser cette méthode pour obtenir le fichier et effectuer les opérations respectives\n        let lecteurFichier = new FileReader();\n        lecteurFichier.readAsText(input.files[0]);\n\n        // Gérez la fin du chargement du fichier\n        lecteurFichier.onloadend = function(event){\n          // Envoyez les données lues et le nom du fichier à la portée originale\n          restaureScope.send({payload: event.target.result});\n        };\n      };\n\n      // Déclenchez le clic sur l'élément d'entrée de type fichier\n      input.click();\n    }\n  </script>\n</body>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 270,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "7a32d8f0501731ad",
        "type": "file in",
        "z": "a922dcbcf6a2e8c4",
        "name": "Assertion Json",
        "filename": "jsonFiles[\"assertions.json\"]",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1120,
        "y": 1360,
        "wires": [
            [
                "d647b33c6d2e3f19"
            ]
        ]
    },
    {
        "id": "53ed3b7bd0332155",
        "type": "file in",
        "z": "a922dcbcf6a2e8c4",
        "name": "Global Stats Json",
        "filename": "jsonFiles[\"global_stats.json\"]",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1130,
        "y": 1400,
        "wires": [
            [
                "10727eec043e4c37"
            ]
        ]
    },
    {
        "id": "14a5c0936050c6ec",
        "type": "file in",
        "z": "a922dcbcf6a2e8c4",
        "name": "Stats Json",
        "filename": "jsonFiles[\"stats.json\"]",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1110,
        "y": 1440,
        "wires": [
            [
                "65f34127c479865e"
            ]
        ]
    },
    {
        "id": "65f34127c479865e",
        "type": "json",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1270,
        "y": 1440,
        "wires": [
            [
                "cbe083e30bbcd848"
            ]
        ]
    },
    {
        "id": "10727eec043e4c37",
        "type": "json",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1290,
        "y": 1400,
        "wires": [
            [
                "ac8d781897d82aa4"
            ]
        ]
    },
    {
        "id": "d647b33c6d2e3f19",
        "type": "json",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1270,
        "y": 1360,
        "wires": [
            [
                "f66f595e08543684"
            ]
        ]
    },
    {
        "id": "f66f595e08543684",
        "type": "change",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Assertion",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1410,
        "y": 1360,
        "wires": [
            [
                "8d75011f3e4a61cd"
            ]
        ]
    },
    {
        "id": "ac8d781897d82aa4",
        "type": "change",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Global",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1430,
        "y": 1400,
        "wires": [
            [
                "8d75011f3e4a61cd"
            ]
        ]
    },
    {
        "id": "cbe083e30bbcd848",
        "type": "change",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Stats",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1410,
        "y": 1440,
        "wires": [
            [
                "8d75011f3e4a61cd"
            ]
        ]
    },
    {
        "id": "8d75011f3e4a61cd",
        "type": "join",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "4",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1630,
        "y": 1400,
        "wires": [
            [
                "be1f566e551634ca"
            ]
        ]
    },
    {
        "id": "be1f566e551634ca",
        "type": "change",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "gatling",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1850,
        "y": 1400,
        "wires": [
            [
                "b1da83a2a3862753",
                "c145436e5b13e4fd"
            ]
        ]
    },
    {
        "id": "6604a1a9e5c5b180",
        "type": "file in",
        "z": "a922dcbcf6a2e8c4",
        "name": "Read Graph Gatling",
        "filename": "graphPath.gatling.pass",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1540,
        "y": 1180,
        "wires": [
            [
                "c9f7d6d1520e3533"
            ]
        ]
    },
    {
        "id": "c9f7d6d1520e3533",
        "type": "base64",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "action": "str",
        "property": "msg.payload",
        "x": 1780,
        "y": 1180,
        "wires": [
            [
                "f1ba256aaea77915"
            ]
        ]
    },
    {
        "id": "f1ba256aaea77915",
        "type": "change",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "gatlingGraph",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1790,
        "y": 1220,
        "wires": [
            [
                "b1da83a2a3862753"
            ]
        ]
    },
    {
        "id": "c145436e5b13e4fd",
        "type": "link out",
        "z": "a922dcbcf6a2e8c4",
        "name": "gatling",
        "mode": "link",
        "links": [
            "5ffd96eafaccc18a"
        ],
        "x": 1975,
        "y": 1260,
        "wires": []
    },
    {
        "id": "5ffd96eafaccc18a",
        "type": "link in",
        "z": "a922dcbcf6a2e8c4",
        "name": "link in 1",
        "links": [
            "c145436e5b13e4fd"
        ],
        "x": 1085,
        "y": 720,
        "wires": [
            [
                "739d1dee7ab0721f"
            ]
        ]
    },
    {
        "id": "9c9b12491f34115a",
        "type": "chart-image",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "width": "1920",
        "height": "1920",
        "x": 1850,
        "y": 460,
        "wires": [
            [
                "c021639bf321ede6",
                "0430440efc580a59"
            ]
        ]
    },
    {
        "id": "988608530bbba437",
        "type": "function",
        "z": "a922dcbcf6a2e8c4",
        "name": "Gatling bar chart",
        "func": "// Données reçues du flux précédent\nvar rawData = msg.payload.gatling.Global;  // Utilisez les données de msg.payload.gatling.Global\nmsg.topic = \"VoltBarChart\"; // Définir le sujet du message\n\n// Extraction des données nécessaires\nvar groupData = [\n    rawData.group1,\n    rawData.group2,\n    rawData.group3,\n    rawData.group4\n];\n\nvar labels = [];\nvar percentages = [];\n\n// Parcourir les données des groupes et extraire les informations\nfor (var i = 1; i <= groupData.length; i++) {\n    var groupName = \"group\" + i;\n    labels.push(rawData[groupName].htmlName);\n    percentages.push(rawData[groupName].percentage);\n}\n\n// Création du graphique\nvar chartData = {\n    type: 'bar',  // Utiliser un graphique de type \"bar\"\n    options: {\n        title: {\n            display: true,\n            text: 'Répartition des performances par groupe' // Titre du graphique\n        },\n        chartArea: {\n            backgroundColor: '#d3d7dd' // Couleur de fond du graphique\n        },\n        scales: {\n            x: {\n                beginAtZero: true,\n                title: {\n                    display: true,\n                    text: 'Groupes' // Titre de l'axe des X\n                }\n            },\n            y: {\n                beginAtZero: true,\n                title: {\n                    display: true,\n                    text: 'Pourcentage' // Titre de l'axe des Y\n                }\n            }\n        },\n        plugins: {\n            datalabels: {\n                anchor: 'end',\n                align: 'top',\n                formatter: function (value) {\n                    return value + '%';  // Ajouter le symbole de pourcentage à l'étiquette\n                }\n            }\n        }\n    },\n    data: {\n        labels: labels,\n        datasets: [\n            {\n                label: \"Pourcentage\", // Légende de l'ensemble de données\n                backgroundColor: 'rgba(0, 128, 255, 0.7)',  // Couleur du remplissage des barres\n                data: percentages\n            }\n        ]\n    }\n};\n\nmsg.payload = chartData; // Attribuer les données du graphique au message\n\nreturn msg; // Renvoyer le message\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 460,
        "wires": [
            [
                "9c9b12491f34115a"
            ]
        ]
    },
    {
        "id": "c021639bf321ede6",
        "type": "file",
        "z": "a922dcbcf6a2e8c4",
        "name": "gatling.pass",
        "filename": "graphPath.gatling.pass",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2090,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "43e78b5d682b70c3",
        "type": "file in",
        "z": "a922dcbcf6a2e8c4",
        "name": "Log",
        "filename": "payload",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1090,
        "y": 1480,
        "wires": [
            [
                "1c372d625e08d8fc"
            ]
        ]
    },
    {
        "id": "4f883d95b4ab02fd",
        "type": "change",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Log",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1450,
        "y": 1480,
        "wires": [
            [
                "8d75011f3e4a61cd"
            ]
        ]
    },
    {
        "id": "363883f6259139cf",
        "type": "function",
        "z": "a922dcbcf6a2e8c4",
        "name": "function 4",
        "func": "msg.payload = msg.payload + \"/simulation.log\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1480,
        "wires": [
            [
                "43e78b5d682b70c3"
            ]
        ]
    },
    {
        "id": "1c372d625e08d8fc",
        "type": "function",
        "z": "a922dcbcf6a2e8c4",
        "name": "Log TO JSObject",
        "func": "// Fonction pour analyser les lignes du journal Gatling\nvar lines = msg.payload.split('\\n'); // Divise la charge utile en lignes individuelles et les stocke dans un tableau\nvar logs = []; // Initialise un tableau vide pour stocker les journaux analysés\n\nfor (var i = 0; i < lines.length; i++) { // Parcourt chaque ligne du journal\n    var line = lines[i].trim(); // Supprime les espaces inutiles autour de la ligne\n\n    if (line !== \"\") { // Vérifie si la ligne n'est pas vide\n        var parts = line.split('\\t'); // Divise la ligne en morceaux en utilisant la tabulation comme séparateur\n        var logObject = {}; // Initialise un objet vide pour stocker les informations du journal\n\n        // Définir des noms de clés significatives en fonction de votre format\n        logObject.type = parts[0]; // Type de journal\n        logObject.name = parts[1]; // Nom de la requête\n        logObject.start = parseInt(parts[3]); // Heure de début convertie en nombre entier\n        logObject.end = parseInt(parts[4]); // Heure de fin convertie en nombre entier\n        logObject.status = parts[5]; // Statut de la requête\n        logObject.error = parts[6]; // Message d'erreur en cas d'échec\n\n        logs.push(logObject); // Ajoute l'objet de journal au tableau des journaux analysés\n    }\n}\n\n// Envoyer les journaux analysés en sortie\nmsg.payload = logs; // Stocke les journaux analysés dans msg.logs\nreturn msg; // Renvoie le message modifié avec les journaux analysés\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 1480,
        "wires": [
            [
                "4f883d95b4ab02fd"
            ]
        ]
    },
    {
        "id": "928688dfc7e23a1b",
        "type": "subflow:4e666803b8f3f742",
        "z": "a922dcbcf6a2e8c4",
        "name": "Volt CPU",
        "x": 1040,
        "y": 760,
        "wires": [
            [
                "739d1dee7ab0721f",
                "598fe1090c5b4a0f"
            ]
        ]
    },
    {
        "id": "3d2e6d7d9144dbc8",
        "type": "subflow:4e666803b8f3f742",
        "z": "a922dcbcf6a2e8c4",
        "name": "Volt RAM",
        "x": 1040,
        "y": 800,
        "wires": [
            [
                "739d1dee7ab0721f",
                "598fe1090c5b4a0f"
            ]
        ]
    },
    {
        "id": "94f3bffcc46817ed",
        "type": "subflow:4e666803b8f3f742",
        "z": "a922dcbcf6a2e8c4",
        "name": "Volt Process",
        "x": 1050,
        "y": 840,
        "wires": [
            [
                "739d1dee7ab0721f",
                "598fe1090c5b4a0f"
            ]
        ]
    },
    {
        "id": "233ac3203df094e7",
        "type": "subflow:4e666803b8f3f742",
        "z": "a922dcbcf6a2e8c4",
        "name": "Volt Température",
        "x": 1070,
        "y": 880,
        "wires": [
            [
                "739d1dee7ab0721f",
                "598fe1090c5b4a0f"
            ]
        ]
    },
    {
        "id": "9b68fcc68bf63570",
        "type": "subflow:4e666803b8f3f742",
        "z": "a922dcbcf6a2e8c4",
        "name": "Nidus CPU",
        "x": 1050,
        "y": 920,
        "wires": [
            [
                "739d1dee7ab0721f",
                "598fe1090c5b4a0f"
            ]
        ]
    },
    {
        "id": "0efa5b24d3d7217a",
        "type": "subflow:4e666803b8f3f742",
        "z": "a922dcbcf6a2e8c4",
        "name": "Nidus RAM",
        "x": 1050,
        "y": 960,
        "wires": [
            [
                "739d1dee7ab0721f",
                "598fe1090c5b4a0f"
            ]
        ]
    },
    {
        "id": "70e86e2eaa84fb45",
        "type": "subflow:4e666803b8f3f742",
        "z": "a922dcbcf6a2e8c4",
        "name": "Nidus Process",
        "x": 1060,
        "y": 1000,
        "wires": [
            [
                "739d1dee7ab0721f",
                "598fe1090c5b4a0f"
            ]
        ]
    },
    {
        "id": "703e1bffc421d496",
        "type": "subflow:4e666803b8f3f742",
        "z": "a922dcbcf6a2e8c4",
        "name": "Nidus Température",
        "x": 1070,
        "y": 1040,
        "wires": [
            [
                "739d1dee7ab0721f",
                "598fe1090c5b4a0f"
            ]
        ]
    },
    {
        "id": "43c8dd92a5c31e0a",
        "type": "file in",
        "z": "a922dcbcf6a2e8c4",
        "name": "Read Graph Gatling",
        "filename": "graphPath.gatling.complet",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1540,
        "y": 1260,
        "wires": [
            [
                "4ffd1b52948d9cda"
            ]
        ]
    },
    {
        "id": "4ffd1b52948d9cda",
        "type": "base64",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "action": "str",
        "property": "msg.payload",
        "x": 1780,
        "y": 1260,
        "wires": [
            [
                "d90f0834e3b1ccbc"
            ]
        ]
    },
    {
        "id": "d90f0834e3b1ccbc",
        "type": "change",
        "z": "a922dcbcf6a2e8c4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "gatlingGraphComplete",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1790,
        "y": 1300,
        "wires": [
            [
                "b1da83a2a3862753"
            ]
        ]
    },
    {
        "id": "01cb020c87fc1c20",
        "type": "comment",
        "z": "3ddecfbaabd60ba5",
        "name": "File Browser",
        "info": "1) Update the default folder in the Init node\n2) Update the default folder in the Reset node as well\n3) You can duplicate the Reset nodes and use them as saved shortcuts\n4) Check the Convert Timestamps function node if you want to see your dates in a different format. I just used the Javascript toISOString format.\n5) The Graph button can read any CSV file which have any number of values, but the first column always contains a timestamp column with javascript timestamp of the data point.",
        "x": 470,
        "y": 120,
        "wires": []
    },
    {
        "id": "b685764fb0ce343d",
        "type": "inject",
        "z": "3ddecfbaabd60ba5",
        "name": "Init",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "change",
        "payload": "/home/NodeRed/pdf",
        "payloadType": "str",
        "x": 470,
        "y": 180,
        "wires": [
            [
                "c773d0965f829785"
            ]
        ]
    },
    {
        "id": "3ea9945f5d2c5f21",
        "type": "ui_button",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "group": "7db53a0c4211bca9",
        "order": 4,
        "width": 4,
        "height": 2,
        "passthru": true,
        "label": "Refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "refresh",
        "payload": "/home/NodeRed/pdf",
        "payloadType": "str",
        "topic": "change",
        "topicType": "str",
        "x": 480,
        "y": 260,
        "wires": [
            [
                "c773d0965f829785"
            ]
        ]
    },
    {
        "id": "13353a6e292fe860",
        "type": "ui_template",
        "z": "3ddecfbaabd60ba5",
        "group": "7db53a0c4211bca9",
        "name": "",
        "order": 1,
        "width": 20,
        "height": 8,
        "format": "<div ng-bind-html=\"msg.payload\" height=\"400\" style=\"height: 400px;\"><br/>\n</div>\n<style>\n/* Applique des styles aux liens */\na[href] {\ncolor: #d93347; /* Couleur du lien */\ntext-decoration: none; /* Pas de soulignement */\n}\n\n/* Applique des styles au survol des liens */\na[href]:hover {\ncolor: #cb0505; /* Couleur du lien au survol */\ntext-decoration: underline; /* Soulignement au survol */\n}\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1320,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "957a956e25f8e711",
        "type": "template",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<table width=\"100%\">\n    <tr><th>Nom de Fichier</th><th>Taille</th><th>Créer</th><th>Changer</th></tr>\n    {{#payload}}\n        <tr>\n            <td><a href=\"/download?filename={{name}}\" target=\"blank\">{{fname}}</a></td>\n            <td>{{stat.size}}</td>\n            <td>{{stat.created}}</td>\n            <td>{{stat.changed}}</td>\n        </tr>\n    {{/payload}}\n</table>\n",
        "output": "str",
        "x": 1300,
        "y": 260,
        "wires": [
            [
                "13353a6e292fe860"
            ]
        ]
    },
    {
        "id": "9e2071ea86cb94f6",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "Convert timestamps",
        "func": "// Fonction pour formater une date en fonction de la timezone de Zurich\nfunction formatToZurichTimezone(date) {\n    var options = {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n        timeZone: 'Europe/Zurich'\n    };\n    return new Intl.DateTimeFormat('fr-CH', options).format(date);\n}\n\n// Parcourir chaque élément dans le tableau \"payload\" du message\nfor (var i = 0; i < msg.payload.length; i++) {\n    // Convertir les propriétés de date/heure dans l'objet \"stat\" au format de Zurich\n    msg.payload[i].stat.created = formatToZurichTimezone(new Date(msg.payload[i].stat.created));\n    msg.payload[i].stat.changed = formatToZurichTimezone(new Date(msg.payload[i].stat.changed));\n    msg.payload[i].stat.accessed = formatToZurichTimezone(new Date(msg.payload[i].stat.accessed));\n    msg.payload[i].stat.statusChanged = formatToZurichTimezone(new Date(msg.payload[i].stat.statusChanged));\n\n    // Extraire le nom de fichier à partir de la propriété \"name\" et mettre à jour \"fname\"\n    msg.payload[i].fname = msg.payload[i].name.replace(/^.*(\\\\|\\/|\\:)/, '');\n}\n\nreturn msg; // Renvoyer le message modifié\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 260,
        "wires": [
            [
                "957a956e25f8e711"
            ]
        ]
    },
    {
        "id": "75572f78ae68fa31",
        "type": "http in",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "url": "/download",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 560,
        "y": 320,
        "wires": [
            [
                "daad9ddc6919835f"
            ]
        ]
    },
    {
        "id": "73c319f32ed934b0",
        "type": "http response",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1350,
        "y": 320,
        "wires": []
    },
    {
        "id": "daad9ddc6919835f",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "Get the file name",
        "func": "msg.filename = msg.req.query.filename;\nmsg.contentdisposition = \"attachment; filename=\\\"\" + msg.req.query.filename.replace(/^.*(\\\\|\\/|\\:)/, '') + \"\\\"\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 810,
        "y": 320,
        "wires": [
            [
                "0bd9eb0dd5d155fc"
            ]
        ],
        "outputLabels": [
            "Folder selected",
            "File selected"
        ]
    },
    {
        "id": "0bd9eb0dd5d155fc",
        "type": "file in",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "filename": "",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 1000,
        "y": 320,
        "wires": [
            [
                "27c43d8078bd45de"
            ]
        ]
    },
    {
        "id": "27c43d8078bd45de",
        "type": "change",
        "z": "3ddecfbaabd60ba5",
        "name": "Set Headers",
        "rules": [
            {
                "t": "set",
                "p": "headers",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "headers.content-type",
                "pt": "msg",
                "to": "text/csv",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "headers.Content-Disposition",
                "pt": "msg",
                "to": "contentdisposition",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1170,
        "y": 320,
        "wires": [
            [
                "73c319f32ed934b0"
            ]
        ]
    },
    {
        "id": "c773d0965f829785",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "Folder handling",
        "func": "// Récupérer la valeur de la variable \"folder\" depuis le contexte\nlet folder = context.get(\"folder\");\n// Si la variable \"folder\" n'est pas définie, l'initialiser avec \"/\"\nif (folder === undefined) {\n    folder = \"/\";\n    context.set(\"folder\", folder); // Enregistrer la valeur dans le contexte\n}\n\n// Récupérer la valeur de la variable \"hidden\" depuis le contexte\nlet hidden = context.get(\"hidden\");\n// Si la variable \"hidden\" n'est pas définie, l'initialiser avec \"false\"\nif (hidden === undefined) {\n    hidden = false;\n    context.set(\"hidden\", hidden); // Enregistrer la valeur dans le contexte\n}\n\n// Si le sujet du message est \"up\"\nif (msg.topic === \"up\") {\n    var the_arr = folder.split('/');\n    the_arr.pop(); // Supprimer le dernier élément du tableau\n    folder = the_arr.join('/'); // Rejoindre les éléments du tableau pour former le nouveau chemin\n    context.set(\"folder\", folder); // Enregistrer le nouveau chemin dans le contexte\n}\n\n// Si le sujet du message est \"change\"\nif (msg.topic === \"change\") {\n    folder = msg.payload; // Mettre à jour la valeur de \"folder\" avec le contenu du champ \"payload\"\n    context.set(\"folder\", folder); // Enregistrer la nouvelle valeur dans le contexte\n}\n\n// Si le sujet du message est \"hidden\"\nif (msg.topic === \"hidden\") {\n    hidden = msg.payload; // Mettre à jour la valeur de \"hidden\" avec le contenu du champ \"payload\"\n    context.set(\"hidden\", hidden); // Enregistrer la nouvelle valeur dans le contexte\n}\n\n// Construire un objet JSON contenant les valeurs actuelles de \"folder\" et \"hidden\"\nmsg.payload = { \"start\": folder, \"hidden\": hidden };\n\nreturn msg; // Renvoyer le message modifié\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 260,
        "wires": [
            [
                "5f8e5eb5277f43f8"
            ]
        ]
    },
    {
        "id": "5f8e5eb5277f43f8",
        "type": "fs-file-lister",
        "z": "3ddecfbaabd60ba5",
        "name": "Files",
        "start": "/home/pi",
        "pattern": "*.*",
        "folders": "*",
        "hidden": false,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": true,
        "showWarnings": false,
        "x": 870,
        "y": 260,
        "wires": [
            [
                "9e2071ea86cb94f6"
            ]
        ]
    },
    {
        "id": "185b6166af84320d",
        "type": "pdfmake",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "outputType": "base64",
        "inputProperty": "payload",
        "options": "{}",
        "outputProperty": "payload",
        "x": 2860,
        "y": 820,
        "wires": [
            [
                "568c67e01ff8c37c"
            ]
        ]
    },
    {
        "id": "568c67e01ff8c37c",
        "type": "file",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "filename": "filepath",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "base64",
        "x": 2740,
        "y": 740,
        "wires": [
            [
                "a74b27989ec4408a"
            ]
        ]
    },
    {
        "id": "2ac0d272272f951b",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "Ajoute le chemin du fichier ",
        "func": "var now = new Date();\nvar jour = (\"0\" + now.getDate()).slice(-2);\nvar mois = (\"0\" + (now.getMonth() + 1)).slice(-2);\n\n// Récupérer le nom de fichier de msg.payload.nameFile, ou utiliser \"default\" si absent\nvar nameFile = msg.payload.nameFile || \"default\";\n// Remplacer les caractères interdits dans le nom de fichier par des underscores\nnameFile = nameFile.replace(/[\\\\/:\"*?<>|]+/g, \"_\");\n\n// Construire le chemin du fichier PDF\nmsg.filePath = \"/home/NodeRed/pdf/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \".pdf\";\n\n// Construire les chemins des fichiers graphiques\nmsg.graphPath = {\n    volt: {\n        complet: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"VOLT.png\",\n        cpu: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"vcpu.png\",\n        ram: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"vram.png\",\n        proc: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"vproc.png\",\n        temp: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"vtemp.png\",\n        watt: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"vwatt.png\"\n    },\n    nidus: {\n        complet: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"NIDUS.png\",\n        cpu: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"ncpu.png\",\n        ram: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"nram.png\",\n        proc: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"nproc.png\",\n        temp: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"ntemp.png\"\n    },\n    gatling: {\n        complet: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"gatling.png\",\n        pass: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"pass.png\",\n        bySeconds: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"bySeconds.png\",\n        //proc: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"nproc.png\",\n        //temp: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"ntemp.png\"\n    },\n    json :{\n        complet: \"/home/NodeRed/json/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"Complet.json\",\n    }\n};\nif (msg.payload.user_gatling <= 0){\n    global.set('gatling', false);\n}else{\n    global.set('gatling', true);\n}\nglobal.set('original', msg.payload);\nglobal.set('path', msg.graphPath);\n// Renvoyer le message modifié\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 740,
        "wires": [
            [
                "4f40317345f06680"
            ]
        ]
    },
    {
        "id": "5147fbe4a671b9e3",
        "type": "ui_form",
        "z": "3ddecfbaabd60ba5",
        "name": "Configuration du Test",
        "label": "",
        "group": "7db53a0c4211bca9",
        "order": 2,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Nom du Fichier pdf",
                "value": "nameFile",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Temps de mesure en minutes",
                "value": "time",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Stress test Volt",
                "value": "stressVolt",
                "type": "checkbox",
                "required": true,
                "rows": null
            },
            {
                "label": "Stress test Nidus",
                "value": "stressNidus",
                "type": "checkbox",
                "required": true,
                "rows": null
            },
            {
                "label": "Temps de Stress test en minutes",
                "value": "timeStress",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Nombre d'utilisateur",
                "value": "user_gatling",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Ventilateur activée ?",
                "value": "flow",
                "type": "checkbox",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "nameFile": "",
            "time": "",
            "stressVolt": false,
            "stressNidus": false,
            "timeStress": "",
            "user_gatling": "",
            "flow": false
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": false,
        "className": "",
        "x": 220,
        "y": 740,
        "wires": [
            [
                "6161ee15cd9719be"
            ]
        ]
    },
    {
        "id": "61d24da92c494fff",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "Créer le contenue du fichier",
        "func": "//Formatage du ventilateur\nvar ventilateur = global.get(\"original.flow\") ? \"Ventilateur activé\" : \"Ventilateur non-activé\";\n// Formatage de la date de début\nvar timestamp = msg.payload.gatling.Assertion.start;\n\n// Créez un objet Date à partir du timestamp\nvar date = new Date(timestamp);\n\n// Définissez le format de date souhaité\nvar options = {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit'\n};\n\n// Formatez la date en une chaîne de caractères\nvar formattedDate = date.toLocaleDateString(\"fr-FR\", options);\n\n\n// Création des données pour le rapport PDF\nmsg.payload = {\n    header: function (currentPage, pageCount, pageSize) {\n        return [\n            {\n                text: \"Tobler Cyril\", // Votre nom\n                alignment: \"left\",\n                fontSize: 10,\n                margin: [15, 10, 0, 0]\n            },\n            {\n                text: \"Nom du projet : Confuse T-Rex\", // Nom de votre projet\n                alignment: \"center\",\n                fontSize: 10,\n                margin: [0, 0, 0, 0]\n            }\n        ];\n    },\n    footer: function (currentPage, pageCount) {\n        return {\n            columns: [\n                {\n                    text: currentPage.toString() + \" / \" + pageCount, // Numéro de page actuel / Nombre total de pages\n                    alignment: \"left\",\n                    fontSize: 10,\n                    margin: [15, 0, 0, 10]\n                },\n                {\n                    text: new Date().toLocaleDateString(\"fr-FR\"), // Date actuelle au format français\n                    alignment: \"right\",\n                    fontSize: 10,\n                    margin: [0, 0, 15, 10]\n                }\n            ],\n            margin: [0, 0, 0, 10]\n        };\n    },\n    content: [\n        {\n            text: \"Rapport d'utilisation : \" + global.get(\"original.nameFile\") , // Titre du rapport\n            style: \"header\",\n            margin: [0, 10, 0, 0]\n        },\n        {\n            text: \"Les valeurs sont des moyennes sur les \" + Math.floor(msg.delay / (1000 * 60)) + \" dernières minutes\" // Informations sur les valeurs\n        }, \n        {\n            text: ventilateur\n        },\n        {\n            text: \"Nidus :\", // Section Nidus\n            style: \"header2\"\n        },\n        {\n            //style: 'tableExample',\n            table: {\n                body: [\n                    ['CPU :', msg.payload.moyenne[\"nidus/benchmark/cpu\"] + \" % d'utilisation\"],\n                    ['RAM :', msg.payload.moyenne[\"nidus/benchmark/ram\"] + \" % d'utilisation (\" + (msg.payload.moyenne[\"nidus/benchmark/ram\"] * (4 / 100)).toFixed(2) + \"Go/4Go)\"],\n                    ['Nombre de processus :', msg.payload.moyenne[\"nidus/benchmark/processes\"]],\n                    ['Température CPU :', msg.payload.moyenne[\"nidus/benchmark/temp\"] + \"° Celcius\"],\n                    \n                ]\n            },\n            layout: 'noBorders'\n        },\n        {\n            image: 'nidusImage', // Image de Nidus\n            margin: [0, 20],\n            width: 500,\n            pageBreak: 'after', // Saut de page après l'image\n        },\n        {\n            text: \"Volt\", // Section Volt\n            style: \"header2\"\n        },\n        {\n            //style: 'tableExample',\n            table: {\n                body: [\n                    ['CPU :', msg.payload.moyenne[\"volt/benchmark/cpu\"] + \" % d'utilisation\"],\n                    ['RAM :', msg.payload.moyenne[\"volt/benchmark/ram\"] + \" % d'utilisation (\" + (msg.payload.moyenne[\"volt/benchmark/ram\"] * (4 / 100)).toFixed(2) + \"Go/4Go)\"],\n                    ['Nombre de processus :', msg.payload.moyenne[\"volt/benchmark/processes\"]],\n                    ['Température CPU :', msg.payload.moyenne[\"volt/benchmark/temp\"] + \"° Celcius\"],\n                    ['MilliWatt :', msg.payload.moyenne.Watt + \"mW\"],\n                    ['Consommation moyenne par requete :', (msg.payload.moyenne.Watt / msg.payload.gatling.Global.numberOfRequests.total).toFixed(2) + \"mW moyen par requete\"],\n                ]\n            },\n            layout: 'noBorders'\n        },\n        {\n            image: 'voltImage', // Image de Volt\n            margin: [0, 20],\n            width: 500,\n        },\n        {\n            image: 'wattImage', // Image Watt de Volt\n            width: 500,\n            margin: [0, 20],\n            pageBreak: 'after', // Saut de page après l'image\n        },\n        {\n            text: \"Gatling\", // Section Gatling\n            style: \"header2\"\n        },\n        {\n        table: {\n            body: [\n                ['Nom de la simulation :', msg.payload.gatling.Assertion.simulation],\n                ['Commencée :', formattedDate],\n                ['Nombre d\\'utilisateur :', msg.original.user_gatling],\n                ['Nombre de requête par utilisateur', '6'],\n                ['Durée prévu :', msg.payload.gatling.Original.time / 60 + \"Min\"],\n            ]\n        },\n        layout: 'noBorders'\n        },\n        {\n            image: 'gatlingImage', // Image Gatling\n            margin: [0, 20],\n            width: 500,\n        },\n        {\n            image: 'gatlingGraphComplete', // Image graphique complet Gatling\n            margin: [0, 20],\n            width: 500,\n        }, \n        {\n            image: 'gatlingGraphBySeconds', // Image graphique complet Gatling\n            margin: [0, 20],\n            width: 500,\n        },\n    ],\n    images: {\n        voltImage: 'data:image/png;base64,' + msg.payload.voltGraph.toString('base64'), // Utilisation du buffer pour l'image Volt\n        wattImage: 'data:image/png;base64,' + msg.payload.wattGraph.toString('base64'),  // Utilisation du buffer pour l'image Watt de Volt\n        nidusImage: 'data:image/png;base64,' + msg.payload.nidusGraph.toString('base64'),  // Utilisation du buffer pour l'image Nidus\n        gatlingImage: 'data:image/png;base64,' + msg.payload.gatlingGraph.toString('base64'),  // Utilisation du buffer pour l'image Gatling\n        gatlingGraphComplete: 'data:image/png;base64,' + msg.payload.gatlingGraphComplete.toString('base64'),  // Utilisation du buffer pour l'image Gatling\n        gatlingGraphBySeconds: 'data:image/png;base64,' + msg.payload.gatlingGraphBySeconds.toString('base64'),  // Utilisation du buffer pour l'image Gatling\n    },\n    styles: {\n        header: {\n            fontSize: 22,\n            bold: true,\n            margin: [0, 30, 0, 0]\n        },\n        header2: {\n            fontSize: 18,\n            bold: true,\n            margin: [0, 20, 0, 0]\n        }\n    }\n};\n\nreturn msg; // Renvoyer le message\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2520,
        "y": 800,
        "wires": [
            [
                "185b6166af84320d"
            ]
        ]
    },
    {
        "id": "4f40317345f06680",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "Activate",
        "func": "var delay = msg.payload.time !== null ? msg.payload.time * 60 * 1000 : 30000; // Convertir en millisecondes si nécessaire\n\n// Créer les objets de message pour chaque sortie\nvar msg1 = {\n    cmd: \"subscribe\",\n    topic: \"/\",\n    complete: true,\n    out:1,\n    delay: delay, // Délai en ms\n    filepath: msg.filePath,\n    graphPath: msg.graphPath\n};\n\nvar msg2 = {\n    cmd: \"subscribe\",\n    topic: \"volt/benchmark/cpu\",\n    out: 2,\n    delay: delay, // Délai en ms\n    filepath: msg.filePath,\n    graphPath: msg.graphPath\n};\n\nvar msg3 = {\n    cmd: \"subscribe\",\n    topic: \"volt/benchmark/ram\",\n    out: 3,\n    delay: delay, // Délai en ms\n    filepath: msg.filePath,\n    graphPath: msg.graphPath\n};\n\nvar msg4 = {\n    cmd: \"subscribe\",\n    topic: \"volt/benchmark/processes\",\n    out: 4,\n    delay: delay, // Délai en ms\n    filepath: msg.filePath,\n    graphPath: msg.graphPath\n};\n\nvar msg5 = {\n    cmd: \"subscribe\",\n    topic: \"volt/benchmark/temp\",\n    out: 5,\n    delay: delay, // Délai en ms\n    filepath: msg.filePath,\n    graphPath: msg.graphPath\n};\n\n\n\nvar msg6 = {\n    cmd: \"subscribe\",\n    topic: \"nidus/benchmark/cpu\",\n    out: 6,\n    delay: delay, // Délai en ms\n    filepath: msg.filePath,\n    graphPath: msg.graphPath\n};\n\nvar msg7 = {\n    cmd: \"subscribe\",\n    topic: \"nidus/benchmark/ram\",\n    out: 7,\n    delay: delay, // Délai en ms\n    filepath: msg.filePath,\n    graphPath: msg.graphPath\n};\n\nvar msg8 = {\n    cmd: \"subscribe\",\n    topic: \"nidus/benchmark/processes\",\n    out: 8,\n    delay: delay, // Délai en ms\n    filepath: msg.filePath,\n    graphPath: msg.graphPath\n};\nvar msg9 = {\n    cmd: \"subscribe\",\n    topic: \"nidus/benchmark/temp\",\n    out: 9,\n    delay: delay, // Délai en ms\n    filepath: msg.filePath,\n    graphPath: msg.graphPath\n};\n\n\n// Envoyer les messages aux sorties correspondantes\n// Les messages seront envoyés dans l'ordre de 0 à 6, correspondant aux sorties activées\n// Assurez-vous que le nœud \"Function\" a sept sorties activées pour recevoir ces messages\nnode.send([msg1, msg2, msg3, msg4, msg5, msg6, msg7,msg8,msg9]);\n",
        "outputs": 9,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 740,
        "wires": [
            [
                "c8c3e29825d49861",
                "fc6746ed9e645fed"
            ],
            [
                "905380c4f5bb1ad1"
            ],
            [
                "e26c12ee046503ba"
            ],
            [
                "b254ad9010121dee"
            ],
            [
                "3715c3bb37e69748"
            ],
            [
                "2bbbedfa3bc935ab"
            ],
            [
                "6cabf479e38ccb4f"
            ],
            [
                "2e76fec4dafc9e0e"
            ],
            [
                "538ecbc87e2091c4"
            ]
        ]
    },
    {
        "id": "c8c3e29825d49861",
        "type": "delay",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "pauseType": "delayv",
        "timeout": "15",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 880,
        "y": 460,
        "wires": [
            [
                "edb017f1c8523846",
                "d65374ceff4d241b"
            ]
        ]
    },
    {
        "id": "4e2b38fbcc7da674",
        "type": "join",
        "z": "3ddecfbaabd60ba5",
        "name": "Values_Volt",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "4",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1330,
        "y": 560,
        "wires": [
            [
                "8f18782105b3b273"
            ]
        ]
    },
    {
        "id": "47bc06039d5e9985",
        "type": "join",
        "z": "3ddecfbaabd60ba5",
        "name": "Moyennes",
        "mode": "custom",
        "build": "object",
        "property": "moyenne",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1530,
        "y": 700,
        "wires": [
            [
                "4b6c6f050d038ee7"
            ]
        ]
    },
    {
        "id": "a74b27989ec4408a",
        "type": "link out",
        "z": "3ddecfbaabd60ba5",
        "name": "End_PDF",
        "mode": "link",
        "links": [
            "e30a7bb45bf64a45",
            "61ea260f9c0b6ef6",
            "a9426f1080d32302"
        ],
        "x": 2855,
        "y": 740,
        "wires": []
    },
    {
        "id": "e30a7bb45bf64a45",
        "type": "link in",
        "z": "3ddecfbaabd60ba5",
        "name": "From_PDF",
        "links": [
            "a74b27989ec4408a",
            "9281f0402caa9ee5",
            "9c0192ec2aea8a29"
        ],
        "x": 385,
        "y": 260,
        "wires": [
            [
                "3ea9945f5d2c5f21"
            ]
        ]
    },
    {
        "id": "d91af9dfcf3f0f53",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "MiseAJourDelay",
        "func": "// Vérifier si msg.delay est défini\nif (msg.delay !== undefined) {\n    if(msg.delay === 1){\n        return null;\n    }\n    // Convertir msg.delay en nombre (si c'est une chaîne)\n    const currentDelay = parseFloat(msg.delay);\n\n    // Vérifier si currentDelay est un nombre valide\n    if (!isNaN(currentDelay)) {\n        // Soustraire 250 de currentDelay, mais s'assurer que le résultat est positif\n        const newDelay = Math.max(currentDelay - 250, 0);\n\n        // Mettre à jour msg.delay avec la nouvelle valeur\n        msg.delay = newDelay;\n\n        // Si le nouveau délai est 0, ne rien retourner\n        if (newDelay === 0) {\n            msg.delay = 1;\n            msg.originalDelay = 1;\n            return msg;\n        } else {\n            // Sinon, retourner le message avec le nouveau délai\n            return msg;\n        }\n    } else {\n        // msg.delay n'est pas un nombre valide\n        return null;\n    }\n} else {\n    // msg.delay n'est pas défini\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 580,
        "wires": [
            [
                "64e1851e14688fd8",
                "2c1b89a63b33039b",
                "ff91089fd9f9e149",
                "cdbce0d39485d9da"
            ]
        ]
    },
    {
        "id": "64e1851e14688fd8",
        "type": "delay",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "pauseType": "delay",
        "timeout": "250",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 630,
        "y": 580,
        "wires": [
            [
                "d91af9dfcf3f0f53"
            ]
        ]
    },
    {
        "id": "fc6746ed9e645fed",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "CopyDelay",
        "func": "// Vérifier si msg.delay est défini\nif (msg.delay !== undefined) {\nmsg.originalDelay = msg.delay;\nreturn msg;\n}else{\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 640,
        "wires": [
            [
                "d91af9dfcf3f0f53"
            ]
        ]
    },
    {
        "id": "9a915e3fcad82fe5",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "Gatling line chart Time_Response",
        "func": "// Création du graphique\nvar chartData = {\n    \n    type: 'line', // Utilisez un graphique de type \"line\"\n    options: {\n        scales: {\n            yAxes: [{\n                ticks: {\n                    fontSize: 40\n                }\n            }],\n            xAxes: [{\n                ticks: {\n                    fontSize: 40\n                }\n            }]\n        },\n        dataset :{\n            labels: {\n                // This more specific font property overrides the global property\n                fontSize: 40,\n                fontColor: 'black',\n                family: 'Arial'\n            },\n            font: {\n                size: 40\n            },\n        },\n        title: {\n            labels: {\n                // This more specific font property overrides the global property\n                fontSize: 50,\n                fontColor: 'black',\n                family: 'Arial'\n            },\n            font: {\n                size: 50\n            },\n            display: true,\n            text: 'Comparaison des performances', // Titre du graphique,\n            fontSize: 50 \n        },\n        legend: {\n            labels: {\n                // This more specific font property overrides the global property\n                fontSize: 40,\n                fontColor: 'black',\n                family: 'Arial'\n            },\n            font: {\n                size: 40\n            },\n            display: true // Affichez la légende du graphique\n        },\n        chartArea: {\n            backgroundColor: '#d3d7dd' // Couleur de fond du graphique\n        },\n        plugins: {\n            datalabels: {\n                display: false // Désactivez l'affichage des étiquettes de données\n            }\n        }\n    },\n    data: {\n        labels: msg.payload.timeResponse.data.labels,\n\n        datasets: msg.payload.timeResponse.data.datasets,\n    }\n};\n\nmsg.payload = chartData; // Attribuez les données du graphique au message\nmsg.topic = \"CompletGatling\";\nmsg.graphPath = global.get('path') || 0;\nreturn msg; // Renvoyez le message\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1800,
        "y": 340,
        "wires": [
            [
                "1a702c563ebe672c"
            ]
        ]
    },
    {
        "id": "1a702c563ebe672c",
        "type": "chart-image",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "width": "1920",
        "height": "1920",
        "x": 2030,
        "y": 340,
        "wires": [
            [
                "3de8c7b1973545bb",
                "ebe77bbd9f1ad946"
            ]
        ]
    },
    {
        "id": "3de8c7b1973545bb",
        "type": "file",
        "z": "3ddecfbaabd60ba5",
        "name": "Gatling Complet",
        "filename": "graphPath.gatling.complet",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2260,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "174a1101b2f9c22a",
        "type": "chart-image",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "width": "1920",
        "height": "1920",
        "x": 1970,
        "y": 540,
        "wires": [
            [
                "dd1e6a5c8dd54193",
                "ebe77bbd9f1ad946"
            ]
        ]
    },
    {
        "id": "dd1e6a5c8dd54193",
        "type": "file",
        "z": "3ddecfbaabd60ba5",
        "name": "volt.complet",
        "filename": "graphPath.volt.complet",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2250,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "22465f6cd8c94555",
        "type": "chart-image",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "width": "1920",
        "height": "1920",
        "x": 1970,
        "y": 580,
        "wires": [
            [
                "306f405893baae9d",
                "ebe77bbd9f1ad946"
            ]
        ]
    },
    {
        "id": "306f405893baae9d",
        "type": "file",
        "z": "3ddecfbaabd60ba5",
        "name": "volt.complet",
        "filename": "graphPath.nidus.complet",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2250,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "5fcb7ef9b29fa1d1",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "Nidus Line Chart",
        "func": "// Données reçues du flux précédent\nvar rawData = msg.payload;\nvar delayInSeconds = msg.delay / 1000; // Conversion en secondes\nmsg.topic = \"NidusLineChart\";\n// Extraction des données nécessaires\nvar nidusCpuData = rawData[\"nidus/benchmark/cpu\"];\nvar nidusRamData = rawData[\"nidus/benchmark/ram\"];\nvar nidusTempData = rawData[\"nidus/benchmark/temp\"];\n\n// Création du graphique\nvar chartData = {\n    type: 'line',  // Changement du type de graphique en \"line\"\n    options: {\n        scales: {\n            yAxes: [{\n                ticks: {\n                    fontSize: 40\n                }\n            }],\n            xAxes: [{\n                ticks: {\n                    fontSize: 40\n                }\n            }]\n        },\n        title: {\n            display: true,\n            text: 'Comparaison des performances',\n            fontSize: 50 // Définir la taille de la police ici\n        },\n        legend: {\n            display: true,\n            labels: {\n                // This more specific font property overrides the global property\n                fontSize: 40,\n                fontColor: 'black',\n                family: 'Arial'\n            },\n            font: {\n                size: 30\n            },\n        },\n        chartArea: {\n            backgroundColor: '#d3d7dd'\n        },\n        plugins: {\n            datalabels: {\n                display: false  // Désactiver l'affichage des étiquettes de données\n            }\n        }\n    },\n    data: {\n        labels: Array.from({ length: nidusCpuData.length }, (_, i) => {\n            // Calculer le délai réel entre chaque valeur en millisecondes\n            var realDelay = msg.delay / (nidusCpuData.length - 1);\n\n            // Calculer le temps en millisecondes à partir de l'index\n            var timeMillis = i * realDelay;\n\n            // Convertir le temps en minutes et secondes\n            var minutes = Math.floor(timeMillis / 60000); // 60000 millisecondes équivalent à 1 minute\n            var seconds = ((timeMillis % 60000) / 1000).toFixed(0);\n\n            // Créer le label en fonction de la durée\n            if (minutes === 0) {\n                return seconds + ' s'; // Temps en secondes si inférieur à 1 minute\n            } else {\n                return minutes + ' min ' + seconds + ' s'; // Temps en minute:secondes si supérieur à 1 minute\n            }\n        }),\n\n\n        datasets: [\n            \n            {\n                label: \"Nidus CPU en %\",\n                borderColor: 'rgba(255, 69, 0, 1)',\n                fill: false,\n                data: nidusCpuData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Nidus RAM en %\",\n                borderColor: 'rgba(255, 165, 0, 1)',\n                fill: false,\n                data: nidusRamData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Température de Nidus en °C\",\n                borderColor: 'rgba(255, 0, 0, 1)',\n                fill: false,\n                data: nidusTempData,\n                pointRadius: 0,\n            }\n        ]\n    }\n};\n\nmsg.payload = chartData;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 580,
        "wires": [
            [
                "22465f6cd8c94555"
            ]
        ]
    },
    {
        "id": "8e88bc82f50cac2f",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "Volt Line Chart",
        "func": "// Données reçues du flux précédent\nvar rawData = msg.payload;\nvar delayInSeconds = msg.delay / 1000; // Conversion en secondes\nmsg.topic = \"VoltLineChart\";\n// Extraction des données nécessaires\nvar voltCpuData = rawData[\"volt/benchmark/cpu\"];\nvar voltRamData = rawData[\"volt/benchmark/ram\"];\nvar voltTempData = rawData[\"volt/benchmark/temp\"];\n\n\n// Création du graphique\nvar chartData = {\n    type: 'line',  // Changement du type de graphique en \"line\"\n    options: {\n        scales: {\n            yAxes: [{\n                ticks: {\n                    fontSize: 40\n                }\n            }],\n            xAxes: [{\n                ticks: {\n                    fontSize: 40\n                }\n            }]\n        },\n        title: {\n            display: true,\n            text: 'Comparaison des performances',\n            fontSize: 50 \n        },\n        legend: {\n            display: true,\n            labels: {\n                // This more specific font property overrides the global property\n                fontSize: 40,\n                fontColor: 'black',\n                family: 'Arial'\n            },\n            font: {\n                size: 30\n            },\n        },\n        chartArea: {\n            backgroundColor: '#d3d7dd'\n        },\n        plugins: {\n            datalabels: {\n                display: false  // Désactiver l'affichage des étiquettes de données\n            }\n        }\n    },\n    data: {\n        labels: Array.from({ length: voltCpuData.length }, (_, i) => {\n            // Calculer le délai réel entre chaque valeur en millisecondes\n            var realDelay = msg.delay / (voltCpuData.length - 1);\n\n            // Calculer le temps en millisecondes à partir de l'index\n            var timeMillis = i * realDelay;\n\n            // Convertir le temps en minutes et secondes\n            var minutes = Math.floor(timeMillis / 60000); // 60000 millisecondes équivalent à 1 minute\n            var seconds = ((timeMillis % 60000) / 1000).toFixed(0);\n\n            // Créer le label en fonction de la durée\n            if (minutes === 0) {\n                return seconds + ' s'; // Temps en secondes si inférieur à 1 minute\n            } else {\n                return minutes + ' min ' + seconds + ' s'; // Temps en minute:secondes si supérieur à 1 minute\n            }\n        }),datasets: [\n            {\n                label: \"Volt CPU en %\",\n                borderColor: 'rgba(0, 128, 255, 1)',  // Couleur de la ligne (couleur froide pour Volt)\n                fill: false,  // Désactiver le remplissage sous la ligne\n                data: voltCpuData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Volt RAM en %\",\n                borderColor: 'rgba(0, 255, 128, 1)',\n                fill: false,\n                data: voltRamData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Température Volt en °C\",\n                borderColor: 'rgba(0, 173, 0, 1)',\n                fill: false,\n                data: voltTempData,\n                pointRadius: 0,\n            },\n\n        ]\n    }\n};\n\nmsg.payload = chartData;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1740,
        "y": 540,
        "wires": [
            [
                "174a1101b2f9c22a"
            ]
        ]
    },
    {
        "id": "843f23c9472dcd82",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "Commmandes de StressTest",
        "func": "const sshNidus = \"ssh tobby@nidus\"; \nconst sshVolt = \"ssh tobby@157.26.228.77\"; \n\n    var stressCommandsNidus;\n    var stressCommandsVolt;\n\n    if (msg.payload.stressNidus) {\n        var msg1 = {\n            payload : `stress-ng --cpu 2 --io 1 --timeout ${msg.payload.timeStress*60}s --cpu-load 100 --vm-bytes 3G`\n        };\n    }\n\n    if (msg.payload.stressVolt) {\n        var msg2 = {\n            payload: `ssh tobby@157.26.228.77 \\\"stress-ng --cpu 2 --io 1 --timeout ${msg.payload.timeStress*60}s --cpu-load 100 --vm-bytes 3G\\\"`\n        };\n    }\n    node.send([msg1, msg2]);\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 780,
        "wires": [
            [
                "53935ce83ac7114d"
            ],
            [
                "53935ce83ac7114d"
            ]
        ]
    },
    {
        "id": "53935ce83ac7114d",
        "type": "exec",
        "z": "3ddecfbaabd60ba5",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 730,
        "y": 840,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "2c1b89a63b33039b",
        "type": "ui_template",
        "z": "3ddecfbaabd60ba5",
        "group": "7db53a0c4211bca9",
        "name": "ProgressBar",
        "order": 3,
        "width": 0,
        "height": 0,
        "format": "<style>\n    .custom-progress-bar .md-progress-linear-fill {\n        height: 20px;\n        /* Définissez la hauteur souhaitée ici */\n    }\n</style>\n\n<div layout=\"column\" layout-align=\"center center\">\n    <md-progress-linear class=\"md-accent custom-progress-bar\" md-mode=\"determinate\"\n        value=\"{{(msg.originalDelay - msg.delay) / msg.originalDelay * 100}}\"\n        ng-show=\"msg.delay !== undefined && msg.originalDelay !== undefined\"></md-progress-linear>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 630,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "3f9aa754e519b6bf",
        "type": "join",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "8",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 2130,
        "y": 880,
        "wires": [
            [
                "fc5e94a4a331daa9"
            ]
        ]
    },
    {
        "id": "4b6c6f050d038ee7",
        "type": "change",
        "z": "3ddecfbaabd60ba5",
        "name": "Organise Payload-Topic",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "moyenne",
                "tot": "msg",
                "dc": true
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "moyenne",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1450,
        "y": 960,
        "wires": [
            [
                "3f9aa754e519b6bf",
                "0e7f197bf1565d7d",
                "34a2fc5b8d7b23f5",
                "2e398589767e8c31",
                "bf9fb2fa5c67c823",
                "7bea6cb7e326cd96"
            ]
        ]
    },
    {
        "id": "f19dd33d0ea2556f",
        "type": "change",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "complete",
                "pt": "msg",
                "to": "true",
                "tot": "bool",
                "dc": true
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "ChartComplete",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1820,
        "y": 700,
        "wires": [
            [
                "47bc06039d5e9985"
            ]
        ]
    },
    {
        "id": "b410e022596a76a9",
        "type": "change",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Moyenne_Graph",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2090,
        "y": 820,
        "wires": [
            [
                "e2f02700306d0d95"
            ]
        ]
    },
    {
        "id": "34a2fc5b8d7b23f5",
        "type": "file in",
        "z": "3ddecfbaabd60ba5",
        "name": "Read Graph Nidus Complet",
        "filename": "graphPath.nidus.complet",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1740,
        "y": 1200,
        "wires": [
            [
                "4d1dc0b82f1f1fc7"
            ]
        ]
    },
    {
        "id": "4d1dc0b82f1f1fc7",
        "type": "base64",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "action": "str",
        "property": "msg.payload",
        "x": 1960,
        "y": 1200,
        "wires": [
            [
                "880fa3757ad43cf0"
            ]
        ]
    },
    {
        "id": "0e7f197bf1565d7d",
        "type": "file in",
        "z": "3ddecfbaabd60ba5",
        "name": "Read Graph Volt Complet",
        "filename": "graphPath.volt.complet",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1730,
        "y": 1080,
        "wires": [
            [
                "c7adcd216ef822e7"
            ]
        ]
    },
    {
        "id": "c7adcd216ef822e7",
        "type": "base64",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "action": "str",
        "property": "msg.payload",
        "x": 1960,
        "y": 1080,
        "wires": [
            [
                "43a3c100f421df13"
            ]
        ]
    },
    {
        "id": "43a3c100f421df13",
        "type": "change",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "voltGraph",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1950,
        "y": 1040,
        "wires": [
            [
                "7bea6cb7e326cd96"
            ]
        ]
    },
    {
        "id": "880fa3757ad43cf0",
        "type": "change",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "nidusGraph",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1950,
        "y": 1240,
        "wires": [
            [
                "7bea6cb7e326cd96"
            ]
        ]
    },
    {
        "id": "e3d7396a7875a998",
        "type": "debug",
        "z": "3ddecfbaabd60ba5",
        "name": "CATCH_ERROR",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 1520,
        "wires": []
    },
    {
        "id": "46ed706987bdb120",
        "type": "catch",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 360,
        "y": 1520,
        "wires": [
            [
                "e3d7396a7875a998"
            ]
        ]
    },
    {
        "id": "648931f9266586ae",
        "type": "join",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "6",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2090,
        "y": 620,
        "wires": [
            [
                "f19dd33d0ea2556f"
            ]
        ]
    },
    {
        "id": "9cca8b6d34885bce",
        "type": "ina-sensor",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "handle": "173c4031bd3a25c0",
        "x": 370,
        "y": 420,
        "wires": [
            [
                "9448fba42d2b5bb9"
            ],
            [
                "9448fba42d2b5bb9"
            ]
        ]
    },
    {
        "id": "f294c4f82c5e3b12",
        "type": "join",
        "z": "3ddecfbaabd60ba5",
        "name": "Join_2",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 870,
        "y": 420,
        "wires": [
            [
                "028a865d49be24af"
            ]
        ]
    },
    {
        "id": "ff91089fd9f9e149",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "USE",
        "func": "msg.use = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 460,
        "wires": [
            [
                "f294c4f82c5e3b12"
            ]
        ]
    },
    {
        "id": "2333e58dfc902ea5",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "MilliWatt",
        "func": "// Récupérer les valeurs de courant (mA) et de tension (V) depuis les propriétés msg.payload\nvar current_mA = msg.payload.miliamps;\nvar voltage_V = msg.payload.voltage;\n\n// Calculer la puissance en watts (W)\nvar power_W = (current_mA / 1000) * voltage_V;  // Convertir le courant en ampères\n\n// Vérifier si la tension est négative\nif (voltage_V < 0.5) {\n    // Si la tension est négative, ne rien faire et retourner le message inchangé\n    return null;\n}\n\n// Créer un nouvel objet msg avec la puissance en watts comme payload\nmsg.payload = power_W*1000;\nmsg.topic = \"Watt\";\n// Renvoyer le message modifié\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 420,
        "wires": [
            [
                "f294c4f82c5e3b12"
            ]
        ]
    },
    {
        "id": "9448fba42d2b5bb9",
        "type": "join",
        "z": "3ddecfbaabd60ba5",
        "name": "Join_Amp_Volt",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 560,
        "y": 420,
        "wires": [
            [
                "2333e58dfc902ea5"
            ]
        ]
    },
    {
        "id": "028a865d49be24af",
        "type": "switch",
        "z": "3ddecfbaabd60ba5",
        "name": "DropWhenNotUse",
        "property": "use",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1050,
        "y": 420,
        "wires": [
            [
                "746cac8a393dad70"
            ],
            []
        ]
    },
    {
        "id": "edb017f1c8523846",
        "type": "join",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 1090,
        "y": 460,
        "wires": [
            [
                "0b4111c93adf9346"
            ]
        ]
    },
    {
        "id": "0b4111c93adf9346",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "Rename",
        "func": "// Définir le sujet du message\nmsg.topic = \"Watt\";\n\n// Vérifier si le tableau payload existe et n'est pas vide\nif (msg.payload && Array.isArray(msg.payload) && msg.payload.length > 0) {\n    // Convertir les valeurs en chaînes de caractères en nombres entiers\n    var numericValues = msg.payload.map(function (value) {\n        return parseInt(value, 10); // 10 indique la base décimale\n    }).filter(function (value) {\n        return !isNaN(value); // Filtrer les valeurs non numériques\n    });\n\n    // Vérifier si des valeurs numériques ont été trouvées\n    if (numericValues.length > 0) {\n        // Calculer la somme des valeurs numériques dans le tableau\n        var sum = numericValues.reduce(function (acc, value) {\n            return acc + value;\n        }, 0);\n\n        // Calculer la moyenne en divisant la somme par le nombre d'éléments\n        var moyenne = sum / numericValues.length;\n\n        // Arrondir la moyenne à deux chiffres après la virgule et au multiple de 0.05 le plus proche\n        moyenne = Math.round(moyenne * 20) / 20;\n\n        // Ajouter la moyenne au message\n        msg.moyenne = moyenne.toFixed(2);\n    } else {\n        // Si aucune valeur numérique n'a été trouvée, définir la moyenne à 0\n        msg.moyenne = \"0.00\";\n    }\n} else {\n    // Si le tableau est vide ou n'existe pas, définir la moyenne à 0\n    msg.moyenne.volt.benchmark.cpu = \"0.00\";\n}\n\n// Renvoyer le message modifié\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 460,
        "wires": [
            [
                "661cbaab578efee6",
                "47bc06039d5e9985",
                "41aa33d6cb459a40"
            ]
        ]
    },
    {
        "id": "746cac8a393dad70",
        "type": "change",
        "z": "3ddecfbaabd60ba5",
        "name": "Set Payload Watt",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.Watt",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1270,
        "y": 420,
        "wires": [
            [
                "edb017f1c8523846"
            ]
        ]
    },
    {
        "id": "661cbaab578efee6",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "Watt Line Chart",
        "func": "// Données reçues du flux précédent\nvar rawData = msg.payload;\nvar delayInSeconds = msg.delay / 1000; // Conversion en secondes\n\n// Extraction des données nécessaires\nvar voltWatt = rawData;\n\n// Fonction pour calculer la moyenne mobile\nfunction movingAverage(data, windowSize) {\n    var smoothedData = [];\n    for (var i = 0; i < data.length; i++) {\n        var start = Math.max(0, i - Math.floor(windowSize / 2));\n        var end = Math.min(data.length - 1, i + Math.floor(windowSize / 2));\n        var sum = 0;\n        for (var j = start; j <= end; j++) {\n            sum += data[j];\n        }\n        smoothedData.push(sum / (end - start + 1));\n    }\n    return smoothedData;\n}\n\n// Appliquer la moyenne mobile avec une fenêtre de 5 échantillons (vous pouvez ajuster la taille de la fenêtre si nécessaire)\nvar smoothedVoltWatt = movingAverage(voltWatt, 5);\n\n// Création du graphique\nvar chartData = {\n    type: 'line',  // Changement du type de graphique en \"line\"\n    options: {\n        scales: {\n            yAxes: [{\n                ticks: {\n                    fontSize: 40\n                }\n            }],\n            xAxes: [{\n                ticks: {\n                    fontSize: 40\n                }\n            }]\n        },\n        title: {\n            display: true,\n            text: 'Comparaison des performances',\n            fontSize: 50\n        },\n        legend: {\n            display: true,\n            labels: {\n                // This more specific font property overrides the global property\n                fontSize: 40,\n                fontColor: 'black',\n                family: 'Arial'\n            },\n            font: {\n                size: 30\n            },\n        },\n        chartArea: {\n            backgroundColor: '#d3d7dd'\n        },\n        plugins: {\n            datalabels: {\n                display: false  // Désactiver l'affichage des étiquettes de données\n            }\n        }\n    },\n    data: {\n        labels: Array.from({ length: smoothedVoltWatt.length }, (_, i) => {\n            // Calculer le délai réel entre chaque valeur en millisecondes\n            var realDelay = msg.delay / (smoothedVoltWatt.length - 1);\n\n            // Calculer le temps en millisecondes à partir de l'index\n            var timeMillis = i * realDelay;\n\n            // Convertir le temps en minutes et secondes\n            var minutes = Math.floor(timeMillis / 60000); // 60000 millisecondes équivalent à 1 minute\n            var seconds = ((timeMillis % 60000) / 1000).toFixed(0);\n\n            // Créer le label en fonction de la durée\n            if (minutes === 0) {\n                return seconds + ' s'; // Temps en secondes si inférieur à 1 minute\n            } else {\n                return minutes + ' min ' + seconds + ' s'; // Temps en minute:secondes si supérieur à 1 minute\n            }\n        }),\n        datasets: [\n            {\n                label: \"MilliWatt de Volt\",\n                borderColor: 'rgba(0, 0, 0, 1)',\n                fill: false,\n                data: smoothedVoltWatt, // Utilisation des données lissées\n                pointRadius: 0,\n            },\n        ]\n    }\n};\n\nmsg.payload = chartData;\nmsg.topic = \"Watt\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1740,
        "y": 460,
        "wires": [
            [
                "73659a47db81fffa"
            ]
        ]
    },
    {
        "id": "73659a47db81fffa",
        "type": "chart-image",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "width": "1920",
        "height": "1920",
        "x": 2030,
        "y": 460,
        "wires": [
            [
                "f53a9c270f0476dd",
                "ebe77bbd9f1ad946"
            ]
        ]
    },
    {
        "id": "f53a9c270f0476dd",
        "type": "file",
        "z": "3ddecfbaabd60ba5",
        "name": "volt.watt",
        "filename": "graphPath.volt.watt",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2240,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "2e398589767e8c31",
        "type": "file in",
        "z": "3ddecfbaabd60ba5",
        "name": "Read Graph Volt Watt",
        "filename": "graphPath.volt.watt",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1720,
        "y": 1120,
        "wires": [
            [
                "b536d3599aa2f9d1"
            ]
        ]
    },
    {
        "id": "b536d3599aa2f9d1",
        "type": "base64",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "action": "str",
        "property": "msg.payload",
        "x": 1960,
        "y": 1120,
        "wires": [
            [
                "b0c62acec8c6f52e"
            ]
        ]
    },
    {
        "id": "b0c62acec8c6f52e",
        "type": "change",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "wattGraph",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1950,
        "y": 1160,
        "wires": [
            [
                "7bea6cb7e326cd96"
            ]
        ]
    },
    {
        "id": "cdbce0d39485d9da",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "Prepare Payload Time",
        "func": "// Vérifier si les valeurs sont toutes les deux égales à 1 milliseconde\nif (msg.originalDelay === 1 && msg.delay === 1) {\n    msg.payload = \"00:00\";  // Cas spécial\n} else {\n    // Calculer le temps effectué et le temps total (en millisecondes)\n    var tempsEffectue = msg.originalDelay - msg.delay;\n    var tempsTotal = msg.originalDelay;\n\n    // Convertir les millisecondes en secondes\n    tempsEffectue /= 1000;\n    tempsTotal /= 1000;\n\n    // Arrondir les secondes\n    tempsEffectue = Math.round(tempsEffectue);\n    tempsTotal = Math.round(tempsTotal);\n\n    // Formater les temps dans le format \"mm:ss\"\n    var formatTemps = function (temps) {\n        var minutes = Math.floor(temps / 60);\n        var secondes = temps % 60;\n        return (minutes < 10 ? \"0\" : \"\") + minutes + \":\" + (secondes < 10 ? \"0\" : \"\") + secondes;\n    };\n\n    // Former le résultat\n    var tempsFormate = formatTemps(tempsEffectue) + \"/\" + formatTemps(tempsTotal);\n\n    msg.payload = tempsFormate;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 520,
        "wires": [
            [
                "53715ad9209c9206"
            ]
        ]
    },
    {
        "id": "53715ad9209c9206",
        "type": "ui_text",
        "z": "3ddecfbaabd60ba5",
        "group": "7db53a0c4211bca9",
        "order": 5,
        "width": 12,
        "height": 2,
        "name": "Time",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "30",
        "color": "#e01b24",
        "x": 370,
        "y": 460,
        "wires": []
    },
    {
        "id": "90f06f2e3314dc04",
        "type": "ui_toast",
        "z": "3ddecfbaabd60ba5",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "Valider",
        "cancel": "Annuler",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 270,
        "y": 840,
        "wires": [
            [
                "43879f6f68a19b72"
            ]
        ]
    },
    {
        "id": "c31b16e09ed16fb6",
        "type": "ui_button",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "group": "7db53a0c4211bca9",
        "order": 6,
        "width": 4,
        "height": 2,
        "passthru": true,
        "label": "Purge",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "Voulez vous vraiment purger tout les fichier generé par Node-Red ?",
        "payloadType": "str",
        "topic": "Purge des fichier !!!",
        "topicType": "str",
        "x": 250,
        "y": 800,
        "wires": [
            [
                "90f06f2e3314dc04"
            ]
        ]
    },
    {
        "id": "8812246b7bf96e92",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "Purge",
        "func": "if (msg.payload === \"Valider\"){\n    msg.payload = \"rm -r /home/NodeRed/* && rm -r /home/tobby/.gatling/gatling-charts-highcharts-bundle-3.9.5/results/*\";\n    return msg;\n}else{\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 920,
        "wires": [
            [
                "53935ce83ac7114d"
            ]
        ]
    },
    {
        "id": "942e569b3f3c24be",
        "type": "ui_toast",
        "z": "3ddecfbaabd60ba5",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "Valider",
        "cancel": "Annuler",
        "raw": false,
        "className": "",
        "topic": "VRAIMENT ???",
        "name": "",
        "x": 270,
        "y": 920,
        "wires": [
            [
                "8812246b7bf96e92",
                "8d8e28367d18d7d7"
            ]
        ]
    },
    {
        "id": "43879f6f68a19b72",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "function 5",
        "func": "if (msg.payload === \"Valider\"){\n    msg.payload = \"En êtes vous bien sûr ???\";\n    return msg;\n}else{\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 880,
        "wires": [
            [
                "942e569b3f3c24be"
            ]
        ]
    },
    {
        "id": "8d8e28367d18d7d7",
        "type": "delay",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 460,
        "y": 960,
        "wires": [
            [
                "e80c81ac6518e905"
            ]
        ]
    },
    {
        "id": "e80c81ac6518e905",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "Mkdir",
        "func": "if (msg.payload === \"Valider\"){\n    msg.payload = \"mkdir /home/NodeRed/png /home/NodeRed/pdf /home/NodeRed/json\";\n    return msg;\n}else{\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 960,
        "wires": [
            [
                "53935ce83ac7114d"
            ]
        ]
    },
    {
        "id": "71d1b35c803dd600",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "Command_Gatling",
        "func": "msg.original = msg.payload;\nif (msg.payload.time !== undefined && msg.payload.user_gatling !== undefined && msg.payload.user_gatling > 0) {\n        // Crée la commande en utilisant les valeurs spécifiées\n    msg.payload.time = msg.payload.time * 60;\n    msg.payload = `/home/tobby/.gatling/gatling-charts-highcharts-bundle-3.9.5/bin/gatling.sh -s CuriusTRex -bm --run-mode local -erjo \"-Dusers=${msg.payload.user_gatling} -Dramp=${msg.payload.time} -Xms2G -Xmx4G\" | tail -1`;\n    return msg;\n    } else {\n        return null;\n    }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1040,
        "wires": [
            [
                "94a5562c2961dfd4"
            ]
        ]
    },
    {
        "id": "94a5562c2961dfd4",
        "type": "exec",
        "z": "3ddecfbaabd60ba5",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 650,
        "y": 1020,
        "wires": [
            [
                "d11f7afdc4889557",
                "752215d4be43422d",
                "8759770dc87d8ac7"
            ],
            [
                "752215d4be43422d"
            ],
            [
                "752215d4be43422d"
            ]
        ]
    },
    {
        "id": "250bc45cdae0b36f",
        "type": "inject",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "payload.gatling",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "inject",
        "x": 270,
        "y": 1040,
        "wires": [
            [
                "71d1b35c803dd600"
            ]
        ]
    },
    {
        "id": "d11f7afdc4889557",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "extractFilePathsAndCreateJsonKeyValue",
        "func": "// Fonction pour extraire le chemin après \"file://\"\nvar inputPayload = msg.payload;\n\n// Recherche de l'index de \"file://\"\nvar fileIndex = inputPayload.indexOf(\"file://\");\n\n// Si \"file://\" est trouvé, extrayez le chemin après\nif (fileIndex !== -1) {\n    // Extraire le chemin après \"file://\"\n    var filePath = inputPayload.substring(fileIndex + 7); // +7 pour sauter \"file://\"\n\n    // Supprimer le fichier index.html du chemin, s'il est présent\n        filePath = filePath.substring(0, filePath.length - 12); // -11 pour enlever \"/index.html\"\n\n    // Mettre le chemin extrait dans le message de sortie\n    msg.payload = filePath;\n\n    // Tableau de noms de fichiers .json\n    var jsonFilesList = [\n        \"assertions.json\",\n        \"global_stats.json\",\n        \"stats.json\"\n    ];\n\n    // Créer un tableau de clé-valeurs pour les fichiers .json\n    var jsonFilesKeyValue = {};\n\n    // Parcourir la liste des noms de fichiers et construire les chemins complets\n    for (var i = 0; i < jsonFilesList.length; i++) {\n        var jsonFileName = jsonFilesList[i];\n        var jsonFilePath = filePath + '/js/' + jsonFileName;\n        jsonFilesKeyValue[jsonFileName] = jsonFilePath;\n    }\n\n    // Ajouter le tableau de clé-valeurs au message\n    msg.jsonFiles = jsonFilesKeyValue;\n\n    // Renvoyer le message modifié\n    return msg;\n} else {\n    // Aucun \"file://\" trouvé, renvoyer le message d'origine\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 1020,
        "wires": [
            [
                "9197964b7793ca79",
                "46daa1258fe41e08",
                "53c70d418773723d",
                "7964135626c90274"
            ]
        ]
    },
    {
        "id": "9197964b7793ca79",
        "type": "file in",
        "z": "3ddecfbaabd60ba5",
        "name": "Assertion Json",
        "filename": "jsonFiles[\"assertions.json\"]",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1400,
        "y": 1660,
        "wires": [
            [
                "11d925bcc7cda83a"
            ]
        ]
    },
    {
        "id": "46daa1258fe41e08",
        "type": "file in",
        "z": "3ddecfbaabd60ba5",
        "name": "Global Stats Json",
        "filename": "jsonFiles[\"global_stats.json\"]",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1410,
        "y": 1700,
        "wires": [
            [
                "95ed665ca3423482"
            ]
        ]
    },
    {
        "id": "53c70d418773723d",
        "type": "file in",
        "z": "3ddecfbaabd60ba5",
        "name": "Stats Json",
        "filename": "jsonFiles[\"stats.json\"]",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1390,
        "y": 1740,
        "wires": [
            [
                "35a5648a451bfded"
            ]
        ]
    },
    {
        "id": "35a5648a451bfded",
        "type": "json",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1550,
        "y": 1740,
        "wires": [
            [
                "6a6ebdee55ae4406"
            ]
        ]
    },
    {
        "id": "95ed665ca3423482",
        "type": "json",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1570,
        "y": 1700,
        "wires": [
            [
                "623af51c16473252"
            ]
        ]
    },
    {
        "id": "11d925bcc7cda83a",
        "type": "json",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1550,
        "y": 1660,
        "wires": [
            [
                "a1254d1ea617fcfe"
            ]
        ]
    },
    {
        "id": "a1254d1ea617fcfe",
        "type": "change",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Assertion",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1690,
        "y": 1660,
        "wires": [
            [
                "5f7d9a95d0c65757"
            ]
        ]
    },
    {
        "id": "623af51c16473252",
        "type": "change",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Global",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1710,
        "y": 1700,
        "wires": [
            [
                "5f7d9a95d0c65757"
            ]
        ]
    },
    {
        "id": "6a6ebdee55ae4406",
        "type": "change",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Stats",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1690,
        "y": 1740,
        "wires": [
            [
                "5f7d9a95d0c65757"
            ]
        ]
    },
    {
        "id": "5f7d9a95d0c65757",
        "type": "join",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "3",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1890,
        "y": 1700,
        "wires": [
            [
                "7aea4a31c908237b"
            ]
        ]
    },
    {
        "id": "8ff2cbbf96cb265b",
        "type": "change",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "gatling",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2090,
        "y": 1700,
        "wires": [
            [
                "c89add291df1506b"
            ]
        ]
    },
    {
        "id": "7abe58379969346a",
        "type": "file in",
        "z": "3ddecfbaabd60ba5",
        "name": "Read Graph Gatling",
        "filename": "graphPath.gatling.pass",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1720,
        "y": 1280,
        "wires": [
            [
                "af3509726586fd8a"
            ]
        ]
    },
    {
        "id": "af3509726586fd8a",
        "type": "base64",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "action": "str",
        "property": "msg.payload",
        "x": 1960,
        "y": 1280,
        "wires": [
            [
                "b8596cff6176e5e9"
            ]
        ]
    },
    {
        "id": "b8596cff6176e5e9",
        "type": "change",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "gatlingGraph",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1970,
        "y": 1320,
        "wires": [
            [
                "7bea6cb7e326cd96"
            ]
        ]
    },
    {
        "id": "c89add291df1506b",
        "type": "link out",
        "z": "3ddecfbaabd60ba5",
        "name": "gatling",
        "mode": "link",
        "links": [
            "45787365124bf1fc",
            "476457a3a2a870ea",
            "4f5c88f3e01f4956"
        ],
        "x": 2225,
        "y": 1700,
        "wires": []
    },
    {
        "id": "476457a3a2a870ea",
        "type": "link in",
        "z": "3ddecfbaabd60ba5",
        "name": "link in 2",
        "links": [
            "c89add291df1506b"
        ],
        "x": 1465,
        "y": 300,
        "wires": [
            [
                "4f2f7a8aa9ba24bb"
            ]
        ]
    },
    {
        "id": "e83ee25f95ec96b8",
        "type": "chart-image",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "width": "1920",
        "height": "1920",
        "x": 2030,
        "y": 300,
        "wires": [
            [
                "96510d6bc4a88a3c",
                "ebe77bbd9f1ad946"
            ]
        ]
    },
    {
        "id": "4f2f7a8aa9ba24bb",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "Gatling bar chart",
        "func": "// Données reçues du flux précédent\nvar rawData = msg.payload.Global;  // Utilisez les données de msg.payload.gatling.Global\nmsg.topic = \"GatlingPass\"; // Définir le sujet du message\n\n// Extraction des données nécessaires\nvar groupData = [\n    rawData.group1,\n    rawData.group2,\n    rawData.group3,\n    rawData.group4\n];\n\nvar labels = [];\nvar percentages = [];\n\n// Parcourir les données des groupes et extraire les informations\nfor (var i = 1; i <= groupData.length; i++) {\n    var groupName = \"group\" + i;\n    labels.push(rawData[groupName].htmlName);\n    percentages.push(rawData[groupName].percentage);\n}\n\n// Création du graphique\nvar chartData = {\n    type: 'bar',  // Utiliser un graphique de type \"bar\"\n    options: {\n        title: {\n            display: true,\n            text: 'Répartition des performances par groupe', // Titre du graphique,\n            fontSize: 50 \n        },\n        legend: {\n            display: true,\n            labels: {\n                // This more specific font property overrides the global property\n                fontSize: 40,\n                fontColor: 'black',\n                family: 'Arial'\n            },\n            font: {\n                size: 40\n            },\n        },\n        chartArea: {\n            backgroundColor: '#d3d7dd' // Couleur de fond du graphique\n        },\n        scales: {\n            x: {\n                beginAtZero: true,\n                title: {\n                    display: true,\n                    text: 'Groupes' // Titre de l'axe des X\n                }\n            },\n\n            xAxes: [{\n                ticks: {\n                    fontSize: 40\n                }\n            }],\n            y: {\n                beginAtZero: true,\n                title: {\n                    display: true,\n                    text: 'Pourcentage' // Titre de l'axe des Y\n                }\n            },\n            yAxes: [{\n                ticks: {\n                    fontSize: 40\n                }\n            }],\n        },\n        plugins: {\n            datalabels: {\n                anchor: 'end',\n                align: 'top',\n                formatter: function (value) {\n                    return value + '%';  // Ajouter le symbole de pourcentage à l'étiquette\n                }\n            }\n        }\n    },\n    data: {\n        labels: labels,\n        datasets: [\n            {\n                label: \"Pourcentage\", // Légende de l'ensemble de données\n                backgroundColor: 'rgba(0, 128, 255, 0.7)',  // Couleur du remplissage des barres\n                data: percentages,\n                \n            }\n        ]\n    }\n};\nmsg.graphPath = global.get('path') || 0;\nmsg.payload = chartData; // Attribuer les données du graphique au message\nreturn msg; // Renvoyer le message\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1740,
        "y": 300,
        "wires": [
            [
                "e83ee25f95ec96b8"
            ]
        ]
    },
    {
        "id": "96510d6bc4a88a3c",
        "type": "file",
        "z": "3ddecfbaabd60ba5",
        "name": "gatling.pass",
        "filename": "graphPath.gatling.pass",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2250,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "8b690f4ccb97858f",
        "type": "file in",
        "z": "3ddecfbaabd60ba5",
        "name": "Log",
        "filename": "payload",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1390,
        "y": 1780,
        "wires": [
            [
                "e00f65533336a5f7"
            ]
        ]
    },
    {
        "id": "1a1358f228cfd1ff",
        "type": "change",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Log",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1750,
        "y": 1780,
        "wires": [
            [
                "96a8020826f4562b"
            ]
        ]
    },
    {
        "id": "7964135626c90274",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "function 6",
        "func": "msg.payload = msg.payload + \"/simulation.log\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 1780,
        "wires": [
            [
                "8b690f4ccb97858f"
            ]
        ]
    },
    {
        "id": "905380c4f5bb1ad1",
        "type": "subflow:4e666803b8f3f742",
        "z": "3ddecfbaabd60ba5",
        "name": "Volt CPU",
        "x": 980,
        "y": 600,
        "wires": [
            [
                "4e2b38fbcc7da674",
                "47bc06039d5e9985"
            ]
        ]
    },
    {
        "id": "e26c12ee046503ba",
        "type": "subflow:4e666803b8f3f742",
        "z": "3ddecfbaabd60ba5",
        "name": "Volt RAM",
        "x": 980,
        "y": 640,
        "wires": [
            [
                "4e2b38fbcc7da674",
                "47bc06039d5e9985"
            ]
        ]
    },
    {
        "id": "b254ad9010121dee",
        "type": "subflow:4e666803b8f3f742",
        "z": "3ddecfbaabd60ba5",
        "name": "Volt Process",
        "x": 990,
        "y": 680,
        "wires": [
            [
                "4e2b38fbcc7da674",
                "47bc06039d5e9985"
            ]
        ]
    },
    {
        "id": "3715c3bb37e69748",
        "type": "subflow:4e666803b8f3f742",
        "z": "3ddecfbaabd60ba5",
        "name": "Volt Température",
        "x": 1010,
        "y": 720,
        "wires": [
            [
                "4e2b38fbcc7da674",
                "47bc06039d5e9985"
            ]
        ]
    },
    {
        "id": "2bbbedfa3bc935ab",
        "type": "subflow:4e666803b8f3f742",
        "z": "3ddecfbaabd60ba5",
        "name": "Nidus CPU",
        "x": 990,
        "y": 780,
        "wires": [
            [
                "47bc06039d5e9985",
                "14ee02e87481c6b6"
            ]
        ]
    },
    {
        "id": "6cabf479e38ccb4f",
        "type": "subflow:4e666803b8f3f742",
        "z": "3ddecfbaabd60ba5",
        "name": "Nidus RAM",
        "x": 990,
        "y": 820,
        "wires": [
            [
                "47bc06039d5e9985",
                "14ee02e87481c6b6"
            ]
        ]
    },
    {
        "id": "2e76fec4dafc9e0e",
        "type": "subflow:4e666803b8f3f742",
        "z": "3ddecfbaabd60ba5",
        "name": "Nidus Process",
        "x": 1000,
        "y": 860,
        "wires": [
            [
                "47bc06039d5e9985",
                "14ee02e87481c6b6"
            ]
        ]
    },
    {
        "id": "538ecbc87e2091c4",
        "type": "subflow:4e666803b8f3f742",
        "z": "3ddecfbaabd60ba5",
        "name": "Nidus Température",
        "x": 1010,
        "y": 900,
        "wires": [
            [
                "47bc06039d5e9985",
                "14ee02e87481c6b6"
            ]
        ]
    },
    {
        "id": "27d07c312e196c9d",
        "type": "file in",
        "z": "3ddecfbaabd60ba5",
        "name": "Read Graph Gatling",
        "filename": "graphPath.gatling.complet",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1720,
        "y": 1360,
        "wires": [
            [
                "2c1bf4e7042ee3c8"
            ]
        ]
    },
    {
        "id": "2c1bf4e7042ee3c8",
        "type": "base64",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "action": "str",
        "property": "msg.payload",
        "x": 1960,
        "y": 1360,
        "wires": [
            [
                "5add3707313e9f2e"
            ]
        ]
    },
    {
        "id": "5add3707313e9f2e",
        "type": "change",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "gatlingGraphComplete",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1970,
        "y": 1400,
        "wires": [
            [
                "7bea6cb7e326cd96"
            ]
        ]
    },
    {
        "id": "7aea4a31c908237b",
        "type": "change",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.Original",
                "pt": "msg",
                "to": "original",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2010,
        "y": 1660,
        "wires": [
            [
                "8ff2cbbf96cb265b"
            ]
        ]
    },
    {
        "id": "035632eacefbd3cd",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "Gatling line chart By_Seconds",
        "func": "// Création du graphique\nvar chartData = {\n    type: 'line', // Utilisez un graphique de type \"line\"\n    options: {\n        scales: {\n            yAxes: [{\n                ticks: {\n                    fontSize: 40\n                }\n            }],\n            xAxes: [{\n                ticks: {\n                    fontSize: 40\n                }\n            }]\n        },\n        dataset: {\n            labels: {\n                // This more specific font property overrides the global property\n                fontSize: 40,\n                fontColor: 'black',\n                family: 'Arial'\n            },\n            font: {\n                size: 30\n            },\n        },\n        title: {\n            labels: {\n                // This more specific font property overrides the global property\n                fontSize: 50,\n                fontColor: 'black',\n                family: 'Arial'\n            },\n            font: {\n                size: 50\n            },\n            display: true,\n            text: 'Nombre de Requêtes Simultanées', // Titre du graphique\n            fontSize: 40\n        },\n        legend: {\n            labels: {\n                // This more specific font property overrides the global property\n                fontSize: 40,\n                fontColor: 'black',\n                family: 'Arial'\n            },\n            font: {\n                size: 40\n            },\n            display: true // Affichez la légende du graphique\n        },\n        chartArea: {\n            backgroundColor: '#d3d7dd' // Couleur de fond du graphique\n        },\n        plugins: {\n            datalabels: {\n                display: false // Désactivez l'affichage des étiquettes de données\n            }\n        }\n    },\n    data: {\n        labels: msg.payload.bySeconds.data.labels,\n        datasets: msg.payload.bySeconds.data.datasets,\n    }\n};\n\nmsg.payload = chartData; // Attribuez les données du graphique au message\nmsg.topic = \"bySeconds\";\nmsg.graphPath = global.get('path') || 0;\nreturn msg; // Renvoyez le message\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 380,
        "wires": [
            [
                "a83bcdc5677662ee"
            ]
        ]
    },
    {
        "id": "a83bcdc5677662ee",
        "type": "chart-image",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "width": "1920",
        "height": "1920",
        "x": 2030,
        "y": 380,
        "wires": [
            [
                "c17822d4517e2dae",
                "ebe77bbd9f1ad946"
            ]
        ]
    },
    {
        "id": "c17822d4517e2dae",
        "type": "file",
        "z": "3ddecfbaabd60ba5",
        "name": "Gatling RequeteParSeconde",
        "filename": "graphPath.gatling.bySeconds",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2300,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "cb58717ad99b6f27",
        "type": "file in",
        "z": "3ddecfbaabd60ba5",
        "name": "Read Graph Gatling",
        "filename": "graphPath.gatling.bySeconds",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1720,
        "y": 1440,
        "wires": [
            [
                "26990d2e7aea2b2c"
            ]
        ]
    },
    {
        "id": "26990d2e7aea2b2c",
        "type": "base64",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "action": "str",
        "property": "msg.payload",
        "x": 1960,
        "y": 1440,
        "wires": [
            [
                "9e06d1cd375a5890"
            ]
        ]
    },
    {
        "id": "9e06d1cd375a5890",
        "type": "change",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "gatlingGraphBySeconds",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1970,
        "y": 1480,
        "wires": [
            [
                "7bea6cb7e326cd96"
            ]
        ]
    },
    {
        "id": "752215d4be43422d",
        "type": "debug",
        "z": "3ddecfbaabd60ba5",
        "name": "ERROR_Gatling",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 1140,
        "wires": []
    },
    {
        "id": "14ee02e87481c6b6",
        "type": "join",
        "z": "3ddecfbaabd60ba5",
        "name": "Values_Nidus",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "4",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1340,
        "y": 600,
        "wires": [
            [
                "d066cf9ae5cc6b06"
            ]
        ]
    },
    {
        "id": "e00f65533336a5f7",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "Log To graph object",
        "func": "// Fonction pour analyser les lignes du journal Gatling\nvar lines = msg.payload.split('\\n'); // Divise la charge utile en lignes individuelles et les stocke dans un tableau\nvar logs = []; // Initialise un tableau vide pour stocker les journaux analysés\n\nfor (var i = 0; i < lines.length; i++) { // Parcourt chaque ligne du journal\n    var line = lines[i].trim(); // Supprime les espaces inutiles autour de la ligne\n\n    if (line !== \"\") { // Vérifie si la ligne n'est pas vide\n        var parts = line.split('\\t'); // Divise la ligne en morceaux en utilisant la tabulation comme séparateur\n        var logObject = {}; // Initialise un objet vide pour stocker les informations du journal\n\n        // Définir des noms de clés significatives en fonction de votre format\n        logObject.type = parts[0]; // Type de journal\n        logObject.name = parts[1]; // Nom de la requête\n        logObject.start = parseInt(parts[3]); // Heure de début convertie en nombre entier\n        logObject.end = parseInt(parts[4]); // Heure de fin convertie en nombre entier\n        logObject.status = parts[5]; // Statut de la requête\n        logObject.error = parts[6]; // Message d'erreur en cas d'échec\n        logObject.user = parts[7]; // Nom de l'utilisateur\n\n        logs.push(logObject); // Ajoute l'objet de journal au tableau des journaux analysés\n    }\n}\n\nvar logEntries = Array.isArray(logs) ? logs : [];\n\n// Prépare les données pour le premier nœud (timeResponse)\nvar timeResponse = {\n    data: {\n        labels: logEntries.map(function (entry) {\n            if (entry.type === 'RUN') {\n                return 'Début de la Simulation'; // Label pour les opérations de type \"RUN\"\n            } else if (entry.type === 'REQUEST') {\n                // Calcul de la différence en millisecondes entre le début de la simulation et le début de la requête\n                var simulationStart = logEntries.find(function (item) {\n                    return item.type === 'RUN';\n                });\n                if (simulationStart) {\n                    var startTime = simulationStart.start;\n                    var requestTime = entry.start;\n                    var timeDiff = requestTime - startTime;\n\n                    // Si le temps de la simulation dépasse 1 minute\n                    if (timeDiff >= 60000) { // 60000 millisecondes équivalent à 1 minute\n                        var minutes = Math.floor(timeDiff / 60000);\n                        var seconds = ((timeDiff % 60000) / 1000).toFixed(0);\n                        return minutes + ' min ' + seconds + ' s';\n                    } else {\n                        return (timeDiff / 1000).toFixed(0) + ' s'; // Temps en secondes\n                    }\n                } else {\n                    return 'N/A'; // Si aucune opération de type \"RUN\" n'est trouvée\n                }\n            } else {\n                return ''; // Autres types d'opérations (USER, etc.) sans label\n            }\n        }),\n\n        datasets: [\n            {\n                label: \"Temps de Réponse\", // Légende de l'ensemble de données\n                borderColor: 'rgba(0, 128, 255, 1)', // Couleur de la ligne du graphique\n                fill: false, // Désactivez le remplissage sous la ligne\n                data: logEntries.map(function (entry) {\n                    if (entry.type === 'REQUEST') {\n                        // Calcul de la différence en millisecondes entre le début et la fin de la requête\n                        var requestStart = entry.start;\n                        var requestEnd = entry.end;\n                        var requestTime = requestEnd - requestStart;\n                        return requestTime;\n                    } else {\n                        return 0; // Valeurs pour les opérations de type \"RUN\" ou autres\n                    }\n                }),\n                pointRadius: 0, // Diamètre des points sur le graphique\n            }\n        ]\n    }\n};\n\n// Prépare les données pour le deuxième nœud (bySeconds)\nvar bySeconds = {\n    data: {\n        labels: timeResponse.data.labels,\n        datasets: [\n            {\n                label: \"Requêtes Simultanées\", // Légende de l'ensemble de données\n                borderColor: 'rgba(0, 128, 255, 1)', // Couleur de la ligne du graphique\n                fill: false, // Désactivez le remplissage sous la ligne\n                data: logEntries.map(function (entry, index, array) {\n                    if (entry.type === 'REQUEST') {\n                        var currentTimestamp = entry.start;\n                        var concurrentRequests = 0;\n\n                        for (var i = 0; i < array.length; i++) {\n                            var otherEntry = array[i];\n                            if (otherEntry.type === 'REQUEST' &&\n                                otherEntry.start <= currentTimestamp &&\n                                (otherEntry.end === null || otherEntry.end >= currentTimestamp)) {\n                                concurrentRequests++;\n                            }\n                        }\n\n                        return concurrentRequests;\n                    } else {\n                        return 0; // Valeurs pour les autres types d'opérations\n                    }\n                }),\n                pointRadius: 0, // Diamètre des points sur le graphique\n            }\n        ]\n    }\n};\n\nmsg.payload = {\n    timeResponse: timeResponse,\n    bySeconds: bySeconds\n};\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 1780,
        "wires": [
            [
                "1a1358f228cfd1ff"
            ]
        ]
    },
    {
        "id": "96a8020826f4562b",
        "type": "link out",
        "z": "3ddecfbaabd60ba5",
        "name": "Log",
        "mode": "link",
        "links": [
            "c64945024bc6d2c1",
            "45787365124bf1fc"
        ],
        "x": 2225,
        "y": 1780,
        "wires": []
    },
    {
        "id": "c64945024bc6d2c1",
        "type": "link in",
        "z": "3ddecfbaabd60ba5",
        "name": "link in 3",
        "links": [
            "96a8020826f4562b"
        ],
        "x": 1465,
        "y": 360,
        "wires": [
            [
                "9a915e3fcad82fe5",
                "035632eacefbd3cd"
            ]
        ]
    },
    {
        "id": "41aa33d6cb459a40",
        "type": "link out",
        "z": "3ddecfbaabd60ba5",
        "name": "Values",
        "mode": "link",
        "links": [
            "45787365124bf1fc"
        ],
        "x": 1675,
        "y": 500,
        "wires": []
    },
    {
        "id": "8f18782105b3b273",
        "type": "change",
        "z": "3ddecfbaabd60ba5",
        "name": "Volt_Topic",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "volt",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1510,
        "y": 560,
        "wires": [
            [
                "8e88bc82f50cac2f",
                "41aa33d6cb459a40"
            ]
        ]
    },
    {
        "id": "d066cf9ae5cc6b06",
        "type": "change",
        "z": "3ddecfbaabd60ba5",
        "name": "Nidus_Topic",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "nidus",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1510,
        "y": 600,
        "wires": [
            [
                "5fcb7ef9b29fa1d1",
                "41aa33d6cb459a40"
            ]
        ]
    },
    {
        "id": "8759770dc87d8ac7",
        "type": "change",
        "z": "3ddecfbaabd60ba5",
        "name": "Gatling",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "date"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "gatling",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "complete",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 1280,
        "wires": [
            [
                "845da1dee5fc73f0"
            ]
        ]
    },
    {
        "id": "d65374ceff4d241b",
        "type": "change",
        "z": "3ddecfbaabd60ba5",
        "name": "Delay",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "date"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "delay",
                "tot": "str"
            },
            {
                "t": "delete",
                "p": "complete",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 1320,
        "wires": [
            [
                "845da1dee5fc73f0"
            ]
        ]
    },
    {
        "id": "845da1dee5fc73f0",
        "type": "join",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 550,
        "y": 1320,
        "wires": [
            [
                "52202be063f04fb9"
            ]
        ]
    },
    {
        "id": "52202be063f04fb9",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "function 7",
        "func": "// Calculer la différence entre les horodatages delay et gatling\nvar delayTimestamp = msg.payload.delay;\nvar gatlingTimestamp = msg.payload.gatling;\nvar timeDifference = gatlingTimestamp - delayTimestamp;\n\n// Ajouter les informations de msg.original au tableau\nvar originalData = msg.original;\n\n\n// Mettre le tableau résultant dans msg.payload\nmsg.payload.timedifference = timeDifference;\nmsg.payload.original = originalData;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1360,
        "wires": [
            [
                "fe0c0331a5d26425"
            ]
        ]
    },
    {
        "id": "c688c8b7226ba57e",
        "type": "inject",
        "z": "3ddecfbaabd60ba5",
        "name": "NoGatling",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"nameFile\":\"NoGatling\",\"time\":0.1,\"stressVolt\":false,\"stressNidus\":false,\"timeStress\":1,\"user_gatling\":0,\"flow\":false}",
        "payloadType": "json",
        "x": 280,
        "y": 700,
        "wires": [
            [
                "6161ee15cd9719be"
            ]
        ]
    },
    {
        "id": "fe0c0331a5d26425",
        "type": "json",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 550,
        "y": 1400,
        "wires": [
            [
                "fe67f01da8a9252d"
            ]
        ]
    },
    {
        "id": "fe67f01da8a9252d",
        "type": "file",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "filename": "/home/NodeRed/stats",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 580,
        "y": 1440,
        "wires": [
            []
        ]
    },
    {
        "id": "2150bd970fda12fe",
        "type": "file in",
        "z": "3ddecfbaabd60ba5",
        "name": "Read Stats",
        "filename": "/home/NodeRed/stats",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 550,
        "y": 1480,
        "wires": [
            []
        ]
    },
    {
        "id": "7719521e1a8b7e04",
        "type": "inject",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 360,
        "y": 1480,
        "wires": [
            [
                "2150bd970fda12fe"
            ]
        ]
    },
    {
        "id": "bf9fb2fa5c67c823",
        "type": "switch",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "property": "gatling",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1490,
        "y": 1400,
        "wires": [
            [
                "7abe58379969346a",
                "27d07c312e196c9d",
                "cb58717ad99b6f27"
            ]
        ]
    },
    {
        "id": "4f5c88f3e01f4956",
        "type": "link in",
        "z": "3ddecfbaabd60ba5",
        "name": "link in 4",
        "links": [
            "c89add291df1506b"
        ],
        "x": 2005,
        "y": 1000,
        "wires": [
            [
                "7bea6cb7e326cd96"
            ]
        ]
    },
    {
        "id": "e2f02700306d0d95",
        "type": "switch",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "property": "gatling",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2250,
        "y": 820,
        "wires": [
            [
                "61d24da92c494fff",
                "b470626338e815a6"
            ],
            [
                "108617ec7ae62832",
                "b470626338e815a6"
            ]
        ]
    },
    {
        "id": "108617ec7ae62832",
        "type": "function",
        "z": "3ddecfbaabd60ba5",
        "name": "Créer le contenue du fichier Sans gatling ",
        "func": "//Formatage du ventilateur\nvar ventilateur = global.get(\"original.flow\") ? \"Ventilateur activé\" : \"Ventilateur non-activé\";\n// Formatage de la date de début\nvar timestamp = Date.now() - (msg.delay);\n\n// Créez un objet Date à partir du timestamp\nvar date = new Date(timestamp);\n\n// Définissez le format de date souhaité\nvar options = {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit'\n};\n\n// Formatez la date en une chaîne de caractères\nvar formattedDate = date.toLocaleDateString(\"fr-FR\", options);\n\n\n// Création des données pour le rapport PDF\nmsg.payload = {\n    header: function (currentPage, pageCount, pageSize) {\n        return [\n            {\n                text: \"Tobler Cyril\", // Votre nom\n                alignment: \"left\",\n                fontSize: 10,\n                margin: [15, 10, 0, 0]\n            },\n            {\n                text: \"Nom du projet : Confuse T-Rex\", // Nom de votre projet\n                alignment: \"center\",\n                fontSize: 10,\n                margin: [0, 0, 0, 0]\n            }\n        ];\n    },\n    footer: function (currentPage, pageCount) {\n        return {\n            columns: [\n                {\n                    text: currentPage.toString() + \" / \" + pageCount, // Numéro de page actuel / Nombre total de pages\n                    alignment: \"left\",\n                    fontSize: 10,\n                    margin: [15, 0, 0, 10]\n                },\n                {\n                    text: new Date().toLocaleDateString(\"fr-FR\"), // Date actuelle au format français\n                    alignment: \"right\",\n                    fontSize: 10,\n                    margin: [0, 0, 15, 10]\n                }\n            ],\n            margin: [0, 0, 0, 10]\n        };\n    },\n    content: [\n        {\n            text: \"Rapport d'utilisation : \" + global.get(\"original.nameFile\"), // Titre du rapport\n            style: \"header\",\n            margin: [0, 10, 0, 0]\n        },\n        {\n            text: \"Les valeurs sont des moyennes sur les \" + Math.floor(msg.delay / (1000 * 60)) + \" dernières minutes\" // Informations sur les valeurs\n        },\n        {\n            text: ventilateur\n        },\n        {\n            text: \"Nidus :\", // Section Nidus\n            style: \"header2\"\n        },\n        {\n            //style: 'tableExample',\n            table: {\n                body: [\n                    ['CPU :', msg.payload.moyenne[\"nidus/benchmark/cpu\"] + \" % d'utilisation\"],\n                    ['RAM :', msg.payload.moyenne[\"nidus/benchmark/ram\"] + \" % d'utilisation (\" + (msg.payload.moyenne[\"nidus/benchmark/ram\"] * (4 / 100)).toFixed(2) + \"Go/4Go)\"],\n                    ['Nombre de processus :', msg.payload.moyenne[\"nidus/benchmark/processes\"]],\n                    ['Température CPU :', msg.payload.moyenne[\"nidus/benchmark/temp\"] + \"° Celcius\"],\n\n                ]\n            },\n            layout: 'noBorders'\n        },\n        {\n            image: 'nidusImage', // Image de Nidus\n            margin: [0, 20],\n            width: 500,\n            pageBreak: 'after', // Saut de page après l'image\n        },\n        {\n            text: \"Volt\", // Section Volt\n            style: \"header2\"\n        },\n        {\n            //style: 'tableExample',\n            table: {\n                body: [\n                    ['CPU :', msg.payload.moyenne[\"volt/benchmark/cpu\"] + \" % d'utilisation\"],\n                    ['RAM :', msg.payload.moyenne[\"volt/benchmark/ram\"] + \" % d'utilisation (\" + (msg.payload.moyenne[\"volt/benchmark/ram\"] * (4 / 100)).toFixed(2) + \"Go/4Go)\"],\n                    ['Nombre de processus :', msg.payload.moyenne[\"volt/benchmark/processes\"]],\n                    ['Température CPU :', msg.payload.moyenne[\"volt/benchmark/temp\"] + \"° Celcius\"],\n                    ['MilliWatt :', msg.payload.moyenne.Watt + \"mW\"],\n                ]\n            },\n            layout: 'noBorders'\n        },\n        {\n            image: 'voltImage', // Image de Volt\n            margin: [0, 20],\n            width: 500,\n        },\n        {\n            image: 'wattImage', // Image Watt de Volt\n            width: 500,\n            margin: [0, 20],\n            //pageBreak: 'after', // Saut de page après l'image\n        },\n        \n    ],\n    images: {\n        voltImage: 'data:image/png;base64,' + msg.payload.voltGraph.toString('base64'), // Utilisation du buffer pour l'image Volt\n        wattImage: 'data:image/png;base64,' + msg.payload.wattGraph.toString('base64'),  // Utilisation du buffer pour l'image Watt de Volt\n        nidusImage: 'data:image/png;base64,' + msg.payload.nidusGraph.toString('base64'),  // Utilisation du buffer pour l'image Nidus\n        \n    },\n    styles: {\n        header: {\n            fontSize: 22,\n            bold: true,\n            margin: [0, 30, 0, 0]\n        },\n        header2: {\n            fontSize: 18,\n            bold: true,\n            margin: [0, 20, 0, 0]\n        }\n    }\n};\n\nreturn msg; // Renvoyer le message\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2560,
        "y": 840,
        "wires": [
            [
                "185b6166af84320d"
            ]
        ]
    },
    {
        "id": "f8dcca7514d5bc5b",
        "type": "inject",
        "z": "3ddecfbaabd60ba5",
        "name": "Short",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"nameFile\":\"Gatling\",\"time\":0.1,\"stressVolt\":false,\"stressNidus\":false,\"timeStress\":1,\"user_gatling\":1,\"flow\":false}",
        "payloadType": "json",
        "x": 150,
        "y": 660,
        "wires": [
            [
                "6161ee15cd9719be"
            ]
        ]
    },
    {
        "id": "0ac8a08df228f713",
        "type": "join",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "4",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 2130,
        "y": 920,
        "wires": [
            [
                "fc5e94a4a331daa9"
            ]
        ]
    },
    {
        "id": "7bea6cb7e326cd96",
        "type": "switch",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "property": "gatling",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2130,
        "y": 960,
        "wires": [
            [
                "3f9aa754e519b6bf"
            ],
            [
                "0ac8a08df228f713"
            ]
        ]
    },
    {
        "id": "ebe77bbd9f1ad946",
        "type": "switch",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "property": "gatling",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1770,
        "y": 640,
        "wires": [
            [
                "648931f9266586ae"
            ],
            [
                "40b05d8ae97f8c8b"
            ]
        ]
    },
    {
        "id": "40b05d8ae97f8c8b",
        "type": "join",
        "z": "3ddecfbaabd60ba5",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "3",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2090,
        "y": 660,
        "wires": [
            [
                "f19dd33d0ea2556f"
            ]
        ]
    },
    {
        "id": "b470626338e815a6",
        "type": "debug",
        "z": "3ddecfbaabd60ba5",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2460,
        "y": 960,
        "wires": []
    },
    {
        "id": "0e5e9ecd9dbcb063",
        "type": "ui_text",
        "z": "6960c25d19217e0b",
        "d": true,
        "group": "a73ce2171360eee8",
        "order": 4,
        "width": 8,
        "height": 1,
        "name": "",
        "label": "MilliWatt : ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 480,
        "y": 300,
        "wires": []
    },
    {
        "id": "a1ee7a35777f3582",
        "type": "ui_chart",
        "z": "6960c25d19217e0b",
        "d": true,
        "name": "MilliWatt",
        "group": "a73ce2171360eee8",
        "order": 5,
        "width": 0,
        "height": 0,
        "label": "",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "5",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 480,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "72290260aa76dca6",
        "type": "ui_text",
        "z": "6960c25d19217e0b",
        "d": true,
        "group": "a73ce2171360eee8",
        "order": 2,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "MillliVolt",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 480,
        "y": 380,
        "wires": []
    },
    {
        "id": "66a1b9b1cdf1b642",
        "type": "ui_text",
        "z": "6960c25d19217e0b",
        "d": true,
        "group": "a73ce2171360eee8",
        "order": 1,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "MiliAmp",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 480,
        "y": 420,
        "wires": []
    },
    {
        "id": "8953f0c1325120df",
        "type": "ui_gauge",
        "z": "6960c25d19217e0b",
        "name": "",
        "group": "17f190382a6c603e",
        "order": 1,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "CPU",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 470,
        "y": 460,
        "wires": []
    },
    {
        "id": "fa5dbba69af0affe",
        "type": "ui_gauge",
        "z": "6960c25d19217e0b",
        "name": "",
        "group": "17f190382a6c603e",
        "order": 2,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "RAM",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 470,
        "y": 500,
        "wires": []
    },
    {
        "id": "3dc4f3421702f4e1",
        "type": "ui_gauge",
        "z": "6960c25d19217e0b",
        "name": "",
        "group": "17f190382a6c603e",
        "order": 3,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "Processus",
        "label": "",
        "format": "{{value}}",
        "min": 0,
        "max": "500",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 490,
        "y": 540,
        "wires": []
    },
    {
        "id": "e1d70366f1ff078c",
        "type": "ui_gauge",
        "z": "6960c25d19217e0b",
        "name": "",
        "group": "17f190382a6c603e",
        "order": 4,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "Temp",
        "label": "C",
        "format": "{{value}}",
        "min": 0,
        "max": "85",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "35",
        "seg2": "50",
        "diff": false,
        "className": "",
        "x": 470,
        "y": 580,
        "wires": []
    },
    {
        "id": "70d9292d7426c8c8",
        "type": "ui_gauge",
        "z": "6960c25d19217e0b",
        "name": "",
        "group": "12f36826dc9bd0e6",
        "order": 1,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "CPU",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 470,
        "y": 620,
        "wires": []
    },
    {
        "id": "020cd680db32751f",
        "type": "ui_gauge",
        "z": "6960c25d19217e0b",
        "name": "",
        "group": "12f36826dc9bd0e6",
        "order": 2,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "RAM",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 470,
        "y": 660,
        "wires": []
    },
    {
        "id": "25396b134f9854b5",
        "type": "ui_gauge",
        "z": "6960c25d19217e0b",
        "name": "",
        "group": "12f36826dc9bd0e6",
        "order": 3,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "Processus",
        "label": "",
        "format": "{{value}}",
        "min": 0,
        "max": "500",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 490,
        "y": 700,
        "wires": []
    },
    {
        "id": "37921000de8bd742",
        "type": "ui_gauge",
        "z": "6960c25d19217e0b",
        "name": "",
        "group": "12f36826dc9bd0e6",
        "order": 4,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "Température",
        "label": "C",
        "format": "{{value}}",
        "min": 0,
        "max": "85",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "35",
        "seg2": "50",
        "diff": false,
        "className": "",
        "x": 490,
        "y": 740,
        "wires": []
    },
    {
        "id": "c3bbb85042ce25f8",
        "type": "link in",
        "z": "6960c25d19217e0b",
        "name": "MilliWatt",
        "links": [
            "4aa27220845f2949"
        ],
        "x": 365,
        "y": 300,
        "wires": [
            [
                "0e5e9ecd9dbcb063",
                "a1ee7a35777f3582",
                "676a2b3ea9bdba7f"
            ]
        ]
    },
    {
        "id": "1f33dcf11541ad85",
        "type": "link in",
        "z": "6960c25d19217e0b",
        "name": "MilliVolt",
        "links": [
            "6bb685f3a7a0f0a5"
        ],
        "x": 365,
        "y": 380,
        "wires": [
            [
                "72290260aa76dca6"
            ]
        ]
    },
    {
        "id": "34a5075b24efbec0",
        "type": "link in",
        "z": "6960c25d19217e0b",
        "name": "MilliAmp",
        "links": [
            "7c257ee5dcd1af4a"
        ],
        "x": 365,
        "y": 420,
        "wires": [
            [
                "66a1b9b1cdf1b642"
            ]
        ]
    },
    {
        "id": "ed77962c337bf813",
        "type": "link in",
        "z": "6960c25d19217e0b",
        "name": "Volt_CPU",
        "links": [
            "df7d2b80bd59b4fb"
        ],
        "x": 365,
        "y": 460,
        "wires": [
            [
                "8953f0c1325120df"
            ]
        ]
    },
    {
        "id": "8220b140c1af5a4f",
        "type": "link in",
        "z": "6960c25d19217e0b",
        "name": "Volt_RAM",
        "links": [
            "ea92a59ad33b194e"
        ],
        "x": 365,
        "y": 500,
        "wires": [
            [
                "fa5dbba69af0affe"
            ]
        ]
    },
    {
        "id": "54842d7063dfb6b4",
        "type": "link in",
        "z": "6960c25d19217e0b",
        "name": "Volt_Process",
        "links": [
            "1855f7ba0c1cb43f"
        ],
        "x": 365,
        "y": 540,
        "wires": [
            [
                "3dc4f3421702f4e1"
            ]
        ]
    },
    {
        "id": "a958a8309bbd6b3d",
        "type": "link in",
        "z": "6960c25d19217e0b",
        "name": "Volt_Temp",
        "links": [
            "17d7264b5cdb9f27"
        ],
        "x": 365,
        "y": 580,
        "wires": [
            [
                "e1d70366f1ff078c"
            ]
        ]
    },
    {
        "id": "ade602e74c57c476",
        "type": "link in",
        "z": "6960c25d19217e0b",
        "name": "Nidus_CPU",
        "links": [
            "24edf858449e9c50"
        ],
        "x": 365,
        "y": 620,
        "wires": [
            [
                "70d9292d7426c8c8"
            ]
        ]
    },
    {
        "id": "83aeb0d37671184e",
        "type": "link in",
        "z": "6960c25d19217e0b",
        "name": "Nidus_RAM",
        "links": [
            "96bbc5b20c93f61c"
        ],
        "x": 365,
        "y": 660,
        "wires": [
            [
                "020cd680db32751f"
            ]
        ]
    },
    {
        "id": "08e95c3bbdfa9e15",
        "type": "link in",
        "z": "6960c25d19217e0b",
        "name": "Nidus_Process",
        "links": [
            "def3688a66231ed2"
        ],
        "x": 365,
        "y": 700,
        "wires": [
            [
                "25396b134f9854b5"
            ]
        ]
    },
    {
        "id": "7a9b5849173b180a",
        "type": "link in",
        "z": "6960c25d19217e0b",
        "name": "Nidus_Temp",
        "links": [
            "efd70bd2950f7343"
        ],
        "x": 365,
        "y": 740,
        "wires": [
            [
                "37921000de8bd742"
            ]
        ]
    },
    {
        "id": "676a2b3ea9bdba7f",
        "type": "ui_gauge",
        "z": "6960c25d19217e0b",
        "name": "",
        "group": "a73ce2171360eee8",
        "order": 3,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "MilliWatt",
        "label": "MilliWatt",
        "format": "{{value}}",
        "min": 0,
        "max": "10000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 480,
        "y": 260,
        "wires": []
    },
    {
        "id": "a8ae227c4c8cf53f",
        "type": "inject",
        "z": "2305a910a579de42",
        "name": "Init",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "change",
        "payload": "/home/NodeRed/json",
        "payloadType": "str",
        "x": 1310,
        "y": 300,
        "wires": [
            [
                "939e364e9a6a66e6"
            ]
        ]
    },
    {
        "id": "ff5130e82b80c5f0",
        "type": "ui_button",
        "z": "2305a910a579de42",
        "name": "",
        "group": "9b722c2ddc235cfc",
        "order": 2,
        "width": 4,
        "height": 2,
        "passthru": true,
        "label": "Refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "refresh",
        "payload": "/home/NodeRed/json",
        "payloadType": "str",
        "topic": "change",
        "topicType": "str",
        "x": 1320,
        "y": 380,
        "wires": [
            [
                "939e364e9a6a66e6"
            ]
        ]
    },
    {
        "id": "eb528c4cd21fb9f4",
        "type": "ui_template",
        "z": "2305a910a579de42",
        "group": "9b722c2ddc235cfc",
        "name": "",
        "order": 1,
        "width": "20",
        "height": "8",
        "format": "<div ng-bind-html=\"msg.payload\" height=\"400\" style=\"height: 400px;\"><br/>\n</div>\n<style>\n/* Applique des styles aux liens */\na[href] {\ncolor: #d93347; /* Couleur du lien */\ntext-decoration: none; /* Pas de soulignement */\n}\n\n/* Applique des styles au survol des liens */\na[href]:hover {\ncolor: #cb0505; /* Couleur du lien au survol */\ntext-decoration: underline; /* Soulignement au survol */\n}\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 2160,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "606b53ed6d766e42",
        "type": "template",
        "z": "2305a910a579de42",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<table width=\"100%\">\n    <tr><th>Nom de Fichier</th><th>Taille</th><th>Créer</th><th>Changer</th></tr>\n    {{#payload}}\n        <tr>\n            <td><a href=\"/download?filename={{name}}\" target=\"blank\">{{fname}}</a></td>\n            <td>{{stat.size}}</td>\n            <td>{{stat.created}}</td>\n            <td>{{stat.changed}}</td>\n        </tr>\n    {{/payload}}\n</table>\n",
        "output": "str",
        "x": 2140,
        "y": 380,
        "wires": [
            [
                "eb528c4cd21fb9f4"
            ]
        ]
    },
    {
        "id": "4d29e79f06e56e6d",
        "type": "function",
        "z": "2305a910a579de42",
        "name": "Convert timestamps",
        "func": "// Fonction pour formater une date en fonction de la timezone de Zurich\nfunction formatToZurichTimezone(date) {\n    var options = {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n        timeZone: 'Europe/Zurich'\n    };\n    return new Intl.DateTimeFormat('fr-CH', options).format(date);\n}\n\n// Parcourir chaque élément dans le tableau \"payload\" du message\nfor (var i = 0; i < msg.payload.length; i++) {\n    // Convertir les propriétés de date/heure dans l'objet \"stat\" au format de Zurich\n    msg.payload[i].stat.created = formatToZurichTimezone(new Date(msg.payload[i].stat.created));\n    msg.payload[i].stat.changed = formatToZurichTimezone(new Date(msg.payload[i].stat.changed));\n    msg.payload[i].stat.accessed = formatToZurichTimezone(new Date(msg.payload[i].stat.accessed));\n    msg.payload[i].stat.statusChanged = formatToZurichTimezone(new Date(msg.payload[i].stat.statusChanged));\n\n    // Extraire le nom de fichier à partir de la propriété \"name\" et mettre à jour \"fname\"\n    msg.payload[i].fname = msg.payload[i].name.replace(/^.*(\\\\|\\/|\\:)/, '');\n}\n\nreturn msg; // Renvoyer le message modifié\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1940,
        "y": 380,
        "wires": [
            [
                "606b53ed6d766e42"
            ]
        ]
    },
    {
        "id": "8a5e147db6fccce1",
        "type": "http in",
        "z": "2305a910a579de42",
        "name": "",
        "url": "/download",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1400,
        "y": 440,
        "wires": [
            [
                "d513a6b16506f9d6"
            ]
        ]
    },
    {
        "id": "2f54c66c82e83726",
        "type": "http response",
        "z": "2305a910a579de42",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2190,
        "y": 440,
        "wires": []
    },
    {
        "id": "d513a6b16506f9d6",
        "type": "function",
        "z": "2305a910a579de42",
        "name": "Get the file name",
        "func": "msg.filename = msg.req.query.filename;\nmsg.contentdisposition = \"attachment; filename=\\\"\" + msg.req.query.filename.replace(/^.*(\\\\|\\/|\\:)/, '') + \"\\\"\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1650,
        "y": 440,
        "wires": [
            [
                "31c27031e96002a0"
            ]
        ],
        "outputLabels": [
            "Folder selected",
            "File selected"
        ]
    },
    {
        "id": "31c27031e96002a0",
        "type": "file in",
        "z": "2305a910a579de42",
        "name": "",
        "filename": "",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 1840,
        "y": 440,
        "wires": [
            [
                "f65dc5f8713f7730"
            ]
        ]
    },
    {
        "id": "f65dc5f8713f7730",
        "type": "change",
        "z": "2305a910a579de42",
        "name": "Set Headers",
        "rules": [
            {
                "t": "set",
                "p": "headers",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "headers.content-type",
                "pt": "msg",
                "to": "text/csv",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "headers.Content-Disposition",
                "pt": "msg",
                "to": "contentdisposition",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2010,
        "y": 440,
        "wires": [
            [
                "2f54c66c82e83726"
            ]
        ]
    },
    {
        "id": "939e364e9a6a66e6",
        "type": "function",
        "z": "2305a910a579de42",
        "name": "Folder handling",
        "func": "// Récupérer la valeur de la variable \"folder\" depuis le contexte\nlet folder = context.get(\"folder\");\n// Si la variable \"folder\" n'est pas définie, l'initialiser avec \"/\"\nif (folder === undefined) {\n    folder = \"/\";\n    context.set(\"folder\", folder); // Enregistrer la valeur dans le contexte\n}\n\n// Récupérer la valeur de la variable \"hidden\" depuis le contexte\nlet hidden = context.get(\"hidden\");\n// Si la variable \"hidden\" n'est pas définie, l'initialiser avec \"false\"\nif (hidden === undefined) {\n    hidden = false;\n    context.set(\"hidden\", hidden); // Enregistrer la valeur dans le contexte\n}\n\n// Si le sujet du message est \"up\"\nif (msg.topic === \"up\") {\n    var the_arr = folder.split('/');\n    the_arr.pop(); // Supprimer le dernier élément du tableau\n    folder = the_arr.join('/'); // Rejoindre les éléments du tableau pour former le nouveau chemin\n    context.set(\"folder\", folder); // Enregistrer le nouveau chemin dans le contexte\n}\n\n// Si le sujet du message est \"change\"\nif (msg.topic === \"change\") {\n    folder = msg.payload; // Mettre à jour la valeur de \"folder\" avec le contenu du champ \"payload\"\n    context.set(\"folder\", folder); // Enregistrer la nouvelle valeur dans le contexte\n}\n\n// Si le sujet du message est \"hidden\"\nif (msg.topic === \"hidden\") {\n    hidden = msg.payload; // Mettre à jour la valeur de \"hidden\" avec le contenu du champ \"payload\"\n    context.set(\"hidden\", hidden); // Enregistrer la nouvelle valeur dans le contexte\n}\n\n// Construire un objet JSON contenant les valeurs actuelles de \"folder\" et \"hidden\"\nmsg.payload = { \"start\": folder, \"hidden\": hidden };\n\nreturn msg; // Renvoyer le message modifié\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 380,
        "wires": [
            [
                "ba2ffe2eaea0bf29"
            ]
        ]
    },
    {
        "id": "ba2ffe2eaea0bf29",
        "type": "fs-file-lister",
        "z": "2305a910a579de42",
        "name": "Files",
        "start": "/home/pi",
        "pattern": "*.*",
        "folders": "*",
        "hidden": false,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": true,
        "showWarnings": false,
        "x": 1710,
        "y": 380,
        "wires": [
            [
                "4d29e79f06e56e6d"
            ]
        ]
    },
    {
        "id": "a9426f1080d32302",
        "type": "link in",
        "z": "2305a910a579de42",
        "name": "From_PDF",
        "links": [
            "a74b27989ec4408a",
            "9281f0402caa9ee5",
            "9c0192ec2aea8a29",
            "547f9ffe327b1d40"
        ],
        "x": 1225,
        "y": 380,
        "wires": [
            [
                "ff5130e82b80c5f0"
            ]
        ]
    },
    {
        "id": "68a514f25fc46e86",
        "type": "ui_template",
        "z": "2305a910a579de42",
        "group": "98aec2bd3951d32a",
        "name": "Upload Btn",
        "order": 8,
        "width": 8,
        "height": 1,
        "format": "<body>\n  <!-- Bouton pour déclencher l'importation des données -->\n  <button class=\"md-raised md-button md-ink-ripple\" onclick=\"importerDonnees()\">Télécharger</button>\n\n  <script>\n    // Conservez la portée originale\n    let restaureScope = scope;\n\n    // Fonction pour importer les données\n    function importerDonnees() {\n      // Créez un élément d'entrée de type fichier\n      let input = document.createElement('input');\n      input.type = 'file';\n      input.id = 'boutonRestaurer';\n\n      // Définissez l'événement onchange\n      input.onchange = _ => {\n        // Obtenez le nom du fichier choisi\n        let nomFichier = input.files[0].name;\n\n        // Vous pouvez utiliser cette méthode pour obtenir le fichier et effectuer les opérations respectives\n        let lecteurFichier = new FileReader();\n        lecteurFichier.readAsText(input.files[0]);\n\n        // Gérez la fin du chargement du fichier\n        lecteurFichier.onloadend = function(event){\n          // Envoyez les données lues et le nom du fichier à la portée originale\n          restaureScope.send({payload: event.target.result});\n        };\n      };\n\n      // Déclenchez le clic sur l'élément d'entrée de type fichier\n      input.click();\n    }\n  </script>\n</body>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 410,
        "y": 600,
        "wires": [
            [
                "ec2c74ecb56f96d0"
            ]
        ]
    },
    {
        "id": "640b506301281dad",
        "type": "comment",
        "z": "2305a910a579de42",
        "name": "Afffichage",
        "info": "",
        "x": 1320,
        "y": 260,
        "wires": []
    },
    {
        "id": "14c7917d5857794a",
        "type": "comment",
        "z": "2305a910a579de42",
        "name": "OUT",
        "info": "",
        "x": 430,
        "y": 420,
        "wires": []
    },
    {
        "id": "15420dcbe122257f",
        "type": "link in",
        "z": "2305a910a579de42",
        "name": "JSON",
        "links": [
            "b163b8b1f5f05f1b",
            "d71ca3e7d62a8a8e",
            "e0ddb30c3e6fd14f"
        ],
        "x": 395,
        "y": 460,
        "wires": [
            [
                "02ee582104162e71"
            ]
        ]
    },
    {
        "id": "5e7ace9904bb44c3",
        "type": "comment",
        "z": "2305a910a579de42",
        "name": "IN",
        "info": "",
        "x": 430,
        "y": 560,
        "wires": []
    },
    {
        "id": "02ee582104162e71",
        "type": "join",
        "z": "2305a910a579de42",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 510,
        "y": 460,
        "wires": [
            [
                "66977ed0b8d2a464"
            ]
        ]
    },
    {
        "id": "66977ed0b8d2a464",
        "type": "change",
        "z": "2305a910a579de42",
        "name": "PrepareJson",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "json",
                "tot": "str"
            },
            {
                "t": "delete",
                "p": "cmd",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "out",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "delay",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "filepath",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "originalDelay",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "use",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "moyenne",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "_event",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "qos",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "retain",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "_topic",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "rc",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "jsonFiles",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "filename",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "_msgid",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "socketid",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "original",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 460,
        "wires": [
            [
                "1b8b1c4702e84221"
            ]
        ]
    },
    {
        "id": "1b8b1c4702e84221",
        "type": "json",
        "z": "2305a910a579de42",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 850,
        "y": 460,
        "wires": [
            [
                "628830ca862fbbf2"
            ]
        ]
    },
    {
        "id": "628830ca862fbbf2",
        "type": "file",
        "z": "2305a910a579de42",
        "name": "",
        "filename": "graphPath.json.complet",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1020,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "e2a4c0beef813f44",
        "type": "function",
        "z": "2305a910a579de42",
        "name": "Gatling line chart Time_Response",
        "func": "// Création du graphique\nvar chartData = {\n    \n    type: 'line', // Utilisez un graphique de type \"line\"\n    options: {\n        scales: {\n            yAxes: [{\n                ticks: {\n                    fontSize: 30\n                }\n            }],\n            xAxes: [{\n                ticks: {\n                    fontSize: 30\n                }\n            }]\n        },\n        dataset :{\n            labels: {\n                // This more specific font property overrides the global property\n                fontSize: 30,\n                fontColor: 'black',\n                family: 'Arial'\n            },\n            font: {\n                size: 30\n            },\n        },\n        title: {\n            labels: {\n                // This more specific font property overrides the global property\n                fontSize: 30,\n                fontColor: 'black',\n                family: 'Arial'\n            },\n            font: {\n                size: 30\n            },\n            display: true,\n            text: 'Comparaison des performances', // Titre du graphique,\n            fontSize: 40 \n        },\n        legend: {\n            labels: {\n                // This more specific font property overrides the global property\n                fontSize: 30,\n                fontColor: 'black',\n                family: 'Arial'\n            },\n            font: {\n                size: 30\n            },\n            display: true // Affichez la légende du graphique\n        },\n        chartArea: {\n            backgroundColor: '#d3d7dd' // Couleur de fond du graphique\n        },\n        plugins: {\n            datalabels: {\n                display: false // Désactivez l'affichage des étiquettes de données\n            }\n        }\n    },\n    data: {\n        labels: msg.payload.Log.timeResponse.data.labels,\n\n        datasets: msg.payload.Log.timeResponse.data.datasets,\n    }\n};\n\nmsg.payload = chartData; // Attribuez les données du graphique au message\nmsg.topic = \"CompletGatling\";\nreturn msg; // Renvoyez le message\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 640,
        "wires": [
            [
                "6cfbd5ae6250be54"
            ]
        ]
    },
    {
        "id": "6cfbd5ae6250be54",
        "type": "chart-image",
        "z": "2305a910a579de42",
        "name": "",
        "width": "1920",
        "height": "1920",
        "x": 1370,
        "y": 640,
        "wires": [
            [
                "f02fec4d70759db4",
                "e590adf1fa299f3d"
            ]
        ]
    },
    {
        "id": "f02fec4d70759db4",
        "type": "file",
        "z": "2305a910a579de42",
        "name": "Gatling Complet",
        "filename": "graphPath.gatling.complet",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1600,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "30a46ff6995a8d14",
        "type": "chart-image",
        "z": "2305a910a579de42",
        "name": "",
        "width": "1920",
        "height": "1920",
        "x": 1310,
        "y": 840,
        "wires": [
            [
                "bcc497f17d08d098",
                "e590adf1fa299f3d"
            ]
        ]
    },
    {
        "id": "bcc497f17d08d098",
        "type": "file",
        "z": "2305a910a579de42",
        "name": "volt.complet",
        "filename": "graphPath.volt.complet",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1590,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "415ea1619f72f86b",
        "type": "chart-image",
        "z": "2305a910a579de42",
        "name": "",
        "width": "1920",
        "height": "1920",
        "x": 1310,
        "y": 880,
        "wires": [
            [
                "75c8ec6facb916b5",
                "e590adf1fa299f3d"
            ]
        ]
    },
    {
        "id": "75c8ec6facb916b5",
        "type": "file",
        "z": "2305a910a579de42",
        "name": "volt.complet",
        "filename": "graphPath.nidus.complet",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1590,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "0d6a1735c75d67c1",
        "type": "function",
        "z": "2305a910a579de42",
        "name": "Nidus Line Chart",
        "func": "// Données reçues du flux précédent\nvar rawData = msg.payload.nidus;\nvar delayInSeconds = msg.payload.gatling.Original.time; // Conversion en secondes\nmsg.topic = \"NidusLineChart\";\n// Extraction des données nécessaires\nvar nidusCpuData = rawData[\"nidus/benchmark/cpu\"];\nvar nidusRamData = rawData[\"nidus/benchmark/ram\"];\nvar nidusTempData = rawData[\"nidus/benchmark/temp\"];\n\n// Création du graphique\nvar chartData = {\n    type: 'line',  // Changement du type de graphique en \"line\"\n    options: {\n        scales: {\n            yAxes: [{\n                ticks: {\n                    fontSize: 30\n                }\n            }],\n            xAxes: [{\n                ticks: {\n                    fontSize: 30\n                }\n            }]\n        },\n        title: {\n            display: true,\n            text: 'Comparaison des performances',\n            fontSize: 40 // Définir la taille de la police ici\n        },\n        legend: {\n            display: true,\n            labels: {\n                // This more specific font property overrides the global property\n                fontSize: 30,\n                fontColor: 'black',\n                family: 'Arial'\n            },\n            font: {\n                size: 30\n            },\n        },\n        chartArea: {\n            backgroundColor: '#d3d7dd'\n        },\n        plugins: {\n            datalabels: {\n                display: false  // Désactiver l'affichage des étiquettes de données\n            }\n        }\n    },\n    data: {\n        labels: Array.from({ length: nidusCpuData.length }, (_, i) => {\n            // Calculer le délai réel entre chaque valeur en millisecondes\n            var realDelay = (msg.payload.gatling.Original.time*1000) / (nidusCpuData.length - 1);\n\n            // Calculer le temps en millisecondes à partir de l'index\n            var timeMillis = i * realDelay;\n\n            // Convertir le temps en minutes et secondes\n            var minutes = Math.floor(timeMillis / 60000); // 60000 millisecondes équivalent à 1 minute\n            var seconds = ((timeMillis % 60000) / 1000).toFixed(0);\n\n            // Créer le label en fonction de la durée\n            if (minutes === 0) {\n                return seconds + ' s'; // Temps en secondes si inférieur à 1 minute\n            } else {\n                return minutes + ' min ' + seconds + ' s'; // Temps en minute:secondes si supérieur à 1 minute\n            }\n        }),\n\n\n        datasets: [\n            \n            {\n                label: \"Nidus CPU\",\n                borderColor: 'rgba(255, 69, 0, 1)',\n                fill: false,\n                data: nidusCpuData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Nidus RAM\",\n                borderColor: 'rgba(255, 165, 0, 1)',\n                fill: false,\n                data: nidusRamData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Nidus Temp\",\n                borderColor: 'rgba(255, 0, 0, 1)',\n                fill: false,\n                data: nidusTempData,\n                pointRadius: 0,\n            }\n        ]\n    }\n};\n\nmsg.payload = chartData;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 880,
        "wires": [
            [
                "415ea1619f72f86b"
            ]
        ]
    },
    {
        "id": "badeec2e58c9b77c",
        "type": "function",
        "z": "2305a910a579de42",
        "name": "Volt Line Chart",
        "func": "// Données reçues du flux précédent\nvar rawData = msg.payload.volt;\nvar delayInSeconds = msg.payload.gatling.Original.time; // Conversion en secondes\nmsg.topic = \"VoltLineChart\";\n// Extraction des données nécessaires\nvar voltCpuData = rawData[\"volt/benchmark/cpu\"];\nvar voltRamData = rawData[\"volt/benchmark/ram\"];\nvar voltTempData = rawData[\"volt/benchmark/temp\"];\n\n\n// Création du graphique\nvar chartData = {\n    type: 'line',  // Changement du type de graphique en \"line\"\n    options: {\n        scales: {\n            yAxes: [{\n                ticks: {\n                    fontSize: 30\n                }\n            }],\n            xAxes: [{\n                ticks: {\n                    fontSize: 30\n                }\n            }]\n        },\n        title: {\n            display: true,\n            text: 'Comparaison des performances',\n            fontSize: 40 \n        },\n        legend: {\n            display: true,\n            labels: {\n                // This more specific font property overrides the global property\n                fontSize: 30,\n                fontColor: 'black',\n                family: 'Arial'\n            },\n            font: {\n                size: 30\n            },\n        },\n        chartArea: {\n            backgroundColor: '#d3d7dd'\n        },\n        plugins: {\n            datalabels: {\n                display: false  // Désactiver l'affichage des étiquettes de données\n            }\n        }\n    },\n    data: {\n        labels: Array.from({ length: voltCpuData.length }, (_, i) => {\n            // Calculer le délai réel entre chaque valeur en millisecondes\n            var realDelay = (msg.payload.gatling.Original.time*1000) / (voltCpuData.length - 1);\n\n            // Calculer le temps en millisecondes à partir de l'index\n            var timeMillis = i * realDelay;\n\n            // Convertir le temps en minutes et secondes\n            var minutes = Math.floor(timeMillis / 60000); // 60000 millisecondes équivalent à 1 minute\n            var seconds = ((timeMillis % 60000) / 1000).toFixed(0);\n\n            // Créer le label en fonction de la durée\n            if (minutes === 0) {\n                return seconds + ' s'; // Temps en secondes si inférieur à 1 minute\n            } else {\n                return minutes + ' min ' + seconds + ' s'; // Temps en minute:secondes si supérieur à 1 minute\n            }\n        }),datasets: [\n            {\n                label: \"Volt CPU\",\n                borderColor: 'rgba(0, 128, 255, 1)',  // Couleur de la ligne (couleur froide pour Volt)\n                fill: false,  // Désactiver le remplissage sous la ligne\n                data: voltCpuData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Volt RAM\",\n                borderColor: 'rgba(0, 255, 128, 1)',\n                fill: false,\n                data: voltRamData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Volt Temp\",\n                borderColor: 'rgba(0, 173, 0, 1)',\n                fill: false,\n                data: voltTempData,\n                pointRadius: 0,\n            },\n\n        ]\n    }\n};\n\nmsg.payload = chartData;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 840,
        "wires": [
            [
                "30a46ff6995a8d14"
            ]
        ]
    },
    {
        "id": "8954ed785e83d848",
        "type": "change",
        "z": "2305a910a579de42",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "complete",
                "pt": "msg",
                "to": "true",
                "tot": "bool",
                "dc": true
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "ChartComplete",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 1020,
        "wires": [
            [
                "467b6180ebc0d310"
            ]
        ]
    },
    {
        "id": "368423fcbf86479f",
        "type": "join",
        "z": "2305a910a579de42",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "6",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 830,
        "y": 980,
        "wires": [
            [
                "8954ed785e83d848"
            ]
        ]
    },
    {
        "id": "f7eca6932718e584",
        "type": "function",
        "z": "2305a910a579de42",
        "name": "Watt Line Chart",
        "func": "// Données reçues du flux précédent\nvar rawData = msg.payload.Watt;\nvar delayInSeconds = msg.delay / 1000; // Conversion en secondes\n\n// Extraction des données nécessaires\nvar voltWatt = rawData;\n\n// Fonction pour calculer la moyenne mobile\nfunction movingAverage(data, windowSize) {\n    var smoothedData = [];\n    for (var i = 0; i < data.length; i++) {\n        var start = Math.max(0, i - Math.floor(windowSize / 2));\n        var end = Math.min(data.length - 1, i + Math.floor(windowSize / 2));\n        var sum = 0;\n        for (var j = start; j <= end; j++) {\n            sum += data[j];\n        }\n        smoothedData.push(sum / (end - start + 1));\n    }\n    return smoothedData;\n}\n\n// Appliquer la moyenne mobile avec une fenêtre de 5 échantillons (vous pouvez ajuster la taille de la fenêtre si nécessaire)\nvar smoothedVoltWatt = movingAverage(voltWatt, 5);\n\n// Création du graphique\nvar chartData = {\n    type: 'line',  // Changement du type de graphique en \"line\"\n    options: {\n        scales: {\n            yAxes: [{\n                ticks: {\n                    fontSize: 30\n                }\n            }],\n            xAxes: [{\n                ticks: {\n                    fontSize: 30\n                }\n            }]\n        },\n        title: {\n            display: true,\n            text: 'Comparaison des performances',\n            fontSize: 40\n        },\n        legend: {\n            display: true,\n            labels: {\n                // This more specific font property overrides the global property\n                fontSize: 30,\n                fontColor: 'black',\n                family: 'Arial'\n            },\n            font: {\n                size: 30\n            },\n        },\n        chartArea: {\n            backgroundColor: '#d3d7dd'\n        },\n        plugins: {\n            datalabels: {\n                display: false  // Désactiver l'affichage des étiquettes de données\n            }\n        }\n    },\n    data: {\n        labels: Array.from({ length: smoothedVoltWatt.length }, (_, i) => {\n            // Calculer le délai réel entre chaque valeur en millisecondes\n            var realDelay = msg.delay / (smoothedVoltWatt.length - 1);\n\n            // Calculer le temps en millisecondes à partir de l'index\n            var timeMillis = i * realDelay;\n\n            // Convertir le temps en minutes et secondes\n            var minutes = Math.floor(timeMillis / 60000); // 60000 millisecondes équivalent à 1 minute\n            var seconds = ((timeMillis % 60000) / 1000).toFixed(0);\n\n            // Créer le label en fonction de la durée\n            if (minutes === 0) {\n                return seconds + ' s'; // Temps en secondes si inférieur à 1 minute\n            } else {\n                return minutes + ' min ' + seconds + ' s'; // Temps en minute:secondes si supérieur à 1 minute\n            }\n        }),\n        datasets: [\n            {\n                label: \"Volt Watt\",\n                borderColor: 'rgba(0, 255, 255, 1)',\n                fill: false,\n                data: smoothedVoltWatt, // Utilisation des données lissées\n                pointRadius: 0,\n            },\n        ]\n    }\n};\n\nmsg.payload = chartData;\nmsg.topic = \"Watt\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 760,
        "wires": [
            [
                "47b454107026b3d3"
            ]
        ]
    },
    {
        "id": "47b454107026b3d3",
        "type": "chart-image",
        "z": "2305a910a579de42",
        "name": "",
        "width": "1920",
        "height": "1920",
        "x": 1370,
        "y": 760,
        "wires": [
            [
                "3b219f948bc63a73",
                "e590adf1fa299f3d"
            ]
        ]
    },
    {
        "id": "3b219f948bc63a73",
        "type": "file",
        "z": "2305a910a579de42",
        "name": "volt.watt",
        "filename": "graphPath.volt.watt",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1580,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "ee49e933dbe00705",
        "type": "chart-image",
        "z": "2305a910a579de42",
        "name": "",
        "width": "1920",
        "height": "1920",
        "x": 1370,
        "y": 600,
        "wires": [
            [
                "7610791de3b20b78",
                "e590adf1fa299f3d"
            ]
        ]
    },
    {
        "id": "9dc4211140a524a8",
        "type": "function",
        "z": "2305a910a579de42",
        "name": "Gatling bar chart",
        "func": "// Données reçues du flux précédent\nvar rawData = msg.payload.gatling.Global;  // Utilisez les données de msg.payload.gatling.Global\nmsg.topic = \"GatlingPass\"; // Définir le sujet du message\n\n// Extraction des données nécessaires\nvar groupData = [\n    rawData.group1,\n    rawData.group2,\n    rawData.group3,\n    rawData.group4\n];\n\nvar labels = [];\nvar percentages = [];\n\n// Parcourir les données des groupes et extraire les informations\nfor (var i = 1; i <= groupData.length; i++) {\n    var groupName = \"group\" + i;\n    labels.push(rawData[groupName].htmlName);\n    percentages.push(rawData[groupName].percentage);\n}\n\n// Création du graphique\nvar chartData = {\n    type: 'bar',  // Utiliser un graphique de type \"bar\"\n    options: {\n        title: {\n            display: true,\n            text: 'Répartition des performances par groupe', // Titre du graphique,\n            fontSize: 40 \n        },\n        legend: {\n            display: true,\n            labels: {\n                // This more specific font property overrides the global property\n                fontSize: 30,\n                fontColor: 'black',\n                family: 'Arial'\n            },\n            font: {\n                size: 30\n            },\n        },\n        chartArea: {\n            backgroundColor: '#d3d7dd' // Couleur de fond du graphique\n        },\n        scales: {\n            x: {\n                beginAtZero: true,\n                title: {\n                    display: true,\n                    text: 'Groupes' // Titre de l'axe des X\n                }\n            },\n\n            xAxes: [{\n                ticks: {\n                    fontSize: 30\n                }\n            }],\n            y: {\n                beginAtZero: true,\n                title: {\n                    display: true,\n                    text: 'Pourcentage' // Titre de l'axe des Y\n                }\n            },\n            yAxes: [{\n                ticks: {\n                    fontSize: 30\n                }\n            }],\n        },\n        plugins: {\n            datalabels: {\n                anchor: 'end',\n                align: 'top',\n                formatter: function (value) {\n                    return value + '%';  // Ajouter le symbole de pourcentage à l'étiquette\n                }\n            }\n        }\n    },\n    data: {\n        labels: labels,\n        datasets: [\n            {\n                label: \"Pourcentage\", // Légende de l'ensemble de données\n                backgroundColor: 'rgba(0, 128, 255, 0.7)',  // Couleur du remplissage des barres\n                data: percentages,\n                \n            }\n        ]\n    }\n};\nmsg.payload = chartData; // Attribuer les données du graphique au message\nreturn msg; // Renvoyer le message\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 600,
        "wires": [
            [
                "ee49e933dbe00705"
            ]
        ]
    },
    {
        "id": "7610791de3b20b78",
        "type": "file",
        "z": "2305a910a579de42",
        "name": "gatling.pass",
        "filename": "graphPath.gatling.pass",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1590,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "4cd75f8778386f53",
        "type": "function",
        "z": "2305a910a579de42",
        "name": "Gatling line chart By_Seconds",
        "func": "// Création du graphique\nvar chartData = {\n    type: 'line', // Utilisez un graphique de type \"line\"\n    options: {\n        scales: {\n            yAxes: [{\n                ticks: {\n                    fontSize: 30\n                }\n            }],\n            xAxes: [{\n                ticks: {\n                    fontSize: 30\n                }\n            }]\n        },\n        dataset: {\n            labels: {\n                // This more specific font property overrides the global property\n                fontSize: 30,\n                fontColor: 'black',\n                family: 'Arial'\n            },\n            font: {\n                size: 30\n            },\n        },\n        title: {\n            labels: {\n                // This more specific font property overrides the global property\n                fontSize: 30,\n                fontColor: 'black',\n                family: 'Arial'\n            },\n            font: {\n                size: 30\n            },\n            display: true,\n            text: 'Nombre de Requêtes Simultanées', // Titre du graphique\n            fontSize: 40\n        },\n        legend: {\n            labels: {\n                // This more specific font property overrides the global property\n                fontSize: 30,\n                fontColor: 'black',\n                family: 'Arial'\n            },\n            font: {\n                size: 30\n            },\n            display: true // Affichez la légende du graphique\n        },\n        chartArea: {\n            backgroundColor: '#d3d7dd' // Couleur de fond du graphique\n        },\n        plugins: {\n            datalabels: {\n                display: false // Désactivez l'affichage des étiquettes de données\n            }\n        }\n    },\n    data: {\n        labels: msg.payload.Log.bySeconds.data.labels,\n        datasets: msg.payload.Log.bySeconds.data.datasets,\n    }\n};\n\nmsg.payload = chartData; // Attribuez les données du graphique au message\nmsg.topic = \"bySeconds\";\nreturn msg; // Renvoyez le message\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 680,
        "wires": [
            [
                "7daef8e1aa63673a"
            ]
        ]
    },
    {
        "id": "7daef8e1aa63673a",
        "type": "chart-image",
        "z": "2305a910a579de42",
        "name": "",
        "width": "1920",
        "height": "1920",
        "x": 1370,
        "y": 680,
        "wires": [
            [
                "d455bfb92c80d504",
                "e590adf1fa299f3d"
            ]
        ]
    },
    {
        "id": "d455bfb92c80d504",
        "type": "file",
        "z": "2305a910a579de42",
        "name": "Gatling RequeteParSeconde",
        "filename": "graphPath.gatling.bySeconds",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1640,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "aff53e2325f520c7",
        "type": "pdfmake",
        "z": "2305a910a579de42",
        "name": "",
        "outputType": "base64",
        "inputProperty": "payload",
        "options": "{}",
        "outputProperty": "payload",
        "x": 1500,
        "y": 1040,
        "wires": [
            [
                "62e9016a92d4fa4f"
            ]
        ]
    },
    {
        "id": "62e9016a92d4fa4f",
        "type": "file",
        "z": "2305a910a579de42",
        "name": "",
        "filename": "filePath",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "base64",
        "x": 1640,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "6ef0c0d2db95aa60",
        "type": "function",
        "z": "2305a910a579de42",
        "name": "Créer le contenue du fichier",
        "func": "//Formatage du ventilateur\nvar ventilateur = msg.payload.stats.original.gatling.Original.flow ? \"Ventilateur activé\" : \"Ventilateur non-activé\";\n// Formatage de la date de début\nvar timestamp = msg.payload.stats.original.gatling.Assertion.start;\n\n// Créez un objet Date à partir du timestamp\nvar date = new Date(timestamp);\n\n// Définissez le format de date souhaité\nvar options = {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit'\n};\n\n// Formatez la date en une chaîne de caractères\nvar formattedDate = date.toLocaleDateString(\"fr-FR\", options);\n\n\n// Création des données pour le rapport PDF\nmsg.payload = {\n    header: function (currentPage, pageCount, pageSize) {\n        return [\n            {\n                text: \"Tobler Cyril\", \n                alignment: \"left\",\n                fontSize: 10,\n                margin: [15, 10, 0, 0]\n            },\n            {\n                text: \"Nom du projet : Confuse T-Rex\", // Nom du projet\n                alignment: \"center\",\n                fontSize: 10,\n                margin: [0, 0, 0, 0]\n            }\n        ];\n    },\n    footer: function (currentPage, pageCount) {\n        return {\n            columns: [\n                {\n                    text: currentPage.toString() + \" / \" + pageCount, // Numéro de page actuel / Nombre total de pages\n                    alignment: \"left\",\n                    fontSize: 10,\n                    margin: [15, 0, 0, 10]\n                },\n                {\n                    text: new Date().toLocaleDateString(\"fr-FR\"), // Date actuelle au format français\n                    alignment: \"right\",\n                    fontSize: 10,\n                    margin: [0, 0, 15, 10]\n                }\n            ],\n            margin: [0, 0, 0, 10]\n        };\n    },\n    content: [\n        {\n            text: \"Rapport d'utilisation : \" + msg.payload.stats.original.gatling.Original.nameFile , // Titre du rapport\n            style: \"header\",\n            margin: [0, 10, 0, 0]\n        },\n        {\n            text: \"Les valeurs sont des moyennes sur les \" + Math.floor(msg.payload.stats.original.gatling.Original.time / 60) + \" dernières minutes\" // Informations sur les valeurs\n        }, \n        {\n            text: ventilateur\n        },\n        {\n            text: \"Nidus :\", // Section Nidus\n            style: \"header2\"\n        },\n        {\n            text: \"CPU :                 \" + msg.payload.stats.moyenne[\"nidus/benchmark/cpu\"] // Valeur CPU de Nidus\n        },\n        {\n            text: \"RAM :                 \" + msg.payload.stats.moyenne[\"nidus/benchmark/ram\"] // Valeur RAM de Nidus\n        },\n        {\n            text: \"Nombre de processus : \" + msg.payload.stats.moyenne[\"nidus/benchmark/processes\"] // Nombre de processus de Nidus\n        },\n        {\n            text: \"Température CPU :     \" + msg.payload.stats.moyenne[\"nidus/benchmark/temp\"] // Température CPU de Nidus\n        },\n        {\n            image: 'nidusImage', // Image de Nidus\n            width: 500,\n            pageBreak: 'after', // Saut de page après l'image\n        },\n        {\n            text: \"Volt\", // Section Volt\n            style: \"header2\"\n        },\n        {\n            text: \"CPU :                 \" + msg.payload.stats.moyenne[\"volt/benchmark/cpu\"] // Valeur CPU de Volt\n        },\n        {\n            text: \"RAM :                 \" + msg.payload.stats.moyenne[\"volt/benchmark/ram\"] // Valeur RAM de Volt\n        },\n        {\n            text: \"Nombre de processus : \" + msg.payload.stats.moyenne[\"volt/benchmark/processes\"] // Nombre de processus de Volt\n        },\n        {\n            text: \"Température CPU :     \" + msg.payload.stats.moyenne[\"volt/benchmark/temp\"] // Température CPU de Volt\n        },\n        {\n            text: \"MilliWatt :           \" + msg.payload.stats.moyenne[\"volt/benchmark/watt\"] // Valeur MilliWatt de Volt\n        },\n        {\n            image: 'voltImage', // Image de Volt\n            width: 500,\n        },\n        {\n            image: 'wattImage', // Image Watt de Volt\n            width: 500,\n            pageBreak: 'after', // Saut de page après l'image\n        },\n        {\n            text: \"Gatling\", // Section Gatling\n            style: \"header2\"\n        },\n        {\n            text: \"Nom de la simulation :                 \" + msg.payload.stats.original.gatling.Assertion.simulation // Nom de la simulation Gatling\n        },\n        {\n            text: \"Commencée :                            \" + formattedDate // Date de début de la simulation Gatling (à formater)\n        },\n        {\n            text: \"Nombre d'utilisateur :                 \" + msg.payload.stats.original.gatling.Original.user_gatling // Nom de la simulation Gatling\n        },\n        {\n            text: \"Durée prévu :                          \" + msg.payload.stats.original.gatling.Original.time/60 + \"Min\" // Nom de la simulation Gatling\n        },\n        {\n            image: 'gatlingImage', // Image Gatling\n            width: 500,\n        },\n        {\n            image: 'gatlingGraphComplete', // Image graphique complet Gatling\n            width: 500,\n        }, \n        {\n            image: 'gatlingGraphBySeconds', // Image graphique complet Gatling\n            width: 500,\n        },\n    ],\n    images: {\n        voltImage: 'data:image/png;base64,' + msg.payload.voltGraph.toString('base64'), // Utilisation du buffer pour l'image Volt\n        wattImage: 'data:image/png;base64,' + msg.payload.wattGraph.toString('base64'),  // Utilisation du buffer pour l'image Watt de Volt\n        nidusImage: 'data:image/png;base64,' + msg.payload.nidusGraph.toString('base64'),  // Utilisation du buffer pour l'image Nidus\n        gatlingImage: 'data:image/png;base64,' + msg.payload.gatlingGraph.toString('base64'),  // Utilisation du buffer pour l'image Gatling\n        gatlingGraphComplete: 'data:image/png;base64,' + msg.payload.gatlingGraphComplete.toString('base64'),  // Utilisation du buffer pour l'image Gatling\n        gatlingGraphBySeconds: 'data:image/png;base64,' + msg.payload.gatlingGraphBySeconds.toString('base64'),  // Utilisation du buffer pour l'image Gatling\n    },\n    styles: {\n        header: {\n            fontSize: 22,\n            bold: true,\n            margin: [0, 30, 0, 0]\n        },\n        header2: {\n            fontSize: 18,\n            bold: true,\n            margin: [0, 20, 0, 0]\n        }\n    }\n};\n\nreturn msg; // Renvoyer le message\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 1080,
        "wires": [
            [
                "aff53e2325f520c7"
            ]
        ]
    },
    {
        "id": "0278807ed305654d",
        "type": "join",
        "z": "2305a910a579de42",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "7",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 1670,
        "y": 1120,
        "wires": [
            [
                "8aa962851e839e96"
            ]
        ]
    },
    {
        "id": "8aa962851e839e96",
        "type": "change",
        "z": "2305a910a579de42",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Moyenne_Graph",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1490,
        "y": 1080,
        "wires": [
            [
                "6ef0c0d2db95aa60"
            ]
        ]
    },
    {
        "id": "15dc6a608ad06b62",
        "type": "file in",
        "z": "2305a910a579de42",
        "name": "Read Graph Nidus Complet",
        "filename": "graphPath.nidus.complet",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1200,
        "y": 1320,
        "wires": [
            [
                "8f4f4e4f392d24bd"
            ]
        ]
    },
    {
        "id": "8f4f4e4f392d24bd",
        "type": "base64",
        "z": "2305a910a579de42",
        "name": "",
        "action": "str",
        "property": "msg.payload",
        "x": 1420,
        "y": 1320,
        "wires": [
            [
                "24493c7dc41092a7"
            ]
        ]
    },
    {
        "id": "c0e27eb1a2ce7a0f",
        "type": "file in",
        "z": "2305a910a579de42",
        "name": "Read Graph Volt Complet",
        "filename": "graphPath.volt.complet",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1190,
        "y": 1200,
        "wires": [
            [
                "3e49e595452a9c17"
            ]
        ]
    },
    {
        "id": "3e49e595452a9c17",
        "type": "base64",
        "z": "2305a910a579de42",
        "name": "",
        "action": "str",
        "property": "msg.payload",
        "x": 1420,
        "y": 1200,
        "wires": [
            [
                "81c475269da219f8"
            ]
        ]
    },
    {
        "id": "81c475269da219f8",
        "type": "change",
        "z": "2305a910a579de42",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "voltGraph",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1410,
        "y": 1160,
        "wires": [
            [
                "0278807ed305654d"
            ]
        ]
    },
    {
        "id": "24493c7dc41092a7",
        "type": "change",
        "z": "2305a910a579de42",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "nidusGraph",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1410,
        "y": 1360,
        "wires": [
            [
                "0278807ed305654d"
            ]
        ]
    },
    {
        "id": "15a684c2c6e4a5e2",
        "type": "file in",
        "z": "2305a910a579de42",
        "name": "Read Graph Volt Watt",
        "filename": "graphPath.volt.watt",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1180,
        "y": 1240,
        "wires": [
            [
                "af67d666b658917a"
            ]
        ]
    },
    {
        "id": "af67d666b658917a",
        "type": "base64",
        "z": "2305a910a579de42",
        "name": "",
        "action": "str",
        "property": "msg.payload",
        "x": 1420,
        "y": 1240,
        "wires": [
            [
                "46304511a13e9608"
            ]
        ]
    },
    {
        "id": "46304511a13e9608",
        "type": "change",
        "z": "2305a910a579de42",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "wattGraph",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1410,
        "y": 1280,
        "wires": [
            [
                "0278807ed305654d"
            ]
        ]
    },
    {
        "id": "273195657a8c3864",
        "type": "file in",
        "z": "2305a910a579de42",
        "name": "Read Graph Gatling",
        "filename": "graphPath.gatling.pass",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1180,
        "y": 1400,
        "wires": [
            [
                "c61f6001727bb109"
            ]
        ]
    },
    {
        "id": "c61f6001727bb109",
        "type": "base64",
        "z": "2305a910a579de42",
        "name": "",
        "action": "str",
        "property": "msg.payload",
        "x": 1420,
        "y": 1400,
        "wires": [
            [
                "bf7b8176ec9fb049"
            ]
        ]
    },
    {
        "id": "bf7b8176ec9fb049",
        "type": "change",
        "z": "2305a910a579de42",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "gatlingGraph",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1430,
        "y": 1440,
        "wires": [
            [
                "0278807ed305654d"
            ]
        ]
    },
    {
        "id": "1b08b1c8be542ae4",
        "type": "file in",
        "z": "2305a910a579de42",
        "name": "Read Graph Gatling",
        "filename": "graphPath.gatling.complet",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1180,
        "y": 1480,
        "wires": [
            [
                "baf361f7f5f4d7d4"
            ]
        ]
    },
    {
        "id": "baf361f7f5f4d7d4",
        "type": "base64",
        "z": "2305a910a579de42",
        "name": "",
        "action": "str",
        "property": "msg.payload",
        "x": 1420,
        "y": 1480,
        "wires": [
            [
                "1db1de448d4b9a9b"
            ]
        ]
    },
    {
        "id": "1db1de448d4b9a9b",
        "type": "change",
        "z": "2305a910a579de42",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "gatlingGraphComplete",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1430,
        "y": 1520,
        "wires": [
            [
                "0278807ed305654d"
            ]
        ]
    },
    {
        "id": "396999da5f268ca5",
        "type": "file in",
        "z": "2305a910a579de42",
        "name": "Read Graph Gatling",
        "filename": "graphPath.gatling.bySeconds",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1180,
        "y": 1560,
        "wires": [
            [
                "cbb014bc09dd4edf"
            ]
        ]
    },
    {
        "id": "cbb014bc09dd4edf",
        "type": "base64",
        "z": "2305a910a579de42",
        "name": "",
        "action": "str",
        "property": "msg.payload",
        "x": 1420,
        "y": 1560,
        "wires": [
            [
                "de2fdd71321ceeaf"
            ]
        ]
    },
    {
        "id": "de2fdd71321ceeaf",
        "type": "change",
        "z": "2305a910a579de42",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "gatlingGraphBySeconds",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1430,
        "y": 1600,
        "wires": [
            [
                "0278807ed305654d"
            ]
        ]
    },
    {
        "id": "ec2c74ecb56f96d0",
        "type": "json",
        "z": "2305a910a579de42",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 590,
        "y": 600,
        "wires": [
            [
                "d71e90762e0615fb",
                "f989647b25742081"
            ]
        ]
    },
    {
        "id": "3318f367c2f1ccb3",
        "type": "inject",
        "z": "2305a910a579de42",
        "name": "InjectWithGatling",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Watt\":[513.996,475.4400000000001,480.28600000000006,386.495,380.638,405.395,409.10200000000003,658.1449999999999,424.776,481.612,382.2,472.88800000000003,406.285,390.87,523.25,352.412,382.368,527.805,519.137],\"volt\":{\"volt/benchmark/cpu\":[\"6.4\",\"5.1\",\"6.4\",\"5.1\",\"3.9\",\"5.1\",\"6.4\"],\"volt/benchmark/ram\":[\"5.41\",\"5.39\",\"5.38\",\"5.37\",\"5.37\",\"5.36\",\"5.37\"],\"volt/benchmark/processes\":[\"151\",\"151\",\"151\",\"151\",\"151\",\"151\",\"151\"],\"volt/benchmark/temp\":[\"34.5\",\"34.0\",\"34.0\",\"34.5\",\"34.5\",\"34.0\",\"33.6\"]},\"nidus\":{\"nidus/benchmark/cpu\":[\"55\",\"47.9\",\"51.4\",\"45\",\"62\",\"43.1\",\"88\"],\"nidus/benchmark/ram\":[\"25.97\",\"26.63\",\"26.88\",\"27.38\",\"27.96\",\"28.37\",\"28.57\"],\"nidus/benchmark/processes\":[\"189\",\"189\",\"189\",\"190\",\"190\",\"190\",\"190\"],\"nidus/benchmark/temp\":[\"35.0\",\"36.5\",\"36.5\",\"37.0\",\"36.5\",\"37.4\",\"37.0\"]},\"gatling\":{\"Assertion\":{\"simulation\":\"CuriusTRex\",\"simulationId\":\"curiustrex-20230912121905985\",\"start\":1694521147966,\"description\":\"\",\"scenarios\":[\"CuriusTRex\"],\"assertions\":[]},\"Global\":{\"name\":\"All Requests\",\"numberOfRequests\":{\"total\":3418,\"ok\":3418,\"ko\":0},\"minResponseTime\":{\"total\":13,\"ok\":13,\"ko\":0},\"maxResponseTime\":{\"total\":3344,\"ok\":3344,\"ko\":0},\"meanResponseTime\":{\"total\":863,\"ok\":863,\"ko\":0},\"standardDeviation\":{\"total\":675,\"ok\":675,\"ko\":0},\"percentiles1\":{\"total\":620,\"ok\":620,\"ko\":0},\"percentiles2\":{\"total\":1185,\"ok\":1185,\"ko\":0},\"percentiles3\":{\"total\":2323,\"ok\":2323,\"ko\":0},\"percentiles4\":{\"total\":2763,\"ok\":2763,\"ko\":0},\"group1\":{\"name\":\"t < 800 ms\",\"htmlName\":\"t < 800 ms\",\"count\":2140,\"percentage\":63},\"group2\":{\"name\":\"800 ms <= t < 1200 ms\",\"htmlName\":\"t >= 800 ms <br> t < 1200 ms\",\"count\":434,\"percentage\":13},\"group3\":{\"name\":\"t >= 1200 ms\",\"htmlName\":\"t >= 1200 ms\",\"count\":844,\"percentage\":25},\"group4\":{\"name\":\"failed\",\"htmlName\":\"failed\",\"count\":0,\"percentage\":0},\"meanNumberOfRequestsPerSecond\":{\"total\":284.8333333333333,\"ok\":284.8333333333333,\"ko\":0}},\"Stats\":{\"type\":\"GROUP\",\"name\":\"All Requests\",\"path\":\"\",\"pathFormatted\":\"group_missing-name-b06d1\",\"stats\":{\"name\":\"All Requests\",\"numberOfRequests\":{\"total\":3418,\"ok\":3418,\"ko\":0},\"minResponseTime\":{\"total\":13,\"ok\":13,\"ko\":0},\"maxResponseTime\":{\"total\":3344,\"ok\":3344,\"ko\":0},\"meanResponseTime\":{\"total\":863,\"ok\":863,\"ko\":0},\"standardDeviation\":{\"total\":675,\"ok\":675,\"ko\":0},\"percentiles1\":{\"total\":620,\"ok\":620,\"ko\":0},\"percentiles2\":{\"total\":1185,\"ok\":1185,\"ko\":0},\"percentiles3\":{\"total\":2323,\"ok\":2323,\"ko\":0},\"percentiles4\":{\"total\":2763,\"ok\":2763,\"ko\":0},\"group1\":{\"name\":\"t < 800 ms\",\"htmlName\":\"t < 800 ms\",\"count\":2140,\"percentage\":63},\"group2\":{\"name\":\"800 ms <= t < 1200 ms\",\"htmlName\":\"t >= 800 ms <br> t < 1200 ms\",\"count\":434,\"percentage\":13},\"group3\":{\"name\":\"t >= 1200 ms\",\"htmlName\":\"t >= 1200 ms\",\"count\":844,\"percentage\":25},\"group4\":{\"name\":\"failed\",\"htmlName\":\"failed\",\"count\":0,\"percentage\":0},\"meanNumberOfRequestsPerSecond\":{\"total\":284.8333333333333,\"ok\":284.8333333333333,\"ko\":0}},\"contents\":{\"req_request-0-684d2\":{\"type\":\"REQUEST\",\"name\":\"request_0\",\"path\":\"request_0\",\"pathFormatted\":\"req_request-0-684d2\",\"stats\":{\"name\":\"request_0\",\"numberOfRequests\":{\"total\":180,\"ok\":180,\"ko\":0},\"minResponseTime\":{\"total\":111,\"ok\":111,\"ko\":0},\"maxResponseTime\":{\"total\":2093,\"ok\":2093,\"ko\":0},\"meanResponseTime\":{\"total\":972,\"ok\":972,\"ko\":0},\"standardDeviation\":{\"total\":435,\"ok\":435,\"ko\":0},\"percentiles1\":{\"total\":1043,\"ok\":1043,\"ko\":0},\"percentiles2\":{\"total\":1291,\"ok\":1291,\"ko\":0},\"percentiles3\":{\"total\":1651,\"ok\":1651,\"ko\":0},\"percentiles4\":{\"total\":1925,\"ok\":1925,\"ko\":0},\"group1\":{\"name\":\"t < 800 ms\",\"htmlName\":\"t < 800 ms\",\"count\":65,\"percentage\":36},\"group2\":{\"name\":\"800 ms <= t < 1200 ms\",\"htmlName\":\"t >= 800 ms <br> t < 1200 ms\",\"count\":54,\"percentage\":30},\"group3\":{\"name\":\"t >= 1200 ms\",\"htmlName\":\"t >= 1200 ms\",\"count\":61,\"percentage\":34},\"group4\":{\"name\":\"failed\",\"htmlName\":\"failed\",\"count\":0,\"percentage\":0},\"meanNumberOfRequestsPerSecond\":{\"total\":15,\"ok\":15,\"ko\":0}}},\"req_request-1-46da4\":{\"type\":\"REQUEST\",\"name\":\"request_1\",\"path\":\"request_1\",\"pathFormatted\":\"req_request-1-46da4\",\"stats\":{\"name\":\"request_1\",\"numberOfRequests\":{\"total\":180,\"ok\":180,\"ko\":0},\"minResponseTime\":{\"total\":21,\"ok\":21,\"ko\":0},\"maxResponseTime\":{\"total\":2553,\"ok\":2553,\"ko\":0},\"meanResponseTime\":{\"total\":497,\"ok\":497,\"ko\":0},\"standardDeviation\":{\"total\":281,\"ok\":281,\"ko\":0},\"percentiles1\":{\"total\":504,\"ok\":504,\"ko\":0},\"percentiles2\":{\"total\":630,\"ok\":630,\"ko\":0},\"percentiles3\":{\"total\":845,\"ok\":845,\"ko\":0},\"percentiles4\":{\"total\":1153,\"ok\":1153,\"ko\":0},\"group1\":{\"name\":\"t < 800 ms\",\"htmlName\":\"t < 800 ms\",\"count\":166,\"percentage\":92},\"group2\":{\"name\":\"800 ms <= t < 1200 ms\",\"htmlName\":\"t >= 800 ms <br> t < 1200 ms\",\"count\":12,\"percentage\":7},\"group3\":{\"name\":\"t >= 1200 ms\",\"htmlName\":\"t >= 1200 ms\",\"count\":2,\"percentage\":1},\"group4\":{\"name\":\"failed\",\"htmlName\":\"failed\",\"count\":0,\"percentage\":0},\"meanNumberOfRequestsPerSecond\":{\"total\":15,\"ok\":15,\"ko\":0}}},\"req_styles-css-4e7bb\":{\"type\":\"REQUEST\",\"name\":\"styles.css\",\"path\":\"styles.css\",\"pathFormatted\":\"req_styles-css-4e7bb\",\"stats\":{\"name\":\"styles.css\",\"numberOfRequests\":{\"total\":540,\"ok\":540,\"ko\":0},\"minResponseTime\":{\"total\":13,\"ok\":13,\"ko\":0},\"maxResponseTime\":{\"total\":2839,\"ok\":2839,\"ko\":0},\"meanResponseTime\":{\"total\":520,\"ok\":520,\"ko\":0},\"standardDeviation\":{\"total\":328,\"ok\":328,\"ko\":0},\"percentiles1\":{\"total\":507,\"ok\":507,\"ko\":0},\"percentiles2\":{\"total\":647,\"ok\":647,\"ko\":0},\"percentiles3\":{\"total\":914,\"ok\":914,\"ko\":0},\"percentiles4\":{\"total\":2125,\"ok\":2125,\"ko\":0},\"group1\":{\"name\":\"t < 800 ms\",\"htmlName\":\"t < 800 ms\",\"count\":488,\"percentage\":90},\"group2\":{\"name\":\"800 ms <= t < 1200 ms\",\"htmlName\":\"t >= 800 ms <br> t < 1200 ms\",\"count\":42,\"percentage\":8},\"group3\":{\"name\":\"t >= 1200 ms\",\"htmlName\":\"t >= 1200 ms\",\"count\":10,\"percentage\":2},\"group4\":{\"name\":\"failed\",\"htmlName\":\"failed\",\"count\":0,\"percentage\":0},\"meanNumberOfRequestsPerSecond\":{\"total\":45,\"ok\":45,\"ko\":0}}},\"req_request-2-93baf\":{\"type\":\"REQUEST\",\"name\":\"request_2\",\"path\":\"request_2\",\"pathFormatted\":\"req_request-2-93baf\",\"stats\":{\"name\":\"request_2\",\"numberOfRequests\":{\"total\":180,\"ok\":180,\"ko\":0},\"minResponseTime\":{\"total\":36,\"ok\":36,\"ko\":0},\"maxResponseTime\":{\"total\":2505,\"ok\":2505,\"ko\":0},\"meanResponseTime\":{\"total\":570,\"ok\":570,\"ko\":0},\"standardDeviation\":{\"total\":386,\"ok\":386,\"ko\":0},\"percentiles1\":{\"total\":530,\"ok\":530,\"ko\":0},\"percentiles2\":{\"total\":668,\"ok\":668,\"ko\":0},\"percentiles3\":{\"total\":1449,\"ok\":1449,\"ko\":0},\"percentiles4\":{\"total\":2130,\"ok\":2130,\"ko\":0},\"group1\":{\"name\":\"t < 800 ms\",\"htmlName\":\"t < 800 ms\",\"count\":160,\"percentage\":89},\"group2\":{\"name\":\"800 ms <= t < 1200 ms\",\"htmlName\":\"t >= 800 ms <br> t < 1200 ms\",\"count\":10,\"percentage\":6},\"group3\":{\"name\":\"t >= 1200 ms\",\"htmlName\":\"t >= 1200 ms\",\"count\":10,\"percentage\":6},\"group4\":{\"name\":\"failed\",\"htmlName\":\"failed\",\"count\":0,\"percentage\":0},\"meanNumberOfRequestsPerSecond\":{\"total\":15,\"ok\":15,\"ko\":0}}},\"req_home-jpg-f5ed5\":{\"type\":\"REQUEST\",\"name\":\"Home.jpg\",\"path\":\"Home.jpg\",\"pathFormatted\":\"req_home-jpg-f5ed5\",\"stats\":{\"name\":\"Home.jpg\",\"numberOfRequests\":{\"total\":360,\"ok\":360,\"ko\":0},\"minResponseTime\":{\"total\":14,\"ok\":14,\"ko\":0},\"maxResponseTime\":{\"total\":2747,\"ok\":2747,\"ko\":0},\"meanResponseTime\":{\"total\":994,\"ok\":994,\"ko\":0},\"standardDeviation\":{\"total\":694,\"ok\":694,\"ko\":0},\"percentiles1\":{\"total\":824,\"ok\":824,\"ko\":0},\"percentiles2\":{\"total\":1594,\"ok\":1594,\"ko\":0},\"percentiles3\":{\"total\":2126,\"ok\":2126,\"ko\":0},\"percentiles4\":{\"total\":2476,\"ok\":2476,\"ko\":0},\"group1\":{\"name\":\"t < 800 ms\",\"htmlName\":\"t < 800 ms\",\"count\":179,\"percentage\":50},\"group2\":{\"name\":\"800 ms <= t < 1200 ms\",\"htmlName\":\"t >= 800 ms <br> t < 1200 ms\",\"count\":34,\"percentage\":9},\"group3\":{\"name\":\"t >= 1200 ms\",\"htmlName\":\"t >= 1200 ms\",\"count\":147,\"percentage\":41},\"group4\":{\"name\":\"failed\",\"htmlName\":\"failed\",\"count\":0,\"percentage\":0},\"meanNumberOfRequestsPerSecond\":{\"total\":30,\"ok\":30,\"ko\":0}}},\"req_donne-es-jpg-5d5cc\":{\"type\":\"REQUEST\",\"name\":\"Données.jpg\",\"path\":\"Données.jpg\",\"pathFormatted\":\"req_donne-es-jpg-5d5cc\",\"stats\":{\"name\":\"Données.jpg\",\"numberOfRequests\":{\"total\":360,\"ok\":360,\"ko\":0},\"minResponseTime\":{\"total\":25,\"ok\":25,\"ko\":0},\"maxResponseTime\":{\"total\":3340,\"ok\":3340,\"ko\":0},\"meanResponseTime\":{\"total\":1182,\"ok\":1182,\"ko\":0},\"standardDeviation\":{\"total\":890,\"ok\":890,\"ko\":0},\"percentiles1\":{\"total\":835,\"ok\":835,\"ko\":0},\"percentiles2\":{\"total\":2007,\"ok\":2007,\"ko\":0},\"percentiles3\":{\"total\":2579,\"ok\":2579,\"ko\":0},\"percentiles4\":{\"total\":3037,\"ok\":3037,\"ko\":0},\"group1\":{\"name\":\"t < 800 ms\",\"htmlName\":\"t < 800 ms\",\"count\":175,\"percentage\":49},\"group2\":{\"name\":\"800 ms <= t < 1200 ms\",\"htmlName\":\"t >= 800 ms <br> t < 1200 ms\",\"count\":22,\"percentage\":6},\"group3\":{\"name\":\"t >= 1200 ms\",\"htmlName\":\"t >= 1200 ms\",\"count\":163,\"percentage\":45},\"group4\":{\"name\":\"failed\",\"htmlName\":\"failed\",\"count\":0,\"percentage\":0},\"meanNumberOfRequestsPerSecond\":{\"total\":30,\"ok\":30,\"ko\":0}}},\"req_test-jpg-bd183\":{\"type\":\"REQUEST\",\"name\":\"Test.jpg\",\"path\":\"Test.jpg\",\"pathFormatted\":\"req_test-jpg-bd183\",\"stats\":{\"name\":\"Test.jpg\",\"numberOfRequests\":{\"total\":360,\"ok\":360,\"ko\":0},\"minResponseTime\":{\"total\":19,\"ok\":19,\"ko\":0},\"maxResponseTime\":{\"total\":3281,\"ok\":3281,\"ko\":0},\"meanResponseTime\":{\"total\":1187,\"ok\":1187,\"ko\":0},\"standardDeviation\":{\"total\":884,\"ok\":884,\"ko\":0},\"percentiles1\":{\"total\":823,\"ok\":823,\"ko\":0},\"percentiles2\":{\"total\":2016,\"ok\":2016,\"ko\":0},\"percentiles3\":{\"total\":2573,\"ok\":2573,\"ko\":0},\"percentiles4\":{\"total\":2985,\"ok\":2985,\"ko\":0},\"group1\":{\"name\":\"t < 800 ms\",\"htmlName\":\"t < 800 ms\",\"count\":176,\"percentage\":49},\"group2\":{\"name\":\"800 ms <= t < 1200 ms\",\"htmlName\":\"t >= 800 ms <br> t < 1200 ms\",\"count\":21,\"percentage\":6},\"group3\":{\"name\":\"t >= 1200 ms\",\"htmlName\":\"t >= 1200 ms\",\"count\":163,\"percentage\":45},\"group4\":{\"name\":\"failed\",\"htmlName\":\"failed\",\"count\":0,\"percentage\":0},\"meanNumberOfRequestsPerSecond\":{\"total\":30,\"ok\":30,\"ko\":0}}},\"req_test-complet-jp-2d4ff\":{\"type\":\"REQUEST\",\"name\":\"Test_Complet.jpg\",\"path\":\"Test_Complet.jpg\",\"pathFormatted\":\"req_test-complet-jp-2d4ff\",\"stats\":{\"name\":\"Test_Complet.jpg\",\"numberOfRequests\":{\"total\":360,\"ok\":360,\"ko\":0},\"minResponseTime\":{\"total\":20,\"ok\":20,\"ko\":0},\"maxResponseTime\":{\"total\":3344,\"ok\":3344,\"ko\":0},\"meanResponseTime\":{\"total\":1202,\"ok\":1202,\"ko\":0},\"standardDeviation\":{\"total\":900,\"ok\":900,\"ko\":0},\"percentiles1\":{\"total\":860,\"ok\":860,\"ko\":0},\"percentiles2\":{\"total\":2030,\"ok\":2030,\"ko\":0},\"percentiles3\":{\"total\":2667,\"ok\":2667,\"ko\":0},\"percentiles4\":{\"total\":3054,\"ok\":3054,\"ko\":0},\"group1\":{\"name\":\"t < 800 ms\",\"htmlName\":\"t < 800 ms\",\"count\":171,\"percentage\":48},\"group2\":{\"name\":\"800 ms <= t < 1200 ms\",\"htmlName\":\"t >= 800 ms <br> t < 1200 ms\",\"count\":28,\"percentage\":8},\"group3\":{\"name\":\"t >= 1200 ms\",\"htmlName\":\"t >= 1200 ms\",\"count\":161,\"percentage\":45},\"group4\":{\"name\":\"failed\",\"htmlName\":\"failed\",\"count\":0,\"percentage\":0},\"meanNumberOfRequestsPerSecond\":{\"total\":30,\"ok\":30,\"ko\":0}}},\"req_request-3-d0973\":{\"type\":\"REQUEST\",\"name\":\"request_3\",\"path\":\"request_3\",\"pathFormatted\":\"req_request-3-d0973\",\"stats\":{\"name\":\"request_3\",\"numberOfRequests\":{\"total\":180,\"ok\":180,\"ko\":0},\"minResponseTime\":{\"total\":321,\"ok\":321,\"ko\":0},\"maxResponseTime\":{\"total\":2015,\"ok\":2015,\"ko\":0},\"meanResponseTime\":{\"total\":1153,\"ok\":1153,\"ko\":0},\"standardDeviation\":{\"total\":349,\"ok\":349,\"ko\":0},\"percentiles1\":{\"total\":1163,\"ok\":1163,\"ko\":0},\"percentiles2\":{\"total\":1371,\"ok\":1371,\"ko\":0},\"percentiles3\":{\"total\":1766,\"ok\":1766,\"ko\":0},\"percentiles4\":{\"total\":1968,\"ok\":1968,\"ko\":0},\"group1\":{\"name\":\"t < 800 ms\",\"htmlName\":\"t < 800 ms\",\"count\":26,\"percentage\":14},\"group2\":{\"name\":\"800 ms <= t < 1200 ms\",\"htmlName\":\"t >= 800 ms <br> t < 1200 ms\",\"count\":73,\"percentage\":41},\"group3\":{\"name\":\"t >= 1200 ms\",\"htmlName\":\"t >= 1200 ms\",\"count\":81,\"percentage\":45},\"group4\":{\"name\":\"failed\",\"htmlName\":\"failed\",\"count\":0,\"percentage\":0},\"meanNumberOfRequestsPerSecond\":{\"total\":15,\"ok\":15,\"ko\":0}}},\"req_request-4-e7d1b\":{\"type\":\"REQUEST\",\"name\":\"request_4\",\"path\":\"request_4\",\"pathFormatted\":\"req_request-4-e7d1b\",\"stats\":{\"name\":\"request_4\",\"numberOfRequests\":{\"total\":180,\"ok\":180,\"ko\":0},\"minResponseTime\":{\"total\":243,\"ok\":243,\"ko\":0},\"maxResponseTime\":{\"total\":2552,\"ok\":2552,\"ko\":0},\"meanResponseTime\":{\"total\":955,\"ok\":955,\"ko\":0},\"standardDeviation\":{\"total\":381,\"ok\":381,\"ko\":0},\"percentiles1\":{\"total\":1020,\"ok\":1020,\"ko\":0},\"percentiles2\":{\"total\":1178,\"ok\":1178,\"ko\":0},\"percentiles3\":{\"total\":1530,\"ok\":1530,\"ko\":0},\"percentiles4\":{\"total\":1850,\"ok\":1850,\"ko\":0},\"group1\":{\"name\":\"t < 800 ms\",\"htmlName\":\"t < 800 ms\",\"count\":56,\"percentage\":31},\"group2\":{\"name\":\"800 ms <= t < 1200 ms\",\"htmlName\":\"t >= 800 ms <br> t < 1200 ms\",\"count\":82,\"percentage\":46},\"group3\":{\"name\":\"t >= 1200 ms\",\"htmlName\":\"t >= 1200 ms\",\"count\":42,\"percentage\":23},\"group4\":{\"name\":\"failed\",\"htmlName\":\"failed\",\"count\":0,\"percentage\":0},\"meanNumberOfRequestsPerSecond\":{\"total\":15,\"ok\":15,\"ko\":0}}},\"req_request-5-48829\":{\"type\":\"REQUEST\",\"name\":\"request_5\",\"path\":\"request_5\",\"pathFormatted\":\"req_request-5-48829\",\"stats\":{\"name\":\"request_5\",\"numberOfRequests\":{\"total\":180,\"ok\":180,\"ko\":0},\"minResponseTime\":{\"total\":141,\"ok\":141,\"ko\":0},\"maxResponseTime\":{\"total\":2497,\"ok\":2497,\"ko\":0},\"meanResponseTime\":{\"total\":600,\"ok\":600,\"ko\":0},\"standardDeviation\":{\"total\":275,\"ok\":275,\"ko\":0},\"percentiles1\":{\"total\":553,\"ok\":553,\"ko\":0},\"percentiles2\":{\"total\":719,\"ok\":719,\"ko\":0},\"percentiles3\":{\"total\":1077,\"ok\":1077,\"ko\":0},\"percentiles4\":{\"total\":1301,\"ok\":1301,\"ko\":0},\"group1\":{\"name\":\"t < 800 ms\",\"htmlName\":\"t < 800 ms\",\"count\":154,\"percentage\":86},\"group2\":{\"name\":\"800 ms <= t < 1200 ms\",\"htmlName\":\"t >= 800 ms <br> t < 1200 ms\",\"count\":23,\"percentage\":13},\"group3\":{\"name\":\"t >= 1200 ms\",\"htmlName\":\"t >= 1200 ms\",\"count\":3,\"percentage\":2},\"group4\":{\"name\":\"failed\",\"htmlName\":\"failed\",\"count\":0,\"percentage\":0},\"meanNumberOfRequestsPerSecond\":{\"total\":15,\"ok\":15,\"ko\":0}}},\"req_request-6-027a9\":{\"type\":\"REQUEST\",\"name\":\"request_6\",\"path\":\"request_6\",\"pathFormatted\":\"req_request-6-027a9\",\"stats\":{\"name\":\"request_6\",\"numberOfRequests\":{\"total\":178,\"ok\":178,\"ko\":0},\"minResponseTime\":{\"total\":71,\"ok\":71,\"ko\":0},\"maxResponseTime\":{\"total\":1262,\"ok\":1262,\"ko\":0},\"meanResponseTime\":{\"total\":544,\"ok\":544,\"ko\":0},\"standardDeviation\":{\"total\":236,\"ok\":236,\"ko\":0},\"percentiles1\":{\"total\":537,\"ok\":537,\"ko\":0},\"percentiles2\":{\"total\":689,\"ok\":689,\"ko\":0},\"percentiles3\":{\"total\":992,\"ok\":992,\"ko\":0},\"percentiles4\":{\"total\":1085,\"ok\":1085,\"ko\":0},\"group1\":{\"name\":\"t < 800 ms\",\"htmlName\":\"t < 800 ms\",\"count\":154,\"percentage\":87},\"group2\":{\"name\":\"800 ms <= t < 1200 ms\",\"htmlName\":\"t >= 800 ms <br> t < 1200 ms\",\"count\":23,\"percentage\":13},\"group3\":{\"name\":\"t >= 1200 ms\",\"htmlName\":\"t >= 1200 ms\",\"count\":1,\"percentage\":1},\"group4\":{\"name\":\"failed\",\"htmlName\":\"failed\",\"count\":0,\"percentage\":0},\"meanNumberOfRequestsPerSecond\":{\"total\":14.833333333333334,\"ok\":14.833333333333334,\"ko\":0}}},\"req_request-7-f222f\":{\"type\":\"REQUEST\",\"name\":\"request_7\",\"path\":\"request_7\",\"pathFormatted\":\"req_request-7-f222f\",\"stats\":{\"name\":\"request_7\",\"numberOfRequests\":{\"total\":180,\"ok\":180,\"ko\":0},\"minResponseTime\":{\"total\":19,\"ok\":19,\"ko\":0},\"maxResponseTime\":{\"total\":1036,\"ok\":1036,\"ko\":0},\"meanResponseTime\":{\"total\":420,\"ok\":420,\"ko\":0},\"standardDeviation\":{\"total\":229,\"ok\":229,\"ko\":0},\"percentiles1\":{\"total\":415,\"ok\":415,\"ko\":0},\"percentiles2\":{\"total\":576,\"ok\":576,\"ko\":0},\"percentiles3\":{\"total\":827,\"ok\":827,\"ko\":0},\"percentiles4\":{\"total\":1000,\"ok\":1000,\"ko\":0},\"group1\":{\"name\":\"t < 800 ms\",\"htmlName\":\"t < 800 ms\",\"count\":170,\"percentage\":94},\"group2\":{\"name\":\"800 ms <= t < 1200 ms\",\"htmlName\":\"t >= 800 ms <br> t < 1200 ms\",\"count\":10,\"percentage\":6},\"group3\":{\"name\":\"t >= 1200 ms\",\"htmlName\":\"t >= 1200 ms\",\"count\":0,\"percentage\":0},\"group4\":{\"name\":\"failed\",\"htmlName\":\"failed\",\"count\":0,\"percentage\":0},\"meanNumberOfRequestsPerSecond\":{\"total\":15,\"ok\":15,\"ko\":0}}}}},\"Original\":{\"nameFile\":\"tre\",\"time\":6,\"stressVolt\":false,\"stressNidus\":false,\"timeStress\":0.1,\"user_gatling\":30,\"flow\":false}},\"Log\":{\"timeResponse\":{\"data\":{\"labels\":[\"Début de la Simulation\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"2 s\",\"2 s\",\"2 s\",\"2 s\",\"\",\"2 s\",\"2 s\",\"2 s\",\"2 s\",\"\",\"\",\"\",\"\",\"2 s\",\"\",\"\",\"2 s\",\"2 s\",\"2 s\",\"2 s\",\"2 s\",\"2 s\",\"2 s\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"3 s\",\"\",\"\",\"\",\"\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"\",\"\",\"\",\"3 s\",\"\",\"2 s\",\"2 s\",\"2 s\",\"2 s\",\"2 s\",\"2 s\",\"2 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"\",\"3 s\",\"3 s\",\"3 s\",\"\",\"3 s\",\"3 s\",\"\",\"\",\"3 s\",\"3 s\",\"\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"\",\"3 s\",\"\",\"3 s\",\"3 s\",\"\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"\",\"3 s\",\"\",\"3 s\",\"3 s\",\"\",\"\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"4 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"4 s\",\"3 s\",\"3 s\",\"4 s\",\"4 s\",\"3 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"3 s\",\"4 s\",\"4 s\",\"3 s\",\"3 s\",\"4 s\",\"4 s\",\"3 s\",\"3 s\",\"3 s\",\"4 s\",\"4 s\",\"3 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"3 s\",\"4 s\",\"3 s\",\"4 s\",\"3 s\",\"4 s\",\"\",\"4 s\",\"3 s\",\"\",\"4 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"3 s\",\"4 s\",\"3 s\",\"3 s\",\"4 s\",\"4 s\",\"3 s\",\"4 s\",\"\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"\",\"4 s\",\"3 s\",\"4 s\",\"3 s\",\"3 s\",\"4 s\",\"4 s\",\"4 s\",\"3 s\",\"4 s\",\"4 s\",\"\",\"\",\"3 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"3 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"\",\"4 s\",\"\",\"4 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"3 s\",\"4 s\",\"\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"\",\"5 s\",\"\",\"5 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"\",\"4 s\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"\",\"\",\"4 s\",\"4 s\",\"4 s\",\"\",\"5 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"5 s\",\"\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"\",\"4 s\",\"\",\"4 s\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"\",\"5 s\",\"5 s\",\"4 s\",\"5 s\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"\",\"4 s\",\"4 s\",\"\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"\",\"5 s\",\"\",\"\",\"\",\"4 s\",\"5 s\",\"4 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"5 s\",\"4 s\",\"5 s\",\"4 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"4 s\",\"5 s\",\"5 s\",\"\",\"4 s\",\"5 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"\",\"5 s\",\"4 s\",\"\",\"5 s\",\"4 s\",\"5 s\",\"4 s\",\"\",\"5 s\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"5 s\",\"5 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"5 s\",\"4 s\",\"5 s\",\"\",\"\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"4 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"\",\"4 s\",\"\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"4 s\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"4 s\",\"5 s\",\"4 s\",\"5 s\",\"5 s\",\"5 s\",\"6 s\",\"5 s\",\"5 s\",\"6 s\",\"5 s\",\"5 s\",\"6 s\",\"5 s\",\"6 s\",\"5 s\",\"6 s\",\"\",\"4 s\",\"\",\"4 s\",\"\",\"4 s\",\"\",\"5 s\",\"\",\"\",\"5 s\",\"\",\"4 s\",\"\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"6 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"4 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"6 s\",\"\",\"6 s\",\"5 s\",\"5 s\",\"4 s\",\"5 s\",\"5 s\",\"5 s\",\"4 s\",\"5 s\",\"5 s\",\"6 s\",\"5 s\",\"5 s\",\"4 s\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"6 s\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"\",\"5 s\",\"\",\"5 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"5 s\",\"6 s\",\"6 s\",\"\",\"6 s\",\"5 s\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"6 s\",\"\",\"6 s\",\"6 s\",\"5 s\",\"5 s\",\"6 s\",\"\",\"6 s\",\"5 s\",\"6 s\",\"6 s\",\"\",\"\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"4 s\",\"4 s\",\"6 s\",\"6 s\",\"6 s\",\"4 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"\",\"6 s\",\"5 s\",\"6 s\",\"5 s\",\"\",\"6 s\",\"5 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"5 s\",\"6 s\",\"6 s\",\"\",\"5 s\",\"\",\"\",\"6 s\",\"5 s\",\"6 s\",\"5 s\",\"\",\"\",\"5 s\",\"5 s\",\"5 s\",\"6 s\",\"5 s\",\"5 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"5 s\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"6 s\",\"5 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"\",\"\",\"6 s\",\"6 s\",\"\",\"\",\"\",\"5 s\",\"6 s\",\"\",\"6 s\",\"6 s\",\"\",\"6 s\",\"6 s\",\"6 s\",\"\",\"\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"7 s\",\"6 s\",\"5 s\",\"6 s\",\"5 s\",\"6 s\",\"5 s\",\"6 s\",\"5 s\",\"5 s\",\"5 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"6 s\",\"7 s\",\"6 s\",\"7 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"7 s\",\"7 s\",\"6 s\",\"\",\"6 s\",\"\",\"6 s\",\"\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"7 s\",\"6 s\",\"\",\"7 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"7 s\",\"\",\"7 s\",\"7 s\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"7 s\",\"\",\"\",\"7 s\",\"5 s\",\"6 s\",\"6 s\",\"5 s\",\"6 s\",\"\",\"7 s\",\"\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"\",\"6 s\",\"\",\"7 s\",\"\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"7 s\",\"6 s\",\"5 s\",\"7 s\",\"\",\"\",\"\",\"6 s\",\"6 s\",\"6 s\",\"7 s\",\"7 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"7 s\",\"6 s\",\"7 s\",\"6 s\",\"\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"\",\"7 s\",\"7 s\",\"6 s\",\"\",\"6 s\",\"5 s\",\"7 s\",\"6 s\",\"7 s\",\"6 s\",\"7 s\",\"7 s\",\"6 s\",\"5 s\",\"6 s\",\"6 s\",\"7 s\",\"6 s\",\"\",\"5 s\",\"\",\"5 s\",\"7 s\",\"6 s\",\"6 s\",\"\",\"\",\"6 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"5 s\",\"\",\"6 s\",\"6 s\",\"7 s\",\"6 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"\",\"\",\"\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"\",\"7 s\",\"6 s\",\"\",\"7 s\",\"\",\"\",\"6 s\",\"7 s\",\"5 s\",\"5 s\",\"\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"6 s\",\"7 s\",\"7 s\",\"6 s\",\"6 s\",\"\",\"6 s\",\"6 s\",\"7 s\",\"7 s\",\"\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"5 s\",\"6 s\",\"7 s\",\"\",\"7 s\",\"6 s\",\"\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"6 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"\",\"6 s\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"\",\"\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"\",\"\",\"6 s\",\"7 s\",\"\",\"6 s\",\"\",\"6 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"5 s\",\"6 s\",\"7 s\",\"7 s\",\"5 s\",\"6 s\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"5 s\",\"6 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"6 s\",\"\",\"\",\"7 s\",\"\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"6 s\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"6 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"6 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"7 s\",\"\",\"7 s\",\"7 s\",\"7 s\",\"\",\"7 s\",\"\",\"8 s\",\"7 s\",\"7 s\",\"\",\"8 s\",\"7 s\",\"7 s\",\"8 s\",\"8 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"8 s\",\"7 s\",\"7 s\",\"\",\"7 s\",\"\",\"8 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"8 s\",\"\",\"7 s\",\"7 s\",\"7 s\",\"\",\"7 s\",\"\",\"7 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"7 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"6 s\",\"8 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"7 s\",\"8 s\",\"\",\"8 s\",\"8 s\",\"7 s\",\"6 s\",\"6 s\",\"7 s\",\"8 s\",\"7 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"7 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"7 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"6 s\",\"8 s\",\"6 s\",\"6 s\",\"8 s\",\"6 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"7 s\",\"6 s\",\"8 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"6 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"7 s\",\"7 s\",\"8 s\",\"7 s\",\"7 s\",\"7 s\",\"8 s\",\"8 s\",\"\",\"6 s\",\"8 s\",\"6 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"6 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"7 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"7 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"6 s\",\"6 s\",\"8 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"7 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"6 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"8 s\",\"8 s\",\"7 s\",\"7 s\",\"8 s\",\"7 s\",\"7 s\",\"8 s\",\"7 s\",\"7 s\",\"7 s\",\"8 s\",\"8 s\",\"9 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"9 s\",\"7 s\",\"9 s\",\"7 s\",\"8 s\",\"7 s\",\"8 s\",\"9 s\",\"9 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"\",\"9 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"9 s\",\"7 s\",\"7 s\",\"8 s\",\"8 s\",\"7 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"9 s\",\"8 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"9 s\",\"8 s\",\"9 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"9 s\",\"7 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"7 s\",\"8 s\",\"7 s\",\"7 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"9 s\",\"9 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"9 s\",\"8 s\",\"8 s\",\"9 s\",\"9 s\",\"8 s\",\"8 s\",\"9 s\",\"8 s\",\"8 s\",\"7 s\",\"7 s\",\"9 s\",\"8 s\",\"7 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"8 s\",\"9 s\",\"8 s\",\"\",\"9 s\",\"9 s\",\"8 s\",\"8 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"6 s\",\"6 s\",\"8 s\",\"6 s\",\"6 s\",\"9 s\",\"8 s\",\"8 s\",\"6 s\",\"6 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"7 s\",\"9 s\",\"9 s\",\"8 s\",\"\",\"8 s\",\"9 s\",\"9 s\",\"\",\"9 s\",\"6 s\",\"7 s\",\"8 s\",\"6 s\",\"7 s\",\"7 s\",\"9 s\",\"9 s\",\"7 s\",\"9 s\",\"7 s\",\"7 s\",\"6 s\",\"9 s\",\"7 s\",\"8 s\",\"8 s\",\"9 s\",\"7 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"7 s\",\"8 s\",\"9 s\",\"7 s\",\"7 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"7 s\",\"8 s\",\"9 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"8 s\",\"7 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"8 s\",\"7 s\",\"8 s\",\"9 s\",\"8 s\",\"7 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"9 s\",\"8 s\",\"7 s\",\"9 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"9 s\",\"8 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"9 s\",\"9 s\",\"7 s\",\"8 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"9 s\",\"9 s\",\"8 s\",\"\",\"9 s\",\"8 s\",\"\",\"8 s\",\"9 s\",\"7 s\",\"9 s\",\"9 s\",\"9 s\",\"7 s\",\"7 s\",\"8 s\",\"9 s\",\"8 s\",\"9 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"9 s\",\"9 s\",\"7 s\",\"8 s\",\"9 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"7 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"8 s\",\"9 s\",\"9 s\",\"8 s\",\"8 s\",\"8 s\",\"9 s\",\"9 s\",\"7 s\",\"9 s\",\"7 s\",\"9 s\",\"8 s\",\"9 s\",\"7 s\",\"9 s\",\"9 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"9 s\",\"7 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"\",\"9 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"7 s\",\"9 s\",\"9 s\",\"9 s\",\"\",\"9 s\",\"9 s\",\"8 s\",\"\",\"9 s\",\"\",\"7 s\",\"8 s\",\"9 s\",\"9 s\",\"\",\"8 s\",\"\",\"9 s\",\"9 s\",\"7 s\",\"8 s\",\"7 s\",\"7 s\",\"9 s\",\"8 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"\",\"7 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"8 s\",\"8 s\",\"\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"10 s\",\"\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"10 s\",\"9 s\",\"10 s\",\"8 s\",\"\",\"9 s\",\"9 s\",\"10 s\",\"9 s\",\"10 s\",\"9 s\",\"10 s\",\"9 s\",\"8 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"7 s\",\"\",\"10 s\",\"10 s\",\"7 s\",\"9 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"8 s\",\"8 s\",\"10 s\",\"\",\"8 s\",\"\",\"8 s\",\"9 s\",\"10 s\",\"10 s\",\"\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"8 s\",\"\",\"10 s\",\"\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"8 s\",\"9 s\",\"8 s\",\"\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"8 s\",\"10 s\",\"8 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"9 s\",\"9 s\",\"10 s\",\"10 s\",\"8 s\",\"10 s\",\"10 s\",\"8 s\",\"9 s\",\"9 s\",\"\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"8 s\",\"9 s\",\"9 s\",\"10 s\",\"9 s\",\"\",\"9 s\",\"9 s\",\"9 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"9 s\",\"10 s\",\"8 s\",\"10 s\",\"\",\"10 s\",\"10 s\",\"10 s\",\"8 s\",\"10 s\",\"8 s\",\"10 s\",\"8 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"9 s\",\"8 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"9 s\",\"\",\"8 s\",\"10 s\",\"10 s\",\"9 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"8 s\",\"8 s\",\"10 s\",\"10 s\",\"8 s\",\"9 s\",\"8 s\",\"10 s\",\"10 s\",\"9 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"9 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"9 s\",\"9 s\",\"10 s\",\"10 s\",\"9 s\",\"8 s\",\"10 s\",\"10 s\",\"8 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"8 s\",\"9 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"9 s\",\"10 s\",\"\",\"\",\"10 s\",\"9 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"9 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"9 s\",\"8 s\",\"8 s\",\"10 s\",\"9 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"8 s\",\"8 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"8 s\",\"8 s\",\"10 s\",\"10 s\",\"11 s\",\"10 s\",\"10 s\",\"11 s\",\"9 s\",\"10 s\",\"10 s\",\"\",\"10 s\",\"9 s\",\"\",\"9 s\",\"11 s\",\"10 s\",\"9 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"11 s\",\"10 s\",\"11 s\",\"10 s\",\"9 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"11 s\",\"10 s\",\"9 s\",\"\",\"11 s\",\"9 s\",\"10 s\",\"10 s\",\"9 s\",\"9 s\",\"10 s\",\"11 s\",\"10 s\",\"\",\"11 s\",\"10 s\",\"11 s\",\"10 s\",\"10 s\",\"10 s\",\"11 s\",\"10 s\",\"11 s\",\"10 s\",\"9 s\",\"9 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"9 s\",\"9 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"9 s\",\"8 s\",\"8 s\",\"8 s\",\"10 s\",\"9 s\",\"9 s\",\"9 s\",\"11 s\",\"11 s\",\"9 s\",\"10 s\",\"\",\"11 s\",\"\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"11 s\",\"10 s\",\"10 s\",\"11 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"10 s\",\"9 s\",\"\",\"9 s\",\"8 s\",\"9 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"10 s\",\"10 s\",\"11 s\",\"9 s\",\"9 s\",\"9 s\",\"10 s\",\"9 s\",\"10 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"9 s\",\"11 s\",\"11 s\",\"10 s\",\"\",\"11 s\",\"\",\"9 s\",\"11 s\",\"11 s\",\"10 s\",\"9 s\",\"9 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"9 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"9 s\",\"10 s\",\"10 s\",\"\",\"\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"9 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"\",\"10 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"9 s\",\"\",\"10 s\",\"10 s\",\"11 s\",\"\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"\",\"11 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"11 s\",\"10 s\",\"10 s\",\"11 s\",\"11 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"11 s\",\"9 s\",\"11 s\",\"10 s\",\"9 s\",\"11 s\",\"10 s\",\"11 s\",\"10 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"\",\"11 s\",\"11 s\",\"9 s\",\"9 s\",\"9 s\",\"10 s\",\"9 s\",\"9 s\",\"11 s\",\"11 s\",\"10 s\",\"10 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"\",\"9 s\",\"11 s\",\"10 s\",\"9 s\",\"9 s\",\"10 s\",\"11 s\",\"10 s\",\"11 s\",\"9 s\",\"9 s\",\"11 s\",\"11 s\",\"10 s\",\"10 s\",\"11 s\",\"11 s\",\"10 s\",\"9 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"9 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"9 s\",\"11 s\",\"9 s\",\"11 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"11 s\",\"10 s\",\"\",\"11 s\",\"10 s\",\"9 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"9 s\",\"9 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"9 s\",\"9 s\",\"9 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"9 s\",\"9 s\",\"9 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"9 s\",\"9 s\",\"\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"\",\"10 s\",\"10 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"\",\"11 s\",\"11 s\",\"10 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"12 s\",\"12 s\",\"\",\"12 s\",\"10 s\",\"11 s\",\"11 s\",\"10 s\",\"10 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"\",\"11 s\",\"11 s\",\"\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"12 s\",\"11 s\",\"11 s\",\"12 s\",\"\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"12 s\",\"12 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"\",\"11 s\",\"11 s\",\"12 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"10 s\",\"11 s\",\"\",\"11 s\",\"11 s\",\"\",\"10 s\",\"10 s\",\"12 s\",\"12 s\",\"11 s\",\"11 s\",\"10 s\",\"12 s\",\"11 s\",\"12 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"12 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"\",\"12 s\",\"12 s\",\"10 s\",\"11 s\",\"\",\"10 s\",\"11 s\",\"11 s\",\"12 s\",\"11 s\",\"12 s\",\"11 s\",\"12 s\",\"\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"\",\"11 s\",\"12 s\",\"10 s\",\"10 s\",\"12 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"10 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"11 s\",\"12 s\",\"11 s\",\"12 s\",\"10 s\",\"11 s\",\"10 s\",\"10 s\",\"12 s\",\"10 s\",\"12 s\",\"11 s\",\"\",\"12 s\",\"10 s\",\"10 s\",\"10 s\",\"12 s\",\"12 s\",\"9 s\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"9 s\",\"9 s\",\"9 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"\",\"12 s\",\"11 s\",\"\",\"12 s\",\"9 s\",\"11 s\",\"9 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"10 s\",\"\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"12 s\",\"9 s\",\"12 s\",\"12 s\",\"11 s\",\"\",\"12 s\",\"11 s\",\"11 s\",\"11 s\",\"12 s\",\"12 s\",\"11 s\",\"\",\"9 s\",\"12 s\",\"9 s\",\"9 s\",\"12 s\",\"10 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"\",\"12 s\",\"12 s\",\"10 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"10 s\",\"12 s\",\"12 s\",\"\",\"12 s\",\"10 s\",\"10 s\",\"12 s\",\"11 s\",\"12 s\",\"\",\"12 s\",\"11 s\",\"12 s\",\"11 s\",\"12 s\",\"\",\"11 s\",\"11 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"\",\"12 s\",\"10 s\",\"12 s\",\"12 s\",\"12 s\",\"10 s\",\"11 s\",\"12 s\",\"10 s\",\"12 s\",\"10 s\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"11 s\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"10 s\",\"\",\"12 s\",\"12 s\",\"12 s\",\"10 s\",\"12 s\",\"10 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"10 s\",\"11 s\",\"10 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"\",\"11 s\",\"11 s\",\"10 s\",\"12 s\",\"10 s\",\"10 s\",\"10 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"12 s\",\"11 s\",\"11 s\",\"12 s\",\"12 s\",\"10 s\",\"12 s\",\"10 s\",\"12 s\",\"12 s\",\"11 s\",\"10 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"10 s\",\"12 s\",\"12 s\",\"10 s\",\"10 s\",\"11 s\",\"\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"11 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"10 s\",\"10 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"10 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"11 s\",\"10 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"10 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"10 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"10 s\",\"11 s\",\"12 s\",\"10 s\",\"12 s\",\"10 s\",\"12 s\",\"10 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"10 s\",\"11 s\",\"10 s\",\"12 s\",\"\",\"10 s\",\"11 s\",\"12 s\",\"10 s\",\"10 s\",\"11 s\",\"\",\"12 s\",\"12 s\",\"12 s\",\"10 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"11 s\",\"11 s\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"13 s\",\"11 s\",\"11 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"11 s\",\"12 s\",\"12 s\",\"\",\"12 s\",\"\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"13 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"\",\"13 s\",\"12 s\",\"12 s\",\"13 s\",\"13 s\",\"11 s\",\"11 s\",\"13 s\",\"12 s\",\"12 s\",\"\",\"11 s\",\"11 s\",\"12 s\",\"13 s\",\"12 s\",\"13 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"\",\"13 s\",\"12 s\",\"\",\"10 s\",\"10 s\",\"10 s\",\"12 s\",\"13 s\",\"12 s\",\"12 s\",\"12 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"10 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"13 s\",\"12 s\",\"12 s\",\"13 s\",\"13 s\",\"13 s\",\"12 s\",\"12 s\",\"12 s\",\"13 s\",\"12 s\",\"12 s\",\"12 s\",\"13 s\",\"10 s\",\"12 s\",\"11 s\",\"10 s\",\"10 s\",\"11 s\",\"11 s\",\"\",\"\",\"13 s\",\"11 s\",\"13 s\",\"11 s\",\"13 s\",\"13 s\",\"11 s\",\"13 s\",\"\",\"13 s\",\"12 s\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"12 s\",\"11 s\",\"11 s\",\"13 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"\",\"13 s\",\"13 s\",\"\",\"13 s\",\"12 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"12 s\",\"12 s\",\"13 s\",\"12 s\",\"12 s\",\"13 s\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"12 s\",\"\",\"12 s\",\"13 s\",\"13 s\",\"\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"12 s\",\"13 s\",\"13 s\",\"12 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"12 s\",\"12 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"13 s\",\"\",\"12 s\",\"12 s\",\"13 s\",\"12 s\",\"11 s\",\"\",\"13 s\",\"11 s\",\"13 s\",\"12 s\",\"\",\"12 s\",\"13 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"13 s\",\"11 s\",\"\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"13 s\",\"12 s\",\"\",\"\",\"11 s\",\"13 s\",\"11 s\",\"11 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"12 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"12 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"12 s\",\"\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"12 s\",\"\",\"12 s\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"\",\"13 s\",\"13 s\",\"\",\"13 s\",\"12 s\",\"12 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"13 s\",\"\",\"\",\"13 s\",\"12 s\",\"\",\"13 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"12 s\",\"13 s\",\"12 s\",\"12 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"13 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"\",\"13 s\",\"\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"\",\"13 s\",\"\"],\"datasets\":[{\"label\":\"Temps de Réponse\",\"borderColor\":\"rgba(0, 128, 255, 1)\",\"fill\":false,\"data\":[0,0,0,0,0,0,0,0,0,221,232,116,111,0,231,238,242,198,0,0,0,0,33,0,0,25,33,31,24,48,43,21,0,0,0,0,0,0,0,0,0,0,0,0,38,0,0,0,0,53,45,55,62,68,60,66,0,0,0,36,0,688,676,701,718,707,704,721,68,78,63,92,97,107,126,0,135,311,296,298,285,324,328,293,332,331,317,0,204,122,118,0,365,364,0,0,167,97,0,418,242,238,396,196,127,201,443,132,309,118,157,299,0,155,470,164,249,342,198,397,277,267,297,416,0,294,0,198,299,0,170,261,275,321,198,450,339,0,186,338,243,172,226,193,374,0,374,363,384,226,0,408,129,543,164,0,406,179,228,258,233,451,454,432,232,467,213,486,487,475,262,494,506,476,514,327,510,492,318,534,261,349,316,296,220,0,293,0,335,471,0,0,335,512,456,297,278,571,343,233,293,501,343,523,287,243,619,320,289,275,613,0,310,214,134,596,276,272,651,637,210,316,623,439,654,287,129,630,0,223,168,186,218,592,137,422,154,745,310,0,264,547,0,167,224,0,223,411,786,228,475,670,226,422,816,202,0,0,241,441,228,427,0,216,0,217,858,430,665,814,369,209,177,592,424,364,0,0,656,256,363,556,283,0,319,345,358,298,436,481,243,325,251,186,0,322,258,177,501,324,323,422,298,311,295,785,291,348,286,214,358,299,447,248,315,245,320,328,713,348,472,273,0,264,0,288,0,284,0,273,305,615,0,401,533,399,546,0,290,917,555,0,0,711,548,364,455,381,479,343,663,626,458,0,337,0,712,309,312,441,671,487,299,469,314,403,287,697,272,0,457,624,436,399,415,423,276,408,453,0,708,616,472,528,0,417,875,648,467,364,520,502,482,0,823,0,411,785,286,833,792,249,599,944,218,504,883,177,723,781,605,0,919,836,0,127,0,129,852,639,132,950,0,830,571,146,147,1093,968,1171,814,0,0,522,667,538,596,507,860,0,516,500,1222,595,518,520,440,0,0,503,1020,512,0,526,450,528,0,531,552,533,447,0,1001,536,240,616,471,0,734,515,0,594,257,257,550,849,0,0,828,616,1091,0,390,620,287,612,560,1139,538,439,569,414,1041,601,633,395,489,582,979,506,308,586,1174,480,584,598,405,0,456,560,1034,1334,1196,262,1008,1342,603,1044,0,1219,0,647,532,561,1236,1255,294,1087,1046,1249,1033,433,976,1269,0,656,470,898,375,436,420,1572,990,1553,923,325,1357,1312,1360,414,1178,1322,1367,525,0,1050,1300,0,410,491,871,848,1435,1232,221,435,205,1396,1091,1095,0,1195,200,1123,1077,620,1283,0,590,0,0,0,876,759,1304,708,826,598,182,1342,1115,1007,659,1117,1242,1093,544,631,1472,436,1448,607,853,206,503,457,1479,559,488,0,1560,608,1561,527,1563,1259,0,562,1341,0,955,1615,531,1622,0,483,620,485,1097,1408,1101,603,574,579,1374,551,1255,1313,1223,667,505,1188,623,0,0,900,685,1049,911,1049,555,542,678,554,1085,1767,629,370,639,354,690,0,498,633,355,575,0,1814,0,1604,314,1824,1596,1842,0,311,1310,1780,1317,950,597,687,537,1724,889,625,1349,1726,1026,1522,1172,533,1192,655,824,1471,330,1608,522,663,543,296,618,1046,310,1149,465,313,572,281,576,281,0,1968,0,1601,0,1599,0,645,0,0,587,0,1903,0,485,1288,643,609,1096,307,1997,0,1707,2015,467,1187,2025,1709,1074,764,1072,527,653,1204,1672,1021,598,640,1097,0,525,592,574,604,0,1128,542,555,567,871,647,478,0,519,1120,556,1987,592,633,1164,1933,571,646,447,1084,1083,1944,662,854,1959,1875,1175,1928,450,672,681,1936,1949,0,1223,0,1150,485,440,467,494,508,600,686,1260,532,487,0,460,705,508,472,426,727,1173,1185,1057,1173,517,0,508,478,749,741,494,0,576,1146,531,418,0,0,687,568,377,532,444,776,1917,1908,688,513,551,1910,547,572,403,574,407,996,414,532,666,419,0,717,1430,599,1218,0,556,1446,417,742,681,716,554,1813,1788,447,554,0,1834,0,0,556,996,693,1465,0,0,1721,1391,1112,701,993,1486,546,100,593,534,589,733,525,1194,1172,669,604,691,1544,730,580,525,607,557,582,1573,1031,936,979,476,1318,334,1244,279,283,718,274,274,566,275,0,0,257,569,0,0,0,1450,1005,0,241,564,0,757,1126,547,0,0,552,576,754,1488,826,516,569,1616,1719,1638,1727,2150,552,829,581,869,189,735,2011,721,1386,534,1426,301,2032,1770,1673,500,495,837,736,576,2050,819,276,634,278,835,588,501,837,576,829,509,749,452,827,511,595,597,836,1492,320,322,1090,0,603,0,482,0,639,762,749,832,348,605,0,326,628,503,869,630,648,348,0,347,385,864,637,841,1586,330,0,0,385,1591,859,781,1450,1244,0,401,0,1231,1425,1242,1212,0,1109,0,368,0,1313,1416,976,995,758,838,1122,728,1523,663,664,838,0,1330,809,672,662,840,664,954,730,793,721,431,759,2163,513,0,0,0,818,1393,823,605,463,1398,852,714,1391,828,817,685,607,1393,622,663,0,1620,624,605,566,619,568,0,747,539,613,558,848,467,0,561,479,716,0,749,2008,605,744,492,726,511,559,843,1999,750,752,596,737,0,2013,0,2648,531,1247,765,0,0,1704,1357,505,547,739,1351,1228,603,535,536,2350,0,1371,1337,720,1429,1359,569,571,594,848,436,0,0,0,1285,852,607,597,853,0,677,1344,0,707,0,0,1338,868,2052,2053,0,722,457,1308,874,741,648,1370,1436,726,428,1922,1297,0,1081,1044,773,523,0,1941,525,528,737,510,755,1592,2502,1031,742,0,505,1450,0,1052,483,467,722,484,1487,737,1585,1501,655,707,764,1471,892,659,719,790,702,742,702,796,749,515,807,719,688,0,1842,676,659,1159,763,893,768,0,0,770,821,535,885,0,774,864,824,832,834,0,0,1493,848,0,1587,0,1266,1556,777,833,694,425,775,817,611,825,2388,1729,539,639,2402,1548,530,767,1359,429,2393,1813,1524,567,534,547,1411,1526,0,0,1097,0,808,577,442,430,1231,1566,1093,565,628,679,2057,784,479,595,448,2076,1883,587,581,1793,749,2073,2086,1254,1279,585,440,845,546,2107,487,734,1835,690,2341,1835,446,485,439,1721,1842,1284,637,1277,489,474,1789,1182,489,0,451,1309,1315,0,482,0,440,915,976,0,465,1327,955,465,451,2049,998,857,986,471,1335,897,0,638,0,483,1957,1387,1024,1261,1958,1408,489,0,889,1486,1253,0,971,0,589,608,573,435,468,1579,593,574,495,1536,1549,1384,1207,407,819,554,501,516,1529,402,798,405,430,1497,1070,539,430,546,681,422,564,1125,419,581,2269,588,709,1128,427,443,386,561,1297,740,474,1075,475,0,567,515,1181,2340,2348,1015,444,1537,679,1201,517,447,460,449,450,1117,936,592,1071,676,517,470,427,442,521,1392,1391,1440,700,326,528,426,552,461,2366,680,2367,2649,447,2358,554,1479,567,568,1450,2666,432,427,1409,679,402,427,2679,373,1175,416,592,577,337,696,275,541,706,282,1223,1782,1266,238,1783,1281,1172,195,187,0,2288,717,2311,107,1301,795,461,2315,581,90,718,1613,575,1164,97,779,695,705,97,709,579,97,785,1231,1206,1588,801,724,691,801,1666,1162,626,1126,123,689,2325,3016,810,3017,3018,2469,2470,2471,528,130,630,806,627,1631,1259,625,1369,530,616,538,136,1264,2288,1272,802,766,749,173,545,174,1243,1581,1748,1235,1217,2281,192,194,1292,1306,755,1699,1427,706,1741,1902,1692,211,634,197,1315,1294,1427,2028,655,685,632,219,1468,220,1470,1019,1592,748,236,237,619,1291,1251,658,0,244,1106,570,760,547,592,574,589,671,264,1501,2226,704,563,1516,1923,549,554,498,248,670,378,2250,554,708,559,1442,396,439,245,675,232,1138,505,604,743,358,2136,773,316,360,339,2137,616,2013,2015,1481,654,634,1158,613,554,315,353,539,1099,616,792,529,640,1171,737,1256,598,1044,398,599,512,282,287,553,1104,292,636,715,1901,1901,285,542,1605,515,514,520,679,657,525,419,527,504,270,630,996,475,674,0,471,516,653,715,928,521,431,433,413,303,285,549,2820,2732,675,2827,2832,438,703,704,2746,2747,470,270,720,534,256,421,481,694,509,2176,478,246,695,0,731,317,490,0,267,2787,2222,709,2789,2399,2395,280,593,2236,482,2415,2197,2820,500,1787,769,1189,490,1942,736,435,504,480,485,767,2720,1638,511,2196,2109,485,449,523,1543,788,699,736,2150,1371,801,1018,717,666,369,1096,1070,2175,638,706,453,578,1308,342,840,595,348,1349,326,1487,2505,1723,605,1429,2253,602,555,731,547,1725,1406,1148,1266,1715,1829,728,1402,2497,865,1713,629,576,927,1894,863,582,1473,1163,2552,1735,1478,1886,1589,1700,600,645,2034,1530,821,747,1468,552,1740,1940,1561,2553,632,631,1840,0,399,1660,0,1597,784,2733,977,1027,624,2682,2747,1988,424,2030,409,2042,2129,1963,2235,684,613,2270,2133,591,1575,789,916,965,416,674,894,2437,1520,1195,748,894,709,847,583,1650,576,1894,575,537,1506,2093,1603,431,894,2560,983,2560,819,1716,901,2839,710,978,1945,1988,1765,3259,436,967,786,957,0,808,569,766,1766,970,3281,1982,1792,1734,1140,2381,437,974,854,2015,737,0,812,1481,1043,1022,636,597,1361,979,2647,445,849,835,0,1005,835,1694,0,1290,0,3344,1997,732,1110,0,1589,0,1376,562,2495,1500,2508,2496,533,1833,481,816,1798,745,746,1363,1298,884,690,1421,1278,790,1214,1338,731,657,1201,522,524,525,1390,1212,540,542,0,2546,914,567,774,775,1245,775,910,781,780,1218,573,1372,1261,586,1503,901,1486,1488,2274,2275,1744,0,711,563,595,707,2267,590,607,604,1135,614,615,616,665,592,580,574,579,1769,584,0,1239,627,627,733,1940,1946,628,659,661,1469,1968,695,628,918,620,1878,0,893,1556,520,736,680,721,610,733,1841,718,516,688,716,528,3340,0,716,677,3263,1462,528,887,544,531,577,686,637,1244,0,717,1424,556,648,689,1662,653,803,769,658,2670,2541,725,0,2680,0,2684,1293,728,702,0,1409,688,685,569,679,727,752,659,630,634,612,617,613,640,613,794,621,804,688,620,622,637,2202,0,622,0,609,715,621,779,2221,1458,2212,0,1142,724,651,519,656,760,2745,710,2756,661,621,513,1903,1530,1131,564,723,2436,466,710,2766,1145,1513,0,1406,666,697,743,654,578,778,486,1373,666,671,702,672,1318,490,711,570,2301,1013,1459,684,1782,0,1222,1540,1173,574,491,1146,520,1424,522,504,1800,724,646,807,711,1980,1148,562,2218,674,0,714,526,542,2468,1036,2470,542,2470,543,653,1300,827,728,687,1262,548,0,525,1271,636,693,1253,2439,526,2036,542,1076,523,523,1236,656,2031,0,2358,764,659,2042,2049,853,655,1037,743,2284,3006,631,512,3024,2148,2401,645,1050,1225,1949,591,491,664,1135,1276,2099,2100,507,667,1057,2354,2355,2435,2462,492,664,1891,368,1920,1319,485,946,1885,3079,677,950,2346,574,1343,1047,663,1394,587,964,1247,579,579,2159,970,578,2636,1914,2162,973,531,967,556,501,645,1371,1481,530,0,0,984,1710,1721,517,1155,1201,1182,510,1985,1221,1558,511,1810,992,395,514,977,506,1236,1660,1185,1292,508,508,2043,564,1194,1999,2573,2576,436,1708,2015,572,427,446,812,516,1176,581,447,2002,2720,2597,568,458,1026,1021,2526,2526,1016,492,363,493,413,364,1830,711,463,0,497,2303,0,2152,379,587,2208,2400,473,488,465,364,508,387,1033,2400,2391,1278,1015,519,2215,474,2238,459,1043,458,474,2223,0,425,1819,1017,489,2234,2236,490,479,510,0,399,1024,463,1124,543,526,428,1105,449,504,2159,2097,486,1064,446,448,377,378,1860,2071,491,1830,439,374,395,477,478,2096,2762,2763,2764,1052,2259,2281,1832,389,481,2127,1151,0,496,0,485,498,492,493,1832,1835,2098,2747,462,1042,1070,408,2561,1764,2561,2563,806,2150,0,1671,2775,2195,416,583,1233,513,1097,1097,608,2027,2028,1761,1009,2124,1216,619,2046,627,473,1760,480,445,1018,475,2911,1984,2005,2496,2926,1997,2496,628,471,1677,0,466,0,2337,489,489,1134,2485,2340,454,981,335,471,632,1037,446,2213,463,2171,444,418,441,525,2182,445,648,1049,649,1030,425,408,393,2158,914,1025,0,0,432,730,516,662,661,434,1126,1830,359,352,439,448,498,0,956,294,441,935,478,285,284,2414,0,935,1427,382,0,904,858,880,1740,335,369,308,309,839,0,653,2472,2474,2475,2411,2413,514,831,1639,627,826,2384,2509,1982,1972,1972,308,1998,314,1423,2020,626,1666,317,1151,533,2529,340,809,467,1342,77,327,72,71,67,402,610,394,540,380,59,2055,349,72,0,564,537,2477,2486,2488,1608,2426,2426,566,566,1726,1707,623,369,1209,227,539,556,578,84,0,2462,284,1698,2007,2011,1042,349,997,622,2021,2177,150,604,1752,1518,620,587,983,2195,601,945,581,1555,1523,146,895,668,1464,640,2216,988,1262,417,952,1616,852,425,308,169,1584,1570,910,572,594,1125,408,1161,410,692,2693,312,2682,416,2675,1587,1336,1338,565,1338,0,557,1473,2713,654,1567,839,393,184,182,670,178,359,1629,2565,2570,986,2525,551,312,2525,903,936,2493,2482,2555,368,2421,498,294,491,645,2504,912,465,2580,283,317,833,2299,285,646,2474,2474,2474,399,2065,397,398,298,317,348,349,505,349,324,637,1984,323,629,2459,490,802,406,2103,0,503,1927,337,390,500,694,0,323,609,506,418,511,419,885,421,424,2265,2267,0,2034,350,319,324,1674,479,423,437,621,2167,0,1639,1606,1864,324,353,351,382,0,346,348,2126,2080,357,331,332,351,372,374,369,1625,1593,2101,1866,272,290,395,278,281,0,281,1665,355,362,2114,2041,398,467,1714,388,377,0,392,860,401,413,387,409,0,366,370,0,615,450,1123,1205,415,310,424,372,334,0,401,390,1024,388,526,410,391,0,400,416,419,799,733,372,439,2007,440,298,369,1146,522,439,2019,498,387,461,509,0,509,433,310,404,2030,512,446,536,1885,457,1885,515,0,437,447,0,1414,2049,371,363,1353,461,1996,381,453,381,1997,1141,465,466,335,452,456,534,522,526,1918,404,405,343,527,491,1048,528,1955,478,0,400,459,1980,861,0,1975,761,775,476,1002,477,695,471,0,1278,479,426,458,401,755,2447,571,565,0,1149,479,2447,2458,476,2122,544,1146,1129,1013,2429,537,2430,485,486,1008,487,855,500,730,465,2429,693,1924,1924,348,1926,516,1067,0,514,2156,2158,2158,343,222,3230,615,511,522,373,379,199,200,481,3233,3249,3067,202,482,483,218,203,205,539,422,208,214,543,205,500,502,0,408,1306,0,299,3097,1309,2962,190,194,195,324,184,959,578,579,838,330,2221,0,2255,2256,1817,2963,343,3001,490,354,986,0,573,861,861,864,455,126,1140,0,2866,339,2861,2861,659,2632,381,874,337,135,342,140,891,958,139,574,142,599,605,353,603,467,361,353,485,356,481,358,482,0,138,366,2667,150,367,355,556,383,2484,431,356,0,409,2564,2566,338,1030,362,0,321,1409,510,1423,350,0,1061,1061,352,799,212,343,0,362,2591,607,220,117,2394,1049,354,2399,701,2407,1049,64,66,66,1058,1082,1084,374,717,376,405,714,1084,1808,0,389,267,367,1958,394,2564,293,394,297,1225,97,1173,243,297,1113,165,285,2459,1120,2451,411,407,649,410,1116,295,97,1118,94,0,1109,1112,2463,713,2268,1997,2269,411,291,413,366,369,1070,1217,302,303,339,1117,284,2004,913,915,1343,2270,546,1345,1345,546,551,1898,286,1892,848,411,936,2327,141,484,907,1725,551,138,150,2025,693,587,2347,2330,1118,0,142,570,417,147,1094,444,1730,448,1141,448,72,160,707,2318,2031,78,1436,79,110,2313,470,80,471,1169,0,66,1170,461,730,1171,224,1162,2329,127,105,447,966,708,938,132,2292,134,86,301,1261,115,2297,106,662,123,301,124,92,124,2301,1075,492,2027,103,2028,494,2029,496,442,1989,852,386,93,2096,1985,2098,119,0,2029,1857,129,2031,2031,1848,0,113,811,109,2042,110,111,384,1835,357,1528,1529,1821,345,195,352,0,105,155,106,1973,1256,1257,1234,933,169,149,1259,171,134,137,78,1441,1195,127,1336,231,231,160,204,206,913,1099,1890,546,139,0,138,0,138,123,602,142,82,1119,210,211,212,0,87,182,164,126,128,2069,1388,128,169,574,0,1401,1505,181,45,246,25,244,315,1132,916,597,0,144,186,0,2285,2286,2287,323,115,378,630,894,117,125,172,172,174,127,175,2262,643,1693,643,790,133,449,780,130,187,134,859,293,456,134,456,651,457,195,2235,422,2230,2236,2237,2167,2168,0,0,134,1518,146,1520,146,138,1521,67,0,243,383,135,244,384,246,385,1622,1622,147,381,1516,382,707,0,151,257,0,136,829,247,235,140,237,236,239,1268,1285,161,1286,422,161,156,163,405,165,312,0,575,172,85,0,0,147,234,153,158,235,240,119,0,122,1038,140,126,931,0,240,162,256,153,0,140,262,324,171,774,428,0,79,160,159,226,891,257,169,0,1064,493,76,481,2363,0,93,2180,360,926,0,1354,274,2181,2183,2192,2189,121,2183,0,0,221,120,129,280,130,988,209,256,992,0,0,1547,283,1561,1559,229,115,93,296,350,96,98,99,244,103,0,942,0,254,244,86,250,0,935,112,168,279,203,59,1014,197,60,56,281,171,180,148,294,67,299,1068,155,0,305,33,157,35,209,0,0,189,222,227,168,296,58,0,176,60,599,307,187,561,180,211,177,276,180,184,0,223,224,498,99,193,0,222,463,192,1062,156,1062,0,228,232,1070,194,141,287,79,80,213,246,249,937,216,231,260,104,0,1265,0,1594,114,118,1601,117,237,119,1605,123,0,139,141,0,303,1102,1166,235,208,209,209,0,162,0,459,165,161,156,741,499,682,0,658,510,0,0,356,941,0,99,0,233,101,106,389,0,1365,162,1368,1374,92,94,13,95,80,360,134,0,29,19,14,18,19,43,20,460,0,52,721,32,0,52,0,143,33,86,35,101,37,102,101,41,65,187,0,163,68,0,79,60,808,302,298,125,0,356,0,74,0,0,28,391,91,38,42,40,43,165,0,49,46,51,50,26,25,25,24,61,99,0,75,0,47,0],\"pointRadius\":0}]}},\"bySeconds\":{\"data\":{\"labels\":[\"Début de la Simulation\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"2 s\",\"2 s\",\"2 s\",\"2 s\",\"\",\"2 s\",\"2 s\",\"2 s\",\"2 s\",\"\",\"\",\"\",\"\",\"2 s\",\"\",\"\",\"2 s\",\"2 s\",\"2 s\",\"2 s\",\"2 s\",\"2 s\",\"2 s\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"3 s\",\"\",\"\",\"\",\"\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"\",\"\",\"\",\"3 s\",\"\",\"2 s\",\"2 s\",\"2 s\",\"2 s\",\"2 s\",\"2 s\",\"2 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"\",\"3 s\",\"3 s\",\"3 s\",\"\",\"3 s\",\"3 s\",\"\",\"\",\"3 s\",\"3 s\",\"\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"\",\"3 s\",\"\",\"3 s\",\"3 s\",\"\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"\",\"3 s\",\"\",\"3 s\",\"3 s\",\"\",\"\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"4 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"3 s\",\"4 s\",\"3 s\",\"3 s\",\"4 s\",\"4 s\",\"3 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"3 s\",\"4 s\",\"4 s\",\"3 s\",\"3 s\",\"4 s\",\"4 s\",\"3 s\",\"3 s\",\"3 s\",\"4 s\",\"4 s\",\"3 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"3 s\",\"4 s\",\"3 s\",\"4 s\",\"3 s\",\"4 s\",\"\",\"4 s\",\"3 s\",\"\",\"4 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"3 s\",\"4 s\",\"3 s\",\"3 s\",\"4 s\",\"4 s\",\"3 s\",\"4 s\",\"\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"\",\"4 s\",\"3 s\",\"4 s\",\"3 s\",\"3 s\",\"4 s\",\"4 s\",\"4 s\",\"3 s\",\"4 s\",\"4 s\",\"\",\"\",\"3 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"3 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"\",\"4 s\",\"\",\"4 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"3 s\",\"4 s\",\"\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"\",\"5 s\",\"\",\"5 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"\",\"4 s\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"\",\"\",\"4 s\",\"4 s\",\"4 s\",\"\",\"5 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"5 s\",\"\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"\",\"4 s\",\"\",\"4 s\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"\",\"5 s\",\"5 s\",\"4 s\",\"5 s\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"\",\"4 s\",\"4 s\",\"\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"\",\"5 s\",\"\",\"\",\"\",\"4 s\",\"5 s\",\"4 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"5 s\",\"4 s\",\"5 s\",\"4 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"4 s\",\"5 s\",\"5 s\",\"\",\"4 s\",\"5 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"\",\"5 s\",\"4 s\",\"\",\"5 s\",\"4 s\",\"5 s\",\"4 s\",\"\",\"5 s\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"5 s\",\"5 s\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"5 s\",\"4 s\",\"5 s\",\"\",\"\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"4 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"\",\"4 s\",\"\",\"4 s\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"\",\"5 s\",\"4 s\",\"4 s\",\"4 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"4 s\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"4 s\",\"5 s\",\"4 s\",\"5 s\",\"5 s\",\"5 s\",\"6 s\",\"5 s\",\"5 s\",\"6 s\",\"5 s\",\"5 s\",\"6 s\",\"5 s\",\"6 s\",\"5 s\",\"6 s\",\"\",\"4 s\",\"\",\"4 s\",\"\",\"4 s\",\"\",\"5 s\",\"\",\"\",\"5 s\",\"\",\"4 s\",\"\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"6 s\",\"4 s\",\"\",\"4 s\",\"4 s\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"4 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"6 s\",\"\",\"6 s\",\"5 s\",\"5 s\",\"4 s\",\"5 s\",\"5 s\",\"5 s\",\"4 s\",\"5 s\",\"5 s\",\"6 s\",\"5 s\",\"5 s\",\"4 s\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"5 s\",\"4 s\",\"6 s\",\"5 s\",\"5 s\",\"4 s\",\"4 s\",\"\",\"5 s\",\"\",\"5 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"5 s\",\"6 s\",\"6 s\",\"\",\"6 s\",\"5 s\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"6 s\",\"\",\"6 s\",\"6 s\",\"5 s\",\"5 s\",\"6 s\",\"\",\"6 s\",\"5 s\",\"6 s\",\"6 s\",\"\",\"\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"4 s\",\"4 s\",\"6 s\",\"6 s\",\"6 s\",\"4 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"\",\"6 s\",\"5 s\",\"6 s\",\"5 s\",\"\",\"6 s\",\"5 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"5 s\",\"6 s\",\"6 s\",\"\",\"5 s\",\"\",\"\",\"6 s\",\"5 s\",\"6 s\",\"5 s\",\"\",\"\",\"5 s\",\"5 s\",\"5 s\",\"6 s\",\"5 s\",\"5 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"5 s\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"6 s\",\"5 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"\",\"\",\"6 s\",\"6 s\",\"\",\"\",\"\",\"5 s\",\"6 s\",\"\",\"6 s\",\"6 s\",\"\",\"6 s\",\"6 s\",\"6 s\",\"\",\"\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"5 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"7 s\",\"6 s\",\"5 s\",\"6 s\",\"5 s\",\"6 s\",\"5 s\",\"6 s\",\"5 s\",\"5 s\",\"5 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"6 s\",\"7 s\",\"6 s\",\"7 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"7 s\",\"7 s\",\"6 s\",\"\",\"6 s\",\"\",\"6 s\",\"\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"7 s\",\"6 s\",\"\",\"7 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"7 s\",\"\",\"7 s\",\"7 s\",\"6 s\",\"6 s\",\"6 s\",\"5 s\",\"7 s\",\"\",\"\",\"7 s\",\"5 s\",\"6 s\",\"6 s\",\"5 s\",\"6 s\",\"\",\"7 s\",\"\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"\",\"6 s\",\"\",\"7 s\",\"\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"7 s\",\"6 s\",\"5 s\",\"7 s\",\"\",\"\",\"\",\"6 s\",\"6 s\",\"6 s\",\"7 s\",\"7 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"7 s\",\"6 s\",\"7 s\",\"6 s\",\"\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"\",\"7 s\",\"7 s\",\"6 s\",\"\",\"6 s\",\"5 s\",\"7 s\",\"6 s\",\"7 s\",\"6 s\",\"7 s\",\"7 s\",\"6 s\",\"5 s\",\"6 s\",\"6 s\",\"7 s\",\"6 s\",\"\",\"5 s\",\"\",\"5 s\",\"7 s\",\"6 s\",\"6 s\",\"\",\"\",\"6 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"5 s\",\"\",\"6 s\",\"6 s\",\"7 s\",\"6 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"\",\"\",\"\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"\",\"7 s\",\"6 s\",\"\",\"7 s\",\"\",\"\",\"6 s\",\"7 s\",\"5 s\",\"5 s\",\"\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"6 s\",\"7 s\",\"7 s\",\"6 s\",\"6 s\",\"\",\"6 s\",\"6 s\",\"7 s\",\"7 s\",\"\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"5 s\",\"6 s\",\"7 s\",\"\",\"7 s\",\"6 s\",\"\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"6 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"\",\"6 s\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"\",\"\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"\",\"\",\"6 s\",\"7 s\",\"\",\"6 s\",\"\",\"6 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"5 s\",\"6 s\",\"7 s\",\"7 s\",\"5 s\",\"6 s\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"5 s\",\"6 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"6 s\",\"\",\"\",\"7 s\",\"\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"6 s\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"6 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"6 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"7 s\",\"\",\"7 s\",\"7 s\",\"7 s\",\"\",\"7 s\",\"\",\"8 s\",\"7 s\",\"7 s\",\"\",\"8 s\",\"7 s\",\"7 s\",\"8 s\",\"8 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"8 s\",\"7 s\",\"7 s\",\"\",\"7 s\",\"\",\"8 s\",\"6 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"7 s\",\"8 s\",\"\",\"7 s\",\"7 s\",\"7 s\",\"\",\"7 s\",\"\",\"7 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"7 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"6 s\",\"8 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"7 s\",\"8 s\",\"\",\"8 s\",\"8 s\",\"7 s\",\"6 s\",\"6 s\",\"7 s\",\"8 s\",\"7 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"7 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"7 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"6 s\",\"8 s\",\"6 s\",\"6 s\",\"8 s\",\"6 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"7 s\",\"6 s\",\"8 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"6 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"7 s\",\"7 s\",\"8 s\",\"7 s\",\"7 s\",\"7 s\",\"8 s\",\"8 s\",\"\",\"6 s\",\"8 s\",\"6 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"6 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"7 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"7 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"6 s\",\"6 s\",\"8 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"6 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"7 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"6 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"6 s\",\"8 s\",\"8 s\",\"7 s\",\"7 s\",\"8 s\",\"7 s\",\"7 s\",\"8 s\",\"7 s\",\"7 s\",\"7 s\",\"8 s\",\"8 s\",\"9 s\",\"7 s\",\"7 s\",\"7 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"9 s\",\"7 s\",\"9 s\",\"7 s\",\"8 s\",\"7 s\",\"8 s\",\"9 s\",\"9 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"\",\"9 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"9 s\",\"7 s\",\"7 s\",\"8 s\",\"8 s\",\"7 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"9 s\",\"8 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"9 s\",\"8 s\",\"9 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"9 s\",\"7 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"7 s\",\"8 s\",\"7 s\",\"7 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"9 s\",\"9 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"9 s\",\"8 s\",\"8 s\",\"9 s\",\"9 s\",\"8 s\",\"8 s\",\"9 s\",\"8 s\",\"8 s\",\"7 s\",\"7 s\",\"9 s\",\"8 s\",\"7 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"8 s\",\"9 s\",\"8 s\",\"\",\"9 s\",\"9 s\",\"8 s\",\"8 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"6 s\",\"6 s\",\"8 s\",\"6 s\",\"6 s\",\"9 s\",\"8 s\",\"8 s\",\"6 s\",\"6 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"7 s\",\"9 s\",\"9 s\",\"8 s\",\"\",\"8 s\",\"9 s\",\"9 s\",\"\",\"9 s\",\"6 s\",\"7 s\",\"8 s\",\"6 s\",\"7 s\",\"7 s\",\"9 s\",\"9 s\",\"7 s\",\"9 s\",\"7 s\",\"7 s\",\"6 s\",\"9 s\",\"7 s\",\"8 s\",\"8 s\",\"9 s\",\"7 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"7 s\",\"8 s\",\"9 s\",\"7 s\",\"7 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"7 s\",\"8 s\",\"9 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"8 s\",\"7 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"8 s\",\"7 s\",\"8 s\",\"9 s\",\"8 s\",\"7 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"9 s\",\"8 s\",\"7 s\",\"9 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"9 s\",\"8 s\",\"8 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"9 s\",\"9 s\",\"7 s\",\"8 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"9 s\",\"9 s\",\"8 s\",\"\",\"9 s\",\"8 s\",\"\",\"8 s\",\"9 s\",\"7 s\",\"9 s\",\"9 s\",\"9 s\",\"7 s\",\"7 s\",\"8 s\",\"9 s\",\"8 s\",\"9 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"9 s\",\"9 s\",\"7 s\",\"8 s\",\"9 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"7 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"8 s\",\"9 s\",\"9 s\",\"8 s\",\"8 s\",\"8 s\",\"9 s\",\"9 s\",\"7 s\",\"9 s\",\"7 s\",\"9 s\",\"8 s\",\"9 s\",\"7 s\",\"9 s\",\"9 s\",\"8 s\",\"8 s\",\"8 s\",\"7 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"7 s\",\"8 s\",\"8 s\",\"8 s\",\"9 s\",\"7 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"\",\"9 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"7 s\",\"9 s\",\"9 s\",\"9 s\",\"\",\"9 s\",\"9 s\",\"8 s\",\"\",\"9 s\",\"\",\"7 s\",\"8 s\",\"9 s\",\"9 s\",\"\",\"8 s\",\"\",\"9 s\",\"9 s\",\"7 s\",\"8 s\",\"7 s\",\"7 s\",\"9 s\",\"8 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"\",\"7 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"8 s\",\"8 s\",\"\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"10 s\",\"\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"10 s\",\"9 s\",\"10 s\",\"8 s\",\"\",\"9 s\",\"9 s\",\"10 s\",\"9 s\",\"10 s\",\"9 s\",\"10 s\",\"9 s\",\"8 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"7 s\",\"\",\"10 s\",\"10 s\",\"7 s\",\"9 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"8 s\",\"8 s\",\"10 s\",\"\",\"8 s\",\"\",\"8 s\",\"9 s\",\"10 s\",\"10 s\",\"\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"8 s\",\"\",\"10 s\",\"\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"8 s\",\"9 s\",\"8 s\",\"\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"8 s\",\"10 s\",\"8 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"9 s\",\"9 s\",\"10 s\",\"10 s\",\"8 s\",\"10 s\",\"10 s\",\"8 s\",\"9 s\",\"9 s\",\"\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"8 s\",\"9 s\",\"9 s\",\"10 s\",\"9 s\",\"\",\"9 s\",\"9 s\",\"9 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"9 s\",\"10 s\",\"8 s\",\"10 s\",\"\",\"10 s\",\"10 s\",\"10 s\",\"8 s\",\"10 s\",\"8 s\",\"10 s\",\"8 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"9 s\",\"8 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"9 s\",\"\",\"8 s\",\"10 s\",\"10 s\",\"9 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"8 s\",\"8 s\",\"10 s\",\"10 s\",\"8 s\",\"9 s\",\"8 s\",\"10 s\",\"10 s\",\"9 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"9 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"8 s\",\"8 s\",\"8 s\",\"8 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"9 s\",\"9 s\",\"10 s\",\"10 s\",\"9 s\",\"8 s\",\"10 s\",\"10 s\",\"8 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"8 s\",\"9 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"9 s\",\"10 s\",\"\",\"\",\"10 s\",\"9 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"9 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"9 s\",\"8 s\",\"8 s\",\"10 s\",\"9 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"8 s\",\"8 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"8 s\",\"8 s\",\"10 s\",\"10 s\",\"11 s\",\"10 s\",\"10 s\",\"11 s\",\"9 s\",\"10 s\",\"10 s\",\"\",\"10 s\",\"9 s\",\"\",\"9 s\",\"11 s\",\"10 s\",\"9 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"11 s\",\"10 s\",\"11 s\",\"10 s\",\"9 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"10 s\",\"9 s\",\"10 s\",\"10 s\",\"11 s\",\"10 s\",\"9 s\",\"\",\"11 s\",\"9 s\",\"10 s\",\"10 s\",\"9 s\",\"9 s\",\"10 s\",\"11 s\",\"10 s\",\"\",\"11 s\",\"10 s\",\"11 s\",\"10 s\",\"10 s\",\"10 s\",\"11 s\",\"10 s\",\"11 s\",\"10 s\",\"9 s\",\"9 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"9 s\",\"9 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"9 s\",\"8 s\",\"8 s\",\"8 s\",\"10 s\",\"9 s\",\"9 s\",\"9 s\",\"11 s\",\"11 s\",\"9 s\",\"10 s\",\"\",\"11 s\",\"\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"11 s\",\"10 s\",\"10 s\",\"11 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"10 s\",\"9 s\",\"\",\"9 s\",\"8 s\",\"9 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"10 s\",\"10 s\",\"11 s\",\"9 s\",\"9 s\",\"9 s\",\"10 s\",\"9 s\",\"10 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"8 s\",\"9 s\",\"9 s\",\"9 s\",\"8 s\",\"9 s\",\"9 s\",\"11 s\",\"11 s\",\"10 s\",\"\",\"11 s\",\"\",\"9 s\",\"11 s\",\"11 s\",\"10 s\",\"9 s\",\"9 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"9 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"9 s\",\"10 s\",\"10 s\",\"\",\"\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"9 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"\",\"10 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"9 s\",\"\",\"10 s\",\"10 s\",\"11 s\",\"\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"\",\"11 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"11 s\",\"10 s\",\"10 s\",\"11 s\",\"11 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"9 s\",\"11 s\",\"9 s\",\"11 s\",\"10 s\",\"9 s\",\"11 s\",\"10 s\",\"11 s\",\"10 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"\",\"11 s\",\"11 s\",\"9 s\",\"9 s\",\"9 s\",\"10 s\",\"9 s\",\"9 s\",\"11 s\",\"11 s\",\"10 s\",\"10 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"\",\"9 s\",\"11 s\",\"10 s\",\"9 s\",\"9 s\",\"10 s\",\"11 s\",\"10 s\",\"11 s\",\"9 s\",\"9 s\",\"11 s\",\"11 s\",\"10 s\",\"10 s\",\"11 s\",\"11 s\",\"10 s\",\"9 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"9 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"9 s\",\"11 s\",\"9 s\",\"11 s\",\"9 s\",\"10 s\",\"10 s\",\"10 s\",\"11 s\",\"10 s\",\"\",\"11 s\",\"10 s\",\"9 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"9 s\",\"9 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"9 s\",\"9 s\",\"9 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"9 s\",\"9 s\",\"9 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"9 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"9 s\",\"9 s\",\"\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"\",\"10 s\",\"10 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"\",\"11 s\",\"11 s\",\"10 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"10 s\",\"10 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"12 s\",\"12 s\",\"\",\"12 s\",\"10 s\",\"11 s\",\"11 s\",\"10 s\",\"10 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"\",\"11 s\",\"11 s\",\"\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"12 s\",\"11 s\",\"11 s\",\"12 s\",\"\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"12 s\",\"12 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"\",\"11 s\",\"11 s\",\"12 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"10 s\",\"11 s\",\"\",\"11 s\",\"11 s\",\"\",\"10 s\",\"10 s\",\"12 s\",\"12 s\",\"11 s\",\"11 s\",\"10 s\",\"12 s\",\"11 s\",\"12 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"12 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"\",\"12 s\",\"12 s\",\"10 s\",\"11 s\",\"\",\"10 s\",\"11 s\",\"11 s\",\"12 s\",\"11 s\",\"12 s\",\"11 s\",\"12 s\",\"\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"10 s\",\"11 s\",\"11 s\",\"\",\"11 s\",\"12 s\",\"10 s\",\"10 s\",\"12 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"11 s\",\"10 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"11 s\",\"12 s\",\"11 s\",\"12 s\",\"10 s\",\"11 s\",\"10 s\",\"10 s\",\"12 s\",\"10 s\",\"12 s\",\"11 s\",\"\",\"12 s\",\"10 s\",\"10 s\",\"10 s\",\"12 s\",\"12 s\",\"9 s\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"9 s\",\"9 s\",\"9 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"\",\"12 s\",\"11 s\",\"\",\"12 s\",\"9 s\",\"11 s\",\"9 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"10 s\",\"\",\"10 s\",\"10 s\",\"10 s\",\"9 s\",\"12 s\",\"9 s\",\"12 s\",\"12 s\",\"11 s\",\"\",\"12 s\",\"11 s\",\"11 s\",\"11 s\",\"12 s\",\"12 s\",\"11 s\",\"\",\"9 s\",\"12 s\",\"9 s\",\"9 s\",\"12 s\",\"10 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"\",\"12 s\",\"12 s\",\"10 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"10 s\",\"12 s\",\"12 s\",\"\",\"12 s\",\"10 s\",\"10 s\",\"12 s\",\"11 s\",\"12 s\",\"\",\"12 s\",\"11 s\",\"12 s\",\"11 s\",\"12 s\",\"\",\"11 s\",\"11 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"\",\"12 s\",\"10 s\",\"12 s\",\"12 s\",\"12 s\",\"10 s\",\"11 s\",\"12 s\",\"10 s\",\"12 s\",\"10 s\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"11 s\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"10 s\",\"\",\"12 s\",\"12 s\",\"12 s\",\"10 s\",\"12 s\",\"10 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"10 s\",\"11 s\",\"10 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"\",\"11 s\",\"11 s\",\"10 s\",\"12 s\",\"10 s\",\"10 s\",\"10 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"10 s\",\"11 s\",\"11 s\",\"11 s\",\"10 s\",\"12 s\",\"11 s\",\"11 s\",\"12 s\",\"12 s\",\"10 s\",\"12 s\",\"10 s\",\"12 s\",\"12 s\",\"11 s\",\"10 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"10 s\",\"12 s\",\"12 s\",\"10 s\",\"10 s\",\"11 s\",\"\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"11 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"10 s\",\"10 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"10 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"11 s\",\"10 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"10 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"10 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"10 s\",\"11 s\",\"12 s\",\"10 s\",\"12 s\",\"10 s\",\"12 s\",\"10 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"10 s\",\"11 s\",\"10 s\",\"12 s\",\"\",\"10 s\",\"11 s\",\"12 s\",\"10 s\",\"10 s\",\"11 s\",\"\",\"12 s\",\"12 s\",\"12 s\",\"10 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"11 s\",\"11 s\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"13 s\",\"11 s\",\"11 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"11 s\",\"11 s\",\"12 s\",\"12 s\",\"\",\"12 s\",\"\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"13 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"\",\"13 s\",\"12 s\",\"12 s\",\"13 s\",\"13 s\",\"11 s\",\"11 s\",\"13 s\",\"12 s\",\"12 s\",\"\",\"11 s\",\"11 s\",\"12 s\",\"13 s\",\"12 s\",\"13 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"12 s\",\"\",\"13 s\",\"12 s\",\"\",\"10 s\",\"10 s\",\"10 s\",\"12 s\",\"13 s\",\"12 s\",\"12 s\",\"12 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"10 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"13 s\",\"12 s\",\"12 s\",\"13 s\",\"13 s\",\"13 s\",\"12 s\",\"12 s\",\"12 s\",\"13 s\",\"12 s\",\"12 s\",\"12 s\",\"13 s\",\"10 s\",\"12 s\",\"11 s\",\"10 s\",\"10 s\",\"11 s\",\"11 s\",\"\",\"\",\"13 s\",\"11 s\",\"13 s\",\"11 s\",\"13 s\",\"13 s\",\"11 s\",\"13 s\",\"\",\"13 s\",\"12 s\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"12 s\",\"11 s\",\"11 s\",\"13 s\",\"12 s\",\"11 s\",\"12 s\",\"12 s\",\"\",\"13 s\",\"13 s\",\"\",\"13 s\",\"12 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"12 s\",\"12 s\",\"13 s\",\"12 s\",\"12 s\",\"13 s\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"12 s\",\"\",\"12 s\",\"13 s\",\"13 s\",\"\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"12 s\",\"13 s\",\"13 s\",\"12 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"12 s\",\"12 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"13 s\",\"\",\"12 s\",\"12 s\",\"13 s\",\"12 s\",\"11 s\",\"\",\"13 s\",\"11 s\",\"13 s\",\"12 s\",\"\",\"12 s\",\"13 s\",\"11 s\",\"11 s\",\"11 s\",\"11 s\",\"13 s\",\"11 s\",\"\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"13 s\",\"12 s\",\"\",\"\",\"11 s\",\"13 s\",\"11 s\",\"11 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"12 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"12 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"12 s\",\"\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"12 s\",\"\",\"12 s\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"\",\"13 s\",\"13 s\",\"\",\"13 s\",\"12 s\",\"12 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"12 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"13 s\",\"\",\"\",\"13 s\",\"12 s\",\"\",\"13 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"12 s\",\"13 s\",\"12 s\",\"12 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"13 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"\",\"13 s\",\"\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"13 s\",\"\",\"13 s\",\"\",\"13 s\",\"\"],\"datasets\":[{\"label\":\"Requêtes Simultanées\",\"borderColor\":\"rgba(0, 128, 255, 1)\",\"fill\":false,\"data\":[0,0,0,0,0,0,0,0,0,1,4,8,7,0,5,2,3,6,0,0,0,0,2,0,0,4,2,9,3,7,8,13,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,16,10,8,15,12,20,13,0,0,0,25,0,11,14,10,5,13,14,7,29,25,33,27,27,30,29,0,33,14,17,25,22,12,18,28,21,25,28,0,33,28,33,0,27,29,0,0,29,66,0,19,33,33,28,33,71,34,23,74,33,75,71,32,0,73,26,72,44,33,69,33,30,37,31,34,0,38,0,75,41,0,78,69,66,44,77,33,35,0,77,49,75,78,77,79,37,0,51,51,48,78,0,41,81,31,79,0,53,77,77,78,78,39,44,65,81,52,81,48,45,62,77,63,54,61,55,79,64,68,79,48,83,77,78,79,82,0,82,0,82,76,0,0,80,74,78,81,82,68,81,81,82,77,80,75,81,82,57,81,83,79,66,0,82,82,80,72,81,83,64,68,78,80,73,78,69,83,79,74,0,75,75,79,79,77,82,81,80,57,81,0,78,77,0,78,77,0,78,81,58,81,82,79,81,82,59,82,0,0,76,81,82,81,0,81,0,80,60,82,80,73,81,79,92,82,79,76,0,0,82,81,80,82,76,0,81,81,77,80,76,81,88,80,87,126,0,83,112,129,79,84,88,82,102,100,120,84,120,99,119,131,98,121,81,132,123,133,127,124,82,119,77,134,0,133,0,134,0,135,0,143,140,80,0,128,83,134,84,0,147,81,83,0,0,79,97,147,131,138,128,148,80,81,132,0,156,0,81,166,168,144,83,131,170,135,171,149,178,82,177,0,147,118,151,161,157,159,177,167,159,0,95,130,160,146,0,178,78,132,164,177,154,162,165,0,84,0,177,107,198,87,117,204,146,80,209,179,81,203,133,120,156,0,78,119,0,212,0,213,118,154,213,80,0,122,178,214,216,75,81,76,134,0,0,182,161,178,178,183,126,0,184,189,78,177,184,185,202,0,0,189,83,193,0,193,202,194,0,195,190,196,208,0,121,197,212,182,206,0,171,199,0,193,211,211,200,154,0,0,165,191,105,0,212,197,211,198,204,90,210,209,203,214,133,202,198,215,204,206,145,203,215,210,95,207,207,209,214,0,215,204,143,79,95,214,146,79,208,145,0,95,0,203,207,202,96,89,211,144,147,109,157,213,168,100,0,203,211,179,212,217,214,77,169,80,180,213,85,113,85,211,133,109,86,210,0,167,125,0,212,215,196,201,81,138,213,212,215,105,172,175,0,147,212,168,176,211,140,0,217,0,0,0,206,214,141,211,204,213,207,142,176,197,214,180,152,181,210,213,125,216,127,213,206,202,214,225,126,210,215,0,112,211,113,212,115,178,0,216,152,0,203,92,215,92,0,227,214,218,203,161,207,216,218,211,173,217,189,183,196,213,212,201,227,0,0,214,214,209,213,209,216,212,216,216,208,112,222,200,218,205,227,0,206,214,208,213,0,115,0,151,207,102,156,103,0,203,202,126,201,213,211,214,203,136,214,212,201,137,219,179,213,201,210,212,214,184,206,168,198,212,200,206,206,214,207,212,209,209,200,216,200,217,0,95,0,178,0,178,0,201,0,0,199,0,129,0,206,212,200,200,214,220,106,0,175,106,207,215,116,177,208,210,208,205,198,218,181,212,208,202,211,0,208,208,205,208,0,210,207,203,207,212,207,212,0,205,215,206,143,207,203,214,151,208,204,216,223,226,152,206,208,153,177,216,162,221,207,208,163,164,0,212,0,215,218,219,222,219,216,213,207,214,218,219,0,219,204,220,219,237,208,227,226,216,226,221,0,220,228,209,208,227,0,219,214,218,225,0,0,214,221,217,220,224,204,184,186,217,237,221,187,226,223,218,224,219,200,221,231,220,226,0,219,215,224,212,0,228,215,226,217,220,220,224,203,210,226,219,0,204,0,0,217,203,227,216,0,0,211,215,204,234,205,219,223,259,220,230,222,236,231,201,206,221,221,220,223,231,230,228,217,232,231,221,211,216,217,239,199,242,203,246,247,216,246,247,234,248,0,0,253,238,0,0,0,212,217,0,261,241,0,225,209,242,0,0,242,238,223,207,214,239,240,213,217,215,225,204,240,225,239,215,277,231,213,228,208,239,202,262,212,221,213,241,243,223,240,240,214,229,263,236,264,228,240,242,229,239,231,243,240,253,230,244,239,240,231,200,266,268,234,0,238,0,253,0,238,243,238,233,270,238,0,277,239,253,228,242,244,275,0,280,275,238,243,242,203,282,0,0,275,207,241,238,208,222,0,276,0,238,218,228,230,0,216,0,281,0,219,218,232,230,248,238,220,245,204,253,254,238,0,227,242,255,260,239,261,243,247,242,253,285,247,215,282,0,0,0,242,224,243,263,287,225,242,257,226,242,247,264,264,227,266,267,0,206,268,277,281,276,281,0,262,281,276,280,247,292,0,281,293,264,0,262,209,282,264,292,267,293,285,248,208,265,266,279,267,0,207,0,205,295,232,267,0,0,210,220,291,296,270,218,229,286,292,297,215,0,223,232,281,218,227,295,297,291,267,298,0,0,0,239,263,299,298,272,0,292,235,0,291,0,0,240,276,204,206,0,295,307,242,277,296,300,244,230,295,311,209,237,0,260,264,297,304,0,211,303,304,296,313,291,223,224,267,298,0,314,230,0,263,316,312,300,314,229,299,226,231,294,293,297,240,286,296,294,298,290,294,292,296,294,312,299,293,297,0,229,301,298,262,294,295,295,0,0,295,299,310,294,0,291,298,300,295,296,0,0,237,297,0,243,0,261,244,297,292,311,297,300,290,309,293,201,226,294,312,201,240,301,304,253,303,202,218,239,297,298,298,252,238,0,0,290,0,310,299,300,302,277,241,296,296,314,311,232,316,301,297,301,225,221,297,295,236,311,233,233,281,283,296,311,319,301,226,306,310,238,299,214,239,311,310,315,237,238,281,297,282,310,313,239,297,313,0,313,283,281,0,314,0,306,311,312,0,306,286,317,306,305,226,314,304,316,304,286,309,0,302,0,303,241,285,319,302,242,284,295,0,293,280,293,0,316,0,307,313,304,298,292,276,306,305,290,281,282,294,301,299,304,292,292,293,280,304,301,309,302,287,311,298,310,292,307,317,293,307,312,294,226,294,305,311,313,314,318,301,306,306,316,299,316,0,299,307,313,219,222,297,314,296,287,315,314,318,316,321,322,299,309,298,295,304,313,322,316,317,316,304,309,302,302,328,316,319,315,319,237,299,238,232,319,239,317,299,316,317,309,232,319,317,317,299,322,316,237,328,297,323,317,321,339,301,337,319,305,336,298,288,302,339,288,294,302,341,348,0,238,308,238,358,297,303,322,238,317,358,309,291,317,299,355,298,313,314,354,313,318,356,303,304,299,305,304,314,317,307,291,311,319,313,351,321,244,215,311,216,217,240,242,243,327,343,320,314,319,311,300,319,296,332,317,333,343,301,249,301,312,322,318,343,333,344,309,312,299,314,314,255,344,345,305,301,315,312,294,320,299,301,316,341,328,345,307,311,300,290,329,324,333,345,296,346,296,299,308,320,347,348,336,315,306,333,0,351,303,343,317,340,336,343,338,339,353,301,280,333,338,302,291,341,340,347,359,336,356,281,343,339,340,307,354,364,354,335,360,298,349,341,335,350,295,338,358,353,358,296,343,293,293,310,344,339,307,353,350,357,362,364,315,348,334,355,347,318,338,299,353,317,358,358,344,361,359,357,320,361,350,342,314,315,363,343,304,339,342,340,350,349,342,355,344,352,365,353,327,364,350,0,362,359,363,352,338,359,367,365,367,367,370,348,246,249,363,246,248,367,358,360,250,251,368,372,362,360,376,360,369,355,356,301,370,393,356,0,358,373,366,0,394,257,302,343,258,301,301,393,353,301,359,301,316,260,358,312,353,326,358,300,342,367,360,365,370,342,272,295,370,313,307,364,392,369,313,351,358,357,300,320,355,349,369,359,399,345,352,297,360,363,400,363,333,405,358,365,404,329,401,317,301,299,364,323,298,385,392,363,394,299,321,354,344,307,300,365,329,312,355,313,393,402,363,288,370,402,324,350,304,313,325,292,316,316,401,394,306,322,359,365,331,400,314,293,323,316,399,402,302,0,406,318,0,318,365,293,367,359,401,297,294,300,410,289,410,288,305,303,309,401,400,309,304,400,338,395,370,358,409,405,364,298,341,354,400,370,404,393,397,333,403,314,402,407,339,296,336,413,392,301,366,300,400,327,393,297,406,370,315,315,319,273,423,364,400,370,0,404,410,403,324,371,275,314,319,331,365,311,424,372,405,314,406,0,404,351,370,363,404,410,343,374,302,425,399,405,0,384,406,334,0,361,0,275,321,398,369,0,348,0,350,418,304,362,304,310,425,327,425,400,334,404,403,359,362,404,408,344,370,399,362,357,407,414,362,424,425,426,363,363,427,428,0,314,404,426,406,408,368,409,401,407,405,365,424,361,367,426,344,405,353,353,299,300,341,0,413,439,428,421,311,435,438,435,402,441,441,442,426,439,444,443,441,349,442,0,391,439,439,426,339,340,441,442,443,362,341,439,439,411,438,348,0,413,362,454,442,443,443,449,438,351,442,466,439,442,465,295,0,438,438,314,366,466,424,468,466,462,452,454,406,0,438,383,469,454,449,358,456,441,438,457,290,306,445,0,290,0,289,405,447,451,0,398,456,456,467,456,453,450,462,468,467,470,469,471,467,473,442,469,451,454,473,474,469,338,0,474,0,472,454,473,454,339,405,343,0,409,464,474,471,474,453,301,468,301,473,468,477,359,398,414,471,465,322,480,466,301,413,398,0,406,468,472,467,465,471,465,478,404,466,466,473,467,407,477,473,481,343,443,405,465,359,0,414,403,423,483,477,426,477,401,477,485,362,464,472,469,466,361,425,477,348,471,0,464,481,482,335,439,335,483,335,484,479,413,470,459,474,424,486,0,486,423,483,479,425,335,489,363,491,436,492,492,426,482,357,0,343,461,478,357,359,473,478,450,471,354,301,477,496,303,355,343,484,457,442,367,492,499,486,451,441,359,360,500,482,450,358,359,343,345,498,482,386,483,367,430,491,465,391,303,481,464,360,496,430,466,491,427,498,464,437,505,504,365,466,506,334,393,365,467,492,466,497,480,495,433,421,486,0,0,465,403,402,481,463,457,455,480,373,450,410,481,406,458,478,482,465,483,452,407,463,450,484,487,370,481,462,392,352,350,477,411,394,482,479,477,483,482,468,483,478,393,334,352,481,478,471,470,354,358,473,479,486,478,480,487,401,501,477,0,479,362,0,366,488,483,360,351,477,479,476,497,478,488,471,353,358,463,481,478,362,477,362,478,480,489,478,363,0,489,398,484,479,367,367,480,489,476,0,496,485,489,463,480,477,486,473,486,477,376,391,489,481,490,490,486,488,402,400,489,405,494,487,487,493,496,402,345,345,346,479,368,368,409,488,494,398,481,0,495,0,497,498,496,496,408,409,401,350,491,484,482,484,356,418,358,358,482,404,0,438,350,398,484,490,469,496,479,480,489,402,404,424,493,401,481,489,403,491,484,424,484,497,498,483,343,411,411,363,343,406,360,492,497,441,0,490,0,387,487,492,486,361,389,490,502,477,491,495,496,487,404,488,402,486,473,485,494,402,484,496,494,497,505,472,478,475,402,483,502,0,0,475,489,491,496,496,477,497,430,462,457,481,473,485,0,480,430,478,485,474,425,425,389,0,485,460,460,0,482,477,481,442,433,443,427,428,478,0,484,379,379,383,394,394,473,489,463,485,489,404,367,424,425,425,429,421,430,479,422,497,461,430,501,475,368,421,488,465,479,391,431,392,399,400,432,486,428,477,427,405,423,432,406,0,477,476,399,401,401,468,401,403,475,475,464,467,474,425,498,395,470,470,476,409,0,403,400,470,438,441,479,412,479,477,441,412,403,476,468,483,477,469,488,412,475,492,463,478,482,406,496,478,482,476,413,489,496,413,486,474,483,414,394,404,485,485,495,440,454,479,404,488,405,479,375,400,391,406,393,485,503,503,429,504,0,427,490,379,462,478,496,402,396,399,464,401,394,484,401,404,497,403,425,395,405,486,487,402,400,404,395,404,414,399,410,441,401,486,404,405,404,398,485,413,406,430,399,400,401,402,438,404,404,409,409,399,399,403,400,404,423,451,409,426,406,402,476,398,443,0,400,467,409,392,398,429,0,401,426,397,395,397,397,473,397,395,432,432,0,457,404,404,400,485,403,398,391,412,441,0,492,493,469,406,398,401,401,0,410,410,452,457,410,408,410,404,404,406,407,498,497,454,477,422,421,397,432,428,0,433,492,406,407,457,468,399,406,486,410,410,0,407,440,408,410,409,407,0,420,420,0,393,397,492,490,409,427,410,421,432,0,419,421,482,416,406,419,422,0,419,420,419,423,404,423,411,461,413,429,431,496,401,416,461,401,423,415,400,0,401,424,426,425,462,406,419,399,479,419,479,407,0,422,421,0,485,462,427,429,495,421,483,431,424,433,484,484,423,424,422,421,421,411,413,411,482,427,429,419,415,422,454,415,478,423,0,429,431,478,405,0,478,400,397,430,427,430,400,431,0,497,427,424,427,423,406,445,416,418,0,476,425,447,450,427,474,421,469,462,425,453,425,453,429,431,430,433,398,424,407,428,451,402,496,497,391,496,426,427,0,424,479,479,480,391,358,383,424,427,433,390,391,358,359,424,383,384,403,361,419,420,358,363,365,427,396,365,361,429,357,422,422,0,392,477,0,361,405,481,407,361,363,363,360,357,395,429,430,403,361,474,0,477,477,484,407,363,411,397,363,398,0,419,405,407,405,388,339,426,0,414,356,415,418,425,439,361,398,359,338,358,336,405,403,344,420,342,420,418,358,422,386,357,365,388,362,388,362,389,0,346,366,441,344,359,360,400,359,470,364,360,0,360,459,459,363,395,361,0,357,481,390,481,356,0,395,398,357,420,340,361,0,359,463,408,339,310,465,397,358,465,426,469,404,273,272,274,405,398,398,360,423,361,359,421,397,490,0,360,343,361,486,360,470,352,359,351,414,274,407,345,353,396,308,344,469,398,472,358,367,397,365,400,344,274,400,258,0,405,404,473,416,486,487,489,365,338,361,348,350,392,407,342,344,353,404,343,488,424,424,428,489,360,428,430,361,359,477,338,485,427,349,424,483,254,360,432,485,361,252,252,479,388,362,482,491,400,0,252,362,352,251,410,350,490,349,394,352,206,252,390,496,479,211,423,210,212,498,352,209,352,394,0,208,398,348,389,398,258,403,498,211,206,352,430,376,427,212,495,212,209,296,401,210,494,206,359,208,290,210,211,211,496,406,353,477,211,479,353,479,351,344,489,409,339,215,478,490,480,208,0,488,485,208,488,489,485,0,215,389,212,481,212,213,322,490,293,424,424,497,284,207,287,0,206,211,207,490,403,405,409,417,213,215,403,213,209,209,180,405,398,207,402,206,207,212,208,208,408,423,494,338,208,0,198,0,198,189,351,198,176,428,212,213,214,0,174,210,200,174,174,493,404,178,200,339,0,404,407,196,159,212,167,214,212,425,385,346,0,173,187,0,479,481,481,207,167,235,343,363,167,166,173,176,176,166,177,480,346,423,347,360,167,253,362,166,177,166,367,212,253,165,254,346,254,176,482,240,489,482,485,490,493,0,0,167,403,163,403,163,161,403,160,0,178,208,163,179,210,179,211,405,405,161,207,404,208,342,0,160,174,0,164,362,180,174,163,174,176,175,428,432,162,432,206,164,167,164,208,164,194,0,272,162,159,0,0,165,167,164,163,169,167,163,0,160,375,159,160,361,0,169,158,169,159,0,160,168,175,160,342,212,0,127,159,159,163,358,162,159,0,363,206,114,208,490,0,116,483,173,357,0,428,163,496,496,486,494,118,497,0,0,159,115,115,164,118,365,161,159,365,0,0,404,164,398,400,162,102,101,167,165,99,99,101,162,104,0,351,0,162,160,111,160,0,351,99,104,163,118,98,354,118,99,100,165,105,105,104,163,100,163,367,101,0,165,87,104,89,120,0,0,102,120,118,103,156,85,0,104,94,213,150,102,193,109,100,111,117,111,109,0,99,100,169,92,111,0,105,159,115,350,99,351,0,108,105,351,112,90,104,71,72,115,108,108,304,115,112,109,70,0,365,0,428,74,72,428,79,106,79,425,77,0,81,81,0,109,343,348,94,87,89,92,0,76,0,154,76,83,80,208,163,178,0,171,163,0,0,104,253,0,49,0,86,52,50,99,0,367,69,365,365,45,45,27,46,46,111,52,0,30,31,28,26,30,29,30,105,0,29,172,28,0,30,0,43,30,32,32,31,32,32,33,30,29,52,0,46,28,0,29,30,172,74,82,34,0,94,0,33,0,0,9,92,25,5,4,8,8,31,0,8,9,8,11,7,9,10,11,12,6,0,10,0,8,0],\"pointRadius\":0}]}}}}",
        "payloadType": "json",
        "x": 400,
        "y": 640,
        "wires": [
            [
                "ec2c74ecb56f96d0"
            ]
        ]
    },
    {
        "id": "d71e90762e0615fb",
        "type": "function",
        "z": "2305a910a579de42",
        "name": "Ajoute le chemin du fichier ",
        "func": "var now = new Date();\nvar jour = (\"0\" + now.getDate()).slice(-2);\nvar mois = (\"0\" + (now.getMonth() + 1)).slice(-2);\n\n// Récupérer le nom de fichier de msg.payload.nameFile, ou utiliser \"default\" si absent\nvar nameFile = msg.payload.gatling.Original.nameFile || \"default\";\n// Remplacer les caractères interdits dans le nom de fichier par des underscores\nnameFile = nameFile.replace(/[\\\\/:\"*?<>|]+/g, \"_\");\n\n// Construire le chemin du fichier PDF\nmsg.filePath = \"/home/NodeRed/pdf/\" + nameFile + \"_\" + msg.payload.gatling.Original.time + \"Min_\" + jour + mois + \"js.pdf\";\n\n// Construire les chemins des fichiers graphiques\nmsg.graphPath = {\n    volt: {\n        complet: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.gatling.Original.time + \"Min_\" + jour + mois + \"VOLTjs.png\",\n        cpu: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.gatling.Original.time + \"Min_\" + jour + mois + \"vcpujs.png\",\n        ram: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.gatling.Original.time + \"Min_\" + jour + mois + \"vramjs.png\",\n        proc: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.gatling.Original.time + \"Min_\" + jour + mois + \"vprocjs.png\",\n        temp: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.gatling.Original.time + \"Min_\" + jour + mois + \"vtempjs.png\",\n        watt: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.gatling.Original.time + \"Min_\" + jour + mois + \"vwattjs.png\"\n    },\n    nidus: {\n        complet: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.gatling.Original.time + \"Min_\" + jour + mois + \"NIDUSjs.png\",\n        cpu: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.gatling.Original.time + \"Min_\" + jour + mois + \"ncpujs.png\",\n        ram: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.gatling.Original.time + \"Min_\" + jour + mois + \"nramjs.png\",\n        proc: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.gatling.Original.time + \"Min_\" + jour + mois + \"nprocjs.png\",\n        temp: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.gatling.Original.time + \"Min_\" + jour + mois + \"ntempjs.png\"\n    },\n    gatling: {\n        complet: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.gatling.Original.time + \"Min_\" + jour + mois + \"gatlingjs.png\",\n        pass: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.gatling.Original.time + \"Min_\" + jour + mois + \"passjs.png\",\n        bySeconds: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.gatling.Original.time + \"Min_\" + jour + mois + \"bySecondsjs.png\",\n        //proc: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"nproc.png\",\n        //temp: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"ntemp.png\"\n    },\n    json :{\n        complet: \"/home/NodeRed/json/\" + nameFile + \"_\" + msg.payload.gatling.Original.time + \"Min_\" + jour + mois + \"Complet.json\",\n    }\n};\nmsg.topic = \"original\"\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 600,
        "wires": [
            [
                "9dc4211140a524a8",
                "e2a4c0beef813f44",
                "4cd75f8778386f53",
                "f7eca6932718e584",
                "badeec2e58c9b77c",
                "0d6a1735c75d67c1",
                "467b6180ebc0d310"
            ]
        ]
    },
    {
        "id": "f989647b25742081",
        "type": "function",
        "z": "2305a910a579de42",
        "name": "Moyenne",
        "func": "// Tableaux de données d'entrée\nvar wattData = msg.payload.Watt;\nvar voltData = msg.payload.volt;\nvar nidusData = msg.payload.nidus;\n\n// Fonction pour calculer la moyenne d'un tableau de données\nfunction calculateAverage(data) {\n    var sum = 0;\n    for (var i = 0; i < data.length; i++) {\n        sum += parseFloat(data[i]);\n    }\n    return (sum / data.length).toFixed(2);\n}\n\n// Calcul des moyennes\nvar moyenne = {\n    \"Watt\": calculateAverage(wattData),\n    \"volt/benchmark/cpu\": calculateAverage(voltData['volt/benchmark/cpu']),\n    \"volt/benchmark/ram\": calculateAverage(voltData['volt/benchmark/ram']),\n    \"volt/benchmark/processes\": calculateAverage(voltData['volt/benchmark/processes']),\n    \"volt/benchmark/temp\": calculateAverage(voltData['volt/benchmark/temp']),\n    \"nidus/benchmark/cpu\": calculateAverage(nidusData['nidus/benchmark/cpu']),\n    \"nidus/benchmark/ram\": calculateAverage(nidusData['nidus/benchmark/ram']),\n    \"nidus/benchmark/processes\": calculateAverage(nidusData['nidus/benchmark/processes']),\n    \"nidus/benchmark/temp\": calculateAverage(nidusData['nidus/benchmark/temp']),\n    \"bySeconds\": calculateAverage(wattData)\n};\n\nmsg.moyenne = moyenne;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 820,
        "wires": [
            [
                "36b7ffd5cce2713e"
            ]
        ]
    },
    {
        "id": "36b7ffd5cce2713e",
        "type": "change",
        "z": "2305a910a579de42",
        "name": "Organise Payload-Topic",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "moyenne",
                "tot": "msg",
                "dc": true
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "moyenne",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 1060,
        "wires": [
            [
                "467b6180ebc0d310"
            ]
        ]
    },
    {
        "id": "6b25be8c80cc93af",
        "type": "join",
        "z": "2305a910a579de42",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 990,
        "y": 1040,
        "wires": [
            [
                "c0e27eb1a2ce7a0f",
                "15a684c2c6e4a5e2",
                "15dc6a608ad06b62",
                "273195657a8c3864",
                "1b08b1c8be542ae4",
                "396999da5f268ca5",
                "4f540a68671a9890"
            ]
        ]
    },
    {
        "id": "4f540a68671a9890",
        "type": "change",
        "z": "2305a910a579de42",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "stats",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1410,
        "y": 1120,
        "wires": [
            [
                "0278807ed305654d"
            ]
        ]
    },
    {
        "id": "76e81b58c55dcdac",
        "type": "comment",
        "z": "4efe9327eddfa7d6",
        "name": "File Browser",
        "info": "1) Update the default folder in the Init node\n2) Update the default folder in the Reset node as well\n3) You can duplicate the Reset nodes and use them as saved shortcuts\n4) Check the Convert Timestamps function node if you want to see your dates in a different format. I just used the Javascript toISOString format.\n5) The Graph button can read any CSV file which have any number of values, but the first column always contains a timestamp column with javascript timestamp of the data point.",
        "x": 390,
        "y": 200,
        "wires": []
    },
    {
        "id": "8788237b76b8154d",
        "type": "inject",
        "z": "4efe9327eddfa7d6",
        "name": "Init",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "change",
        "payload": "/home/NodeRed/pdf",
        "payloadType": "str",
        "x": 390,
        "y": 260,
        "wires": [
            [
                "0c332b7decbd7b5b"
            ]
        ]
    },
    {
        "id": "b42e4bb5046ffe74",
        "type": "ui_button",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "group": "98aec2bd3951d32a",
        "order": 4,
        "width": 4,
        "height": 2,
        "passthru": true,
        "label": "Refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "refresh",
        "payload": "/home/NodeRed/pdf",
        "payloadType": "str",
        "topic": "change",
        "topicType": "str",
        "x": 400,
        "y": 340,
        "wires": [
            [
                "0c332b7decbd7b5b"
            ]
        ]
    },
    {
        "id": "bce18adad9c50e36",
        "type": "ui_template",
        "z": "4efe9327eddfa7d6",
        "group": "98aec2bd3951d32a",
        "name": "",
        "order": 1,
        "width": 20,
        "height": 8,
        "format": "<div ng-bind-html=\"msg.payload\" height=\"400\" style=\"height: 400px;\"><br/>\n</div>\n<style>\n/* Applique des styles aux liens */\na[href] {\ncolor: #d93347; /* Couleur du lien */\ntext-decoration: none; /* Pas de soulignement */\n}\n\n/* Applique des styles au survol des liens */\na[href]:hover {\ncolor: #cb0505; /* Couleur du lien au survol */\ntext-decoration: underline; /* Soulignement au survol */\n}\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1240,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "423ffca808ea3872",
        "type": "template",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<table width=\"100%\">\n    <tr><th>Nom de Fichier</th><th>Taille</th><th>Créer</th><th>Changer</th></tr>\n    {{#payload}}\n        <tr>\n            <td><a href=\"/download?filename={{name}}\" target=\"blank\">{{fname}}</a></td>\n            <td>{{stat.size}}</td>\n            <td>{{stat.created}}</td>\n            <td>{{stat.changed}}</td>\n        </tr>\n    {{/payload}}\n</table>\n",
        "output": "str",
        "x": 1220,
        "y": 340,
        "wires": [
            [
                "bce18adad9c50e36"
            ]
        ]
    },
    {
        "id": "f57d5c06d0426cba",
        "type": "function",
        "z": "4efe9327eddfa7d6",
        "name": "Convert timestamps",
        "func": "// Fonction pour formater une date en fonction de la timezone de Zurich\nfunction formatToZurichTimezone(date) {\n    var options = {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n        timeZone: 'Europe/Zurich'\n    };\n    return new Intl.DateTimeFormat('fr-CH', options).format(date);\n}\n\n// Parcourir chaque élément dans le tableau \"payload\" du message\nfor (var i = 0; i < msg.payload.length; i++) {\n    // Convertir les propriétés de date/heure dans l'objet \"stat\" au format de Zurich\n    msg.payload[i].stat.created = formatToZurichTimezone(new Date(msg.payload[i].stat.created));\n    msg.payload[i].stat.changed = formatToZurichTimezone(new Date(msg.payload[i].stat.changed));\n    msg.payload[i].stat.accessed = formatToZurichTimezone(new Date(msg.payload[i].stat.accessed));\n    msg.payload[i].stat.statusChanged = formatToZurichTimezone(new Date(msg.payload[i].stat.statusChanged));\n\n    // Extraire le nom de fichier à partir de la propriété \"name\" et mettre à jour \"fname\"\n    msg.payload[i].fname = msg.payload[i].name.replace(/^.*(\\\\|\\/|\\:)/, '');\n}\n\nreturn msg; // Renvoyer le message modifié\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 340,
        "wires": [
            [
                "423ffca808ea3872"
            ]
        ]
    },
    {
        "id": "545960dc8eb29385",
        "type": "http in",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "url": "/download",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 480,
        "y": 400,
        "wires": [
            [
                "4f79970fdbe9e2f0"
            ]
        ]
    },
    {
        "id": "c7b2aabc927399c7",
        "type": "http response",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1270,
        "y": 400,
        "wires": []
    },
    {
        "id": "4f79970fdbe9e2f0",
        "type": "function",
        "z": "4efe9327eddfa7d6",
        "name": "Get the file name",
        "func": "msg.filename = msg.req.query.filename;\nmsg.contentdisposition = \"attachment; filename=\\\"\" + msg.req.query.filename.replace(/^.*(\\\\|\\/|\\:)/, '') + \"\\\"\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 730,
        "y": 400,
        "wires": [
            [
                "96773d0c6d42a73f"
            ]
        ],
        "outputLabels": [
            "Folder selected",
            "File selected"
        ]
    },
    {
        "id": "96773d0c6d42a73f",
        "type": "file in",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "filename": "",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 920,
        "y": 400,
        "wires": [
            [
                "e9789c02912797cd"
            ]
        ]
    },
    {
        "id": "e9789c02912797cd",
        "type": "change",
        "z": "4efe9327eddfa7d6",
        "name": "Set Headers",
        "rules": [
            {
                "t": "set",
                "p": "headers",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "headers.content-type",
                "pt": "msg",
                "to": "text/csv",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "headers.Content-Disposition",
                "pt": "msg",
                "to": "contentdisposition",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1090,
        "y": 400,
        "wires": [
            [
                "c7b2aabc927399c7"
            ]
        ]
    },
    {
        "id": "0c332b7decbd7b5b",
        "type": "function",
        "z": "4efe9327eddfa7d6",
        "name": "Folder handling",
        "func": "// Récupérer la valeur de la variable \"folder\" depuis le contexte\nlet folder = context.get(\"folder\");\n// Si la variable \"folder\" n'est pas définie, l'initialiser avec \"/\"\nif (folder === undefined) {\n    folder = \"/\";\n    context.set(\"folder\", folder); // Enregistrer la valeur dans le contexte\n}\n\n// Récupérer la valeur de la variable \"hidden\" depuis le contexte\nlet hidden = context.get(\"hidden\");\n// Si la variable \"hidden\" n'est pas définie, l'initialiser avec \"false\"\nif (hidden === undefined) {\n    hidden = false;\n    context.set(\"hidden\", hidden); // Enregistrer la valeur dans le contexte\n}\n\n// Si le sujet du message est \"up\"\nif (msg.topic === \"up\") {\n    var the_arr = folder.split('/');\n    the_arr.pop(); // Supprimer le dernier élément du tableau\n    folder = the_arr.join('/'); // Rejoindre les éléments du tableau pour former le nouveau chemin\n    context.set(\"folder\", folder); // Enregistrer le nouveau chemin dans le contexte\n}\n\n// Si le sujet du message est \"change\"\nif (msg.topic === \"change\") {\n    folder = msg.payload; // Mettre à jour la valeur de \"folder\" avec le contenu du champ \"payload\"\n    context.set(\"folder\", folder); // Enregistrer la nouvelle valeur dans le contexte\n}\n\n// Si le sujet du message est \"hidden\"\nif (msg.topic === \"hidden\") {\n    hidden = msg.payload; // Mettre à jour la valeur de \"hidden\" avec le contenu du champ \"payload\"\n    context.set(\"hidden\", hidden); // Enregistrer la nouvelle valeur dans le contexte\n}\n\n// Construire un objet JSON contenant les valeurs actuelles de \"folder\" et \"hidden\"\nmsg.payload = { \"start\": folder, \"hidden\": hidden };\n\nreturn msg; // Renvoyer le message modifié\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 340,
        "wires": [
            [
                "1d6f7764b3b14c66"
            ]
        ]
    },
    {
        "id": "1d6f7764b3b14c66",
        "type": "fs-file-lister",
        "z": "4efe9327eddfa7d6",
        "name": "Files",
        "start": "/home/pi",
        "pattern": "*.*",
        "folders": "*",
        "hidden": false,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": true,
        "showWarnings": false,
        "x": 790,
        "y": 340,
        "wires": [
            [
                "f57d5c06d0426cba"
            ]
        ]
    },
    {
        "id": "57844c6054085878",
        "type": "pdfmake",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "outputType": "base64",
        "inputProperty": "payload",
        "options": "{}",
        "outputProperty": "payload",
        "x": 2780,
        "y": 900,
        "wires": [
            [
                "5e761ba621a647cb"
            ]
        ]
    },
    {
        "id": "5e761ba621a647cb",
        "type": "file",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "filename": "filepath",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "base64",
        "x": 2660,
        "y": 820,
        "wires": [
            [
                "547f9ffe327b1d40"
            ]
        ]
    },
    {
        "id": "5b775a4a75097f5b",
        "type": "function",
        "z": "4efe9327eddfa7d6",
        "name": "Ajoute le chemin du fichier ",
        "func": "var now = new Date();\nvar jour = (\"0\" + now.getDate()).slice(-2);\nvar mois = (\"0\" + (now.getMonth() + 1)).slice(-2);\n\n// Récupérer le nom de fichier de msg.payload.nameFile, ou utiliser \"default\" si absent\nvar nameFile = msg.payload.nameFile || \"default\";\n// Remplacer les caractères interdits dans le nom de fichier par des underscores\nnameFile = nameFile.replace(/[\\\\/:\"*?<>|]+/g, \"_\");\n\n// Construire le chemin du fichier PDF\nmsg.filePath = \"/home/NodeRed/pdf/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \".pdf\";\n\n// Construire les chemins des fichiers graphiques\nmsg.graphPath = {\n    volt: {\n        complet: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"VOLT.png\",\n        cpu: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"vcpu.png\",\n        ram: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"vram.png\",\n        proc: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"vproc.png\",\n        temp: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"vtemp.png\",\n        watt: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"vwatt.png\"\n    },\n    nidus: {\n        complet: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"NIDUS.png\",\n        cpu: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"ncpu.png\",\n        ram: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"nram.png\",\n        proc: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"nproc.png\",\n        temp: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"ntemp.png\"\n    },\n    gatling: {\n        complet: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"gatling.png\",\n        pass: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"pass.png\",\n        bySeconds: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"bySeconds.png\",\n        //proc: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"nproc.png\",\n        //temp: \"/home/NodeRed/png/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"ntemp.png\"\n    },\n    json :{\n        complet: \"/home/NodeRed/json/\" + nameFile + \"_\" + msg.payload.time + \"Min_\" + jour + mois + \"Complet.json\",\n    }\n};\nif (msg.payload.user_gatling <= 0){\n    global.set('gatling', false);\n}else{\n    global.set('gatling', true);\n}\nglobal.set('original', msg.payload);\nglobal.set('path', msg.graphPath);\n// Renvoyer le message modifié\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 820,
        "wires": [
            [
                "6c7141a86eeb0a72"
            ]
        ]
    },
    {
        "id": "540f1571a665eeb1",
        "type": "ui_form",
        "z": "4efe9327eddfa7d6",
        "name": "Configuration du Test",
        "label": "",
        "group": "98aec2bd3951d32a",
        "order": 2,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Nom du Fichier pdf",
                "value": "nameFile",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Temps de mesure en minutes",
                "value": "time",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Stress test Volt",
                "value": "stressVolt",
                "type": "checkbox",
                "required": true,
                "rows": null
            },
            {
                "label": "Stress test Nidus",
                "value": "stressNidus",
                "type": "checkbox",
                "required": true,
                "rows": null
            },
            {
                "label": "Temps de Stress test en minutes",
                "value": "timeStress",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Nombre d'utilisateur",
                "value": "user_gatling",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Ventilateur activée ?",
                "value": "flow",
                "type": "checkbox",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "nameFile": "",
            "time": "",
            "stressVolt": false,
            "stressNidus": false,
            "timeStress": "",
            "user_gatling": "",
            "flow": false
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": false,
        "className": "",
        "x": 140,
        "y": 820,
        "wires": [
            [
                "b9e3c634e5e5a408"
            ]
        ]
    },
    {
        "id": "c098b73f5c524369",
        "type": "function",
        "z": "4efe9327eddfa7d6",
        "name": "Créer le contenue du fichier",
        "func": "//Formatage du ventilateur\nvar ventilateur = global.get(\"original.flow\") ? \"Ventilateur activé\" : \"Ventilateur non-activé\";\n// Formatage de la date de début\nvar timestamp = msg.payload.gatling.Assertion.start;\n\n// Créez un objet Date à partir du timestamp\nvar date = new Date(timestamp);\n\n// Définissez le format de date souhaité\nvar options = {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit'\n};\n\n// Formatez la date en une chaîne de caractères\nvar formattedDate = date.toLocaleDateString(\"fr-FR\", options);\n\n\n// Création des données pour le rapport PDF\nmsg.payload = {\n    header: function (currentPage, pageCount, pageSize) {\n        return [\n            {\n                text: \"Tobler Cyril\", // Votre nom\n                alignment: \"left\",\n                fontSize: 10,\n                margin: [15, 10, 0, 0]\n            },\n            {\n                text: \"Nom du projet : Confuse T-Rex\", // Nom de votre projet\n                alignment: \"center\",\n                fontSize: 10,\n                margin: [0, 0, 0, 0]\n            }\n        ];\n    },\n    footer: function (currentPage, pageCount) {\n        return {\n            columns: [\n                {\n                    text: currentPage.toString() + \" / \" + pageCount, // Numéro de page actuel / Nombre total de pages\n                    alignment: \"left\",\n                    fontSize: 10,\n                    margin: [15, 0, 0, 10]\n                },\n                {\n                    text: new Date().toLocaleDateString(\"fr-FR\"), // Date actuelle au format français\n                    alignment: \"right\",\n                    fontSize: 10,\n                    margin: [0, 0, 15, 10]\n                }\n            ],\n            margin: [0, 0, 0, 10]\n        };\n    },\n    content: [\n        {\n            text: \"Rapport d'utilisation : \" + global.get(\"original.nameFile\") , // Titre du rapport\n            style: \"header\",\n            margin: [0, 10, 0, 0]\n        },\n        {\n            text: \"Les valeurs sont des moyennes sur les \" + Math.floor(msg.delay / (1000 * 60)) + \" dernières minutes\" // Informations sur les valeurs\n        }, \n        {\n            text: ventilateur\n        },\n        {\n            text: \"Nidus :\", // Section Nidus\n            style: \"header2\"\n        },\n        {\n            //style: 'tableExample',\n            table: {\n                body: [\n                    ['CPU :', msg.payload.moyenne[\"nidus/benchmark/cpu\"] + \" % d'utilisation\"],\n                    ['RAM :', msg.payload.moyenne[\"nidus/benchmark/ram\"] + \" % d'utilisation (\" + (msg.payload.moyenne[\"nidus/benchmark/ram\"] * (4 / 100)).toFixed(2) + \"Go/4Go)\"],\n                    ['Nombre de processus :', msg.payload.moyenne[\"nidus/benchmark/processes\"]],\n                    ['Température CPU :', msg.payload.moyenne[\"nidus/benchmark/temp\"] + \"° Celcius\"],\n                    \n                ]\n            },\n            layout: 'noBorders'\n        },\n        {\n            image: 'nidusImage', // Image de Nidus\n            margin: [0, 20],\n            width: 500,\n            pageBreak: 'after', // Saut de page après l'image\n        },\n        {\n            text: \"Volt\", // Section Volt\n            style: \"header2\"\n        },\n        {\n            //style: 'tableExample',\n            table: {\n                body: [\n                    ['CPU :', msg.payload.moyenne[\"volt/benchmark/cpu\"] + \" % d'utilisation\"],\n                    ['RAM :', msg.payload.moyenne[\"volt/benchmark/ram\"] + \" % d'utilisation (\" + (msg.payload.moyenne[\"volt/benchmark/ram\"] * (4 / 100)).toFixed(2) + \"Go/4Go)\"],\n                    ['Nombre de processus :', msg.payload.moyenne[\"volt/benchmark/processes\"]],\n                    ['Température CPU :', msg.payload.moyenne[\"volt/benchmark/temp\"] + \"° Celcius\"],\n                    ['MilliWatt :', msg.payload.moyenne.Watt + \"mW\"],\n                    ['Consommation moyenne par requête :', ((msg.payload.moyenne.Watt - 418) / msg.payload.gatling.Stats.stats.meanNumberOfRequestsPerSecond.total).toFixed(2) + \"mW par requête\"],// La valeur de 418mW est une valeur optenue par un long test sans charges\n                ]\n            },\n            layout: 'noBorders'\n        },\n        {\n            image: 'voltImage', // Image de Volt\n            margin: [0, 20],\n            width: 500,\n        },\n        {\n            image: 'wattImage', // Image Watt de Volt\n            width: 500,\n            margin: [0, 20],\n            pageBreak: 'after', // Saut de page après l'image\n        },\n        {\n            text: \"Gatling\", // Section Gatling\n            style: \"header2\"\n        },\n        {\n        table: {\n            body: [\n                ['Nom de la simulation :', msg.payload.gatling.Assertion.simulation],\n                ['Commencée :', formattedDate],\n                ['Nombre d\\'utilisateur :', msg.original.user_gatling],\n                ['Nombre de requête par utilisateur', '6'],\n                ['Durée prévu :', msg.payload.gatling.Original.time / 60 + \"Min\"],\n            ]\n        },\n        layout: 'noBorders'\n        },\n        {\n            image: 'gatlingImage', // Image Gatling\n            margin: [0, 20],\n            width: 500,\n        },\n        {\n            image: 'gatlingGraphComplete', // Image graphique complet Gatling\n            margin: [0, 20],\n            width: 500,\n        }, \n        {\n            image: 'gatlingGraphBySeconds', // Image graphique complet Gatling\n            margin: [0, 20],\n            width: 500,\n        },\n    ],\n    images: {\n        voltImage: 'data:image/png;base64,' + msg.payload.voltGraph.toString('base64'), // Utilisation du buffer pour l'image Volt\n        wattImage: 'data:image/png;base64,' + msg.payload.wattGraph.toString('base64'),  // Utilisation du buffer pour l'image Watt de Volt\n        nidusImage: 'data:image/png;base64,' + msg.payload.nidusGraph.toString('base64'),  // Utilisation du buffer pour l'image Nidus\n        gatlingImage: 'data:image/png;base64,' + msg.payload.gatlingGraph.toString('base64'),  // Utilisation du buffer pour l'image Gatling\n        gatlingGraphComplete: 'data:image/png;base64,' + msg.payload.gatlingGraphComplete.toString('base64'),  // Utilisation du buffer pour l'image Gatling\n        gatlingGraphBySeconds: 'data:image/png;base64,' + msg.payload.gatlingGraphBySeconds.toString('base64'),  // Utilisation du buffer pour l'image Gatling\n    },\n    styles: {\n        header: {\n            fontSize: 22,\n            bold: true,\n            margin: [0, 30, 0, 0]\n        },\n        header2: {\n            fontSize: 18,\n            bold: true,\n            margin: [0, 20, 0, 0]\n        }\n    }\n};\n\nreturn msg; // Renvoyer le message\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2440,
        "y": 880,
        "wires": [
            [
                "57844c6054085878"
            ]
        ]
    },
    {
        "id": "6c7141a86eeb0a72",
        "type": "function",
        "z": "4efe9327eddfa7d6",
        "name": "Activate",
        "func": "var delay = msg.payload.time !== null ? msg.payload.time * 60 * 1000 : 30000; // Convertir en millisecondes si nécessaire\ndelay = delay + 30000; // Ajout d'un délai de 30seconde du au fais que gatling à besoin de temps pour cloturer se requete \n// Créer les objets de message pour chaque sortie\nvar msg1 = {\n    cmd: \"subscribe\",\n    topic: \"/\",\n    complete: true,\n    out:1,\n    delay: delay, // Délai en ms\n    filepath: msg.filePath,\n    graphPath: msg.graphPath\n};\n\nvar msg2 = {\n    cmd: \"subscribe\",\n    topic: \"volt/benchmark/cpu\",\n    out: 2,\n    delay: delay, // Délai en ms\n    filepath: msg.filePath,\n    graphPath: msg.graphPath\n};\n\nvar msg3 = {\n    cmd: \"subscribe\",\n    topic: \"volt/benchmark/ram\",\n    out: 3,\n    delay: delay, // Délai en ms\n    filepath: msg.filePath,\n    graphPath: msg.graphPath\n};\n\nvar msg4 = {\n    cmd: \"subscribe\",\n    topic: \"volt/benchmark/processes\",\n    out: 4,\n    delay: delay, // Délai en ms\n    filepath: msg.filePath,\n    graphPath: msg.graphPath\n};\n\nvar msg5 = {\n    cmd: \"subscribe\",\n    topic: \"volt/benchmark/temp\",\n    out: 5,\n    delay: delay, // Délai en ms\n    filepath: msg.filePath,\n    graphPath: msg.graphPath\n};\n\n\n\nvar msg6 = {\n    cmd: \"subscribe\",\n    topic: \"nidus/benchmark/cpu\",\n    out: 6,\n    delay: delay, // Délai en ms\n    filepath: msg.filePath,\n    graphPath: msg.graphPath\n};\n\nvar msg7 = {\n    cmd: \"subscribe\",\n    topic: \"nidus/benchmark/ram\",\n    out: 7,\n    delay: delay, // Délai en ms\n    filepath: msg.filePath,\n    graphPath: msg.graphPath\n};\n\nvar msg8 = {\n    cmd: \"subscribe\",\n    topic: \"nidus/benchmark/processes\",\n    out: 8,\n    delay: delay, // Délai en ms\n    filepath: msg.filePath,\n    graphPath: msg.graphPath\n};\nvar msg9 = {\n    cmd: \"subscribe\",\n    topic: \"nidus/benchmark/temp\",\n    out: 9,\n    delay: delay, // Délai en ms\n    filepath: msg.filePath,\n    graphPath: msg.graphPath\n};\n\n\n// Envoyer les messages aux sorties correspondantes\n// Les messages seront envoyés dans l'ordre de 0 à 6, correspondant aux sorties activées\n// Assurez-vous que le nœud \"Function\" a sept sorties activées pour recevoir ces messages\nnode.send([msg1, msg2, msg3, msg4, msg5, msg6, msg7,msg8,msg9]);\n",
        "outputs": 9,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 820,
        "wires": [
            [
                "8af8423efea9ddb1",
                "4e1f31fad214f33b"
            ],
            [
                "b1b8130e398756ca"
            ],
            [
                "491ac7e5eaf72d27"
            ],
            [
                "5285f63fecf05197"
            ],
            [
                "f6ad44ee261f85d3"
            ],
            [
                "188877c9e806c63d"
            ],
            [
                "684c512e2a5c182d"
            ],
            [
                "805923fe6a7f5446"
            ],
            [
                "a4207f61c01409ae"
            ]
        ]
    },
    {
        "id": "8af8423efea9ddb1",
        "type": "delay",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "pauseType": "delayv",
        "timeout": "15",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 800,
        "y": 540,
        "wires": [
            [
                "b23b72bdafcfec77"
            ]
        ]
    },
    {
        "id": "3b2d5495eee09468",
        "type": "join",
        "z": "4efe9327eddfa7d6",
        "name": "Values_Volt",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "4",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1250,
        "y": 640,
        "wires": [
            [
                "ef4c6689f4d85d6e"
            ]
        ]
    },
    {
        "id": "898f5af40a6f301e",
        "type": "join",
        "z": "4efe9327eddfa7d6",
        "name": "Moyennes",
        "mode": "custom",
        "build": "object",
        "property": "moyenne",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1450,
        "y": 780,
        "wires": [
            [
                "1f958f9a86a8b7f3"
            ]
        ]
    },
    {
        "id": "547f9ffe327b1d40",
        "type": "link out",
        "z": "4efe9327eddfa7d6",
        "name": "End_PDF",
        "mode": "link",
        "links": [
            "d1596ab5e1c2eb39",
            "61ea260f9c0b6ef6",
            "a9426f1080d32302"
        ],
        "x": 2775,
        "y": 820,
        "wires": []
    },
    {
        "id": "d1596ab5e1c2eb39",
        "type": "link in",
        "z": "4efe9327eddfa7d6",
        "name": "From_PDF",
        "links": [
            "547f9ffe327b1d40",
            "9281f0402caa9ee5",
            "9c0192ec2aea8a29"
        ],
        "x": 305,
        "y": 340,
        "wires": [
            [
                "b42e4bb5046ffe74"
            ]
        ]
    },
    {
        "id": "163498b7cb11fff0",
        "type": "function",
        "z": "4efe9327eddfa7d6",
        "name": "MiseAJourDelay",
        "func": "// Vérifier si msg.delay est défini\nif (msg.delay !== undefined) {\n    if(msg.delay === 1){\n        return null;\n    }\n    // Convertir msg.delay en nombre (si c'est une chaîne)\n    const currentDelay = parseFloat(msg.delay);\n\n    // Vérifier si currentDelay est un nombre valide\n    if (!isNaN(currentDelay)) {\n        // Soustraire 250 de currentDelay, mais s'assurer que le résultat est positif\n        const newDelay = Math.max(currentDelay - 250, 0);\n\n        // Mettre à jour msg.delay avec la nouvelle valeur\n        msg.delay = newDelay;\n\n        // Si le nouveau délai est 0, ne rien retourner\n        if (newDelay === 0) {\n            msg.delay = 1;\n            msg.originalDelay = 1;\n            return msg;\n        } else {\n            // Sinon, retourner le message avec le nouveau délai\n            return msg;\n        }\n    } else {\n        // msg.delay n'est pas un nombre valide\n        return null;\n    }\n} else {\n    // msg.delay n'est pas défini\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 660,
        "wires": [
            [
                "7384e15840545f66",
                "4aea1fc1bcdf2eca",
                "08cc2130cbe70613",
                "3b4b155085ef3d5f"
            ]
        ]
    },
    {
        "id": "7384e15840545f66",
        "type": "delay",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "pauseType": "delay",
        "timeout": "250",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 550,
        "y": 660,
        "wires": [
            [
                "163498b7cb11fff0"
            ]
        ]
    },
    {
        "id": "4e1f31fad214f33b",
        "type": "function",
        "z": "4efe9327eddfa7d6",
        "name": "CopyDelay",
        "func": "// Vérifier si msg.delay est défini\nif (msg.delay !== undefined) {\nmsg.originalDelay = msg.delay;\nreturn msg;\n}else{\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 720,
        "wires": [
            [
                "163498b7cb11fff0"
            ]
        ]
    },
    {
        "id": "e078bd3601176f5e",
        "type": "function",
        "z": "4efe9327eddfa7d6",
        "name": "Gatling line chart Time_Response",
        "func": "// Création du graphique\nvar chartData = {\n    \n    type: 'line', // Utilisez un graphique de type \"line\"\n    options: {\n        scales: {\n            yAxes: [{\n                ticks: {\n                    fontSize: 40\n                }\n            }],\n            xAxes: [{\n                ticks: {\n                    fontSize: 40\n                }\n            }]\n        },\n        dataset :{\n            labels: {\n                // This more specific font property overrides the global property\n                fontSize: 40,\n                fontColor: 'black',\n                family: 'Arial'\n            },\n            font: {\n                size: 40\n            },\n        },\n        title: {\n            labels: {\n                // This more specific font property overrides the global property\n                fontSize: 50,\n                fontColor: 'black',\n                family: 'Arial'\n            },\n            font: {\n                size: 50\n            },\n            display: true,\n            text: 'Comparaison des performances', // Titre du graphique,\n            fontSize: 50 \n        },\n        legend: {\n            labels: {\n                // This more specific font property overrides the global property\n                fontSize: 40,\n                fontColor: 'black',\n                family: 'Arial'\n            },\n            font: {\n                size: 40\n            },\n            display: true // Affichez la légende du graphique\n        },\n        chartArea: {\n            backgroundColor: '#d3d7dd' // Couleur de fond du graphique\n        },\n        plugins: {\n            datalabels: {\n                display: false // Désactivez l'affichage des étiquettes de données\n            }\n        }\n    },\n    data: {\n        labels: msg.payload.timeResponse.data.labels,\n\n        datasets: msg.payload.timeResponse.data.datasets,\n    }\n};\n\nmsg.payload = chartData; // Attribuez les données du graphique au message\nmsg.topic = \"CompletGatling\";\nmsg.graphPath = global.get('path') || 0;\nreturn msg; // Renvoyez le message\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 420,
        "wires": [
            [
                "e00e6050954b12cc"
            ]
        ]
    },
    {
        "id": "e00e6050954b12cc",
        "type": "chart-image",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "width": "1920",
        "height": "1920",
        "x": 1950,
        "y": 420,
        "wires": [
            [
                "83886d4509dbd810",
                "6cab62619e956707"
            ]
        ]
    },
    {
        "id": "83886d4509dbd810",
        "type": "file",
        "z": "4efe9327eddfa7d6",
        "name": "Gatling Complet",
        "filename": "graphPath.gatling.complet",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2180,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "e94970a6e7189ece",
        "type": "chart-image",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "width": "1920",
        "height": "1920",
        "x": 1890,
        "y": 620,
        "wires": [
            [
                "2b1a46f50b9b8f65",
                "6cab62619e956707"
            ]
        ]
    },
    {
        "id": "2b1a46f50b9b8f65",
        "type": "file",
        "z": "4efe9327eddfa7d6",
        "name": "volt.complet",
        "filename": "graphPath.volt.complet",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2170,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "4803ca31c981aadf",
        "type": "chart-image",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "width": "1920",
        "height": "1920",
        "x": 1890,
        "y": 660,
        "wires": [
            [
                "9cc7951febda6115",
                "6cab62619e956707"
            ]
        ]
    },
    {
        "id": "9cc7951febda6115",
        "type": "file",
        "z": "4efe9327eddfa7d6",
        "name": "volt.complet",
        "filename": "graphPath.nidus.complet",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2170,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "0c33016c67bedcbe",
        "type": "function",
        "z": "4efe9327eddfa7d6",
        "name": "Nidus Line Chart",
        "func": "// Données reçues du flux précédent\nvar rawData = msg.payload;\nvar delayInSeconds = msg.delay / 1000; // Conversion en secondes\nmsg.topic = \"NidusLineChart\";\n// Extraction des données nécessaires\nvar nidusCpuData = rawData[\"nidus/benchmark/cpu\"];\nvar nidusRamData = rawData[\"nidus/benchmark/ram\"];\nvar nidusTempData = rawData[\"nidus/benchmark/temp\"];\n\n// Création du graphique\nvar chartData = {\n    type: 'line',  // Changement du type de graphique en \"line\"\n    options: {\n        scales: {\n            yAxes: [{\n                ticks: {\n                    fontSize: 40\n                }\n            }],\n            xAxes: [{\n                ticks: {\n                    fontSize: 40\n                }\n            }]\n        },\n        title: {\n            display: true,\n            text: 'Comparaison des performances',\n            fontSize: 50 // Définir la taille de la police ici\n        },\n        legend: {\n            display: true,\n            labels: {\n                // This more specific font property overrides the global property\n                fontSize: 40,\n                fontColor: 'black',\n                family: 'Arial'\n            },\n            font: {\n                size: 30\n            },\n        },\n        chartArea: {\n            backgroundColor: '#d3d7dd'\n        },\n        plugins: {\n            datalabels: {\n                display: false  // Désactiver l'affichage des étiquettes de données\n            }\n        }\n    },\n    data: {\n        labels: Array.from({ length: nidusCpuData.length }, (_, i) => {\n            // Calculer le délai réel entre chaque valeur en millisecondes\n            var realDelay = msg.delay / (nidusCpuData.length - 1);\n\n            // Calculer le temps en millisecondes à partir de l'index\n            var timeMillis = i * realDelay;\n\n            // Convertir le temps en minutes et secondes\n            var minutes = Math.floor(timeMillis / 60000); // 60000 millisecondes équivalent à 1 minute\n            var seconds = ((timeMillis % 60000) / 1000).toFixed(0);\n\n            // Créer le label en fonction de la durée\n            if (minutes === 0) {\n                return seconds + ' s'; // Temps en secondes si inférieur à 1 minute\n            } else {\n                return minutes + ' min ' + seconds + ' s'; // Temps en minute:secondes si supérieur à 1 minute\n            }\n        }),\n\n\n        datasets: [\n            \n            {\n                label: \"Nidus CPU en %\",\n                borderColor: '#aa5500',\n                fill: false,\n                data: nidusCpuData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Nidus RAM en %\",\n                borderColor: '#ffff00',\n                fill: false,\n                data: nidusRamData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Température de Nidus en °C\",\n                borderColor: 'rgba(255, 0, 0, 1)',\n                fill: false,\n                data: nidusTempData,\n                pointRadius: 0,\n            }\n        ]\n    }\n};\n\nmsg.payload = chartData;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 660,
        "wires": [
            [
                "4803ca31c981aadf"
            ]
        ]
    },
    {
        "id": "903a317c6fc74f34",
        "type": "function",
        "z": "4efe9327eddfa7d6",
        "name": "Volt Line Chart",
        "func": "// Données reçues du flux précédent\nvar rawData = msg.payload;\nvar delayInSeconds = msg.delay / 1000; // Conversion en secondes\nmsg.topic = \"VoltLineChart\";\n// Extraction des données nécessaires\nvar voltCpuData = rawData[\"volt/benchmark/cpu\"];\nvar voltRamData = rawData[\"volt/benchmark/ram\"];\nvar voltTempData = rawData[\"volt/benchmark/temp\"];\n\n\n// Création du graphique\nvar chartData = {\n    type: 'line',  // Changement du type de graphique en \"line\"\n    options: {\n        scales: {\n            yAxes: [{\n                ticks: {\n                    fontSize: 40\n                }\n            }],\n            xAxes: [{\n                ticks: {\n                    fontSize: 40\n                }\n            }]\n        },\n        title: {\n            display: true,\n            text: 'Comparaison des performances',\n            fontSize: 50 \n        },\n        legend: {\n            display: true,\n            labels: {\n                // This more specific font property overrides the global property\n                fontSize: 40,\n                fontColor: 'black',\n                family: 'Arial'\n            },\n            font: {\n                size: 30\n            },\n        },\n        chartArea: {\n            backgroundColor: '#d3d7dd'\n        },\n        plugins: {\n            datalabels: {\n                display: false  // Désactiver l'affichage des étiquettes de données\n            }\n        }\n    },\n    data: {\n        labels: Array.from({ length: voltCpuData.length }, (_, i) => {\n            // Calculer le délai réel entre chaque valeur en millisecondes\n            var realDelay = msg.delay / (voltCpuData.length - 1);\n\n            // Calculer le temps en millisecondes à partir de l'index\n            var timeMillis = i * realDelay;\n\n            // Convertir le temps en minutes et secondes\n            var minutes = Math.floor(timeMillis / 60000); // 60000 millisecondes équivalent à 1 minute\n            var seconds = ((timeMillis % 60000) / 1000).toFixed(0);\n\n            // Créer le label en fonction de la durée\n            if (minutes === 0) {\n                return seconds + ' s'; // Temps en secondes si inférieur à 1 minute\n            } else {\n                return minutes + ' min ' + seconds + ' s'; // Temps en minute:secondes si supérieur à 1 minute\n            }\n        }),datasets: [\n            {\n                label: \"Volt CPU en %\",\n                borderColor: 'rgba(0, 128, 255, 1)',  // Couleur de la ligne (couleur froide pour Volt)\n                fill: false,  // Désactiver le remplissage sous la ligne\n                data: voltCpuData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Volt RAM en %\",\n                borderColor: 'rgba(0, 255, 128, 1)',\n                fill: false,\n                data: voltRamData,\n                pointRadius: 0,\n            },\n            {\n                label: \"Température Volt en °C\",\n                borderColor: 'rgba(0, 173, 0, 1)',\n                fill: false,\n                data: voltTempData,\n                pointRadius: 0,\n            },\n\n        ]\n    }\n};\n\nmsg.payload = chartData;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 620,
        "wires": [
            [
                "e94970a6e7189ece"
            ]
        ]
    },
    {
        "id": "fc9c5266878c89f0",
        "type": "function",
        "z": "4efe9327eddfa7d6",
        "name": "Commmandes de StressTest",
        "func": "const sshNidus = \"ssh tobby@nidus\"; \nconst sshVolt = \"ssh tobby@157.26.228.77\"; \n\n    var stressCommandsNidus;\n    var stressCommandsVolt;\n\n    if (msg.payload.stressNidus) {\n        var msg1 = {\n            payload : `stress-ng --cpu 2 --io 1 --timeout ${msg.payload.timeStress*60}s --cpu-load 100 --vm-bytes 3G`\n        };\n    }\n\n    if (msg.payload.stressVolt) {\n        var msg2 = {\n            payload: `ssh tobby@157.26.228.77 \\\"stress-ng --cpu 2 --io 1 --timeout ${msg.payload.timeStress*60}s --cpu-load 100 --vm-bytes 3G\\\"`\n        };\n    }\n    node.send([msg1, msg2]);\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 860,
        "wires": [
            [
                "e244a51e0170d44f"
            ],
            [
                "e244a51e0170d44f"
            ]
        ]
    },
    {
        "id": "e244a51e0170d44f",
        "type": "exec",
        "z": "4efe9327eddfa7d6",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 650,
        "y": 920,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "4aea1fc1bcdf2eca",
        "type": "ui_template",
        "z": "4efe9327eddfa7d6",
        "group": "98aec2bd3951d32a",
        "name": "ProgressBar",
        "order": 3,
        "width": 0,
        "height": 0,
        "format": "<style>\n    .custom-progress-bar .md-progress-linear-fill {\n        height: 20px;\n        /* Définissez la hauteur souhaitée ici */\n    }\n</style>\n\n<div layout=\"column\" layout-align=\"center center\">\n    <md-progress-linear class=\"md-accent custom-progress-bar\" md-mode=\"determinate\"\n        value=\"{{(msg.originalDelay - msg.delay) / msg.originalDelay * 100}}\"\n        ng-show=\"msg.delay !== undefined && msg.originalDelay !== undefined\"></md-progress-linear>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 550,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "d6a5be4cdffb06c8",
        "type": "join",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "8",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 2050,
        "y": 960,
        "wires": [
            [
                "260567470f14c245"
            ]
        ]
    },
    {
        "id": "1f958f9a86a8b7f3",
        "type": "change",
        "z": "4efe9327eddfa7d6",
        "name": "Organise Payload-Topic",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "moyenne",
                "tot": "msg",
                "dc": true
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "moyenne",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1370,
        "y": 1040,
        "wires": [
            [
                "d6a5be4cdffb06c8",
                "1e16d4086874cc8b",
                "c130a91f7800c3dd",
                "d9fb29b85089363a",
                "9eab68323d51cfbf",
                "0bb0e82698f40c60"
            ]
        ]
    },
    {
        "id": "de56573acae32c8a",
        "type": "change",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "complete",
                "pt": "msg",
                "to": "true",
                "tot": "bool",
                "dc": true
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "ChartComplete",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1760,
        "y": 780,
        "wires": [
            [
                "898f5af40a6f301e"
            ]
        ]
    },
    {
        "id": "27b232ada37fd3ee",
        "type": "change",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Moyenne_Graph",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2010,
        "y": 900,
        "wires": [
            [
                "f88ac5ad8b78703f"
            ]
        ]
    },
    {
        "id": "c130a91f7800c3dd",
        "type": "file in",
        "z": "4efe9327eddfa7d6",
        "name": "Read Graph Nidus Complet",
        "filename": "graphPath.nidus.complet",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1660,
        "y": 1280,
        "wires": [
            [
                "c270272018ea89bd"
            ]
        ]
    },
    {
        "id": "c270272018ea89bd",
        "type": "base64",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "action": "str",
        "property": "msg.payload",
        "x": 1880,
        "y": 1280,
        "wires": [
            [
                "d981b0eb901561e0"
            ]
        ]
    },
    {
        "id": "1e16d4086874cc8b",
        "type": "file in",
        "z": "4efe9327eddfa7d6",
        "name": "Read Graph Volt Complet",
        "filename": "graphPath.volt.complet",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1650,
        "y": 1160,
        "wires": [
            [
                "297db9a9a88a9873"
            ]
        ]
    },
    {
        "id": "297db9a9a88a9873",
        "type": "base64",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "action": "str",
        "property": "msg.payload",
        "x": 1880,
        "y": 1160,
        "wires": [
            [
                "a279310a5d88226d"
            ]
        ]
    },
    {
        "id": "a279310a5d88226d",
        "type": "change",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "voltGraph",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1870,
        "y": 1120,
        "wires": [
            [
                "0bb0e82698f40c60"
            ]
        ]
    },
    {
        "id": "d981b0eb901561e0",
        "type": "change",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "nidusGraph",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1870,
        "y": 1320,
        "wires": [
            [
                "0bb0e82698f40c60"
            ]
        ]
    },
    {
        "id": "9952e51f5e15510b",
        "type": "debug",
        "z": "4efe9327eddfa7d6",
        "name": "CATCH_ERROR",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 1680,
        "wires": []
    },
    {
        "id": "1d3a79fa0fdcee18",
        "type": "catch",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 180,
        "y": 1680,
        "wires": [
            [
                "9952e51f5e15510b"
            ]
        ]
    },
    {
        "id": "ab35bb6feb027402",
        "type": "join",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "6",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2010,
        "y": 700,
        "wires": [
            [
                "de56573acae32c8a"
            ]
        ]
    },
    {
        "id": "a66405c5a3211706",
        "type": "ina-sensor",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "handle": "173c4031bd3a25c0",
        "x": 290,
        "y": 500,
        "wires": [
            [
                "bc1d55ed79af7ab5"
            ],
            [
                "bc1d55ed79af7ab5"
            ]
        ]
    },
    {
        "id": "8afa10ccd77c128f",
        "type": "join",
        "z": "4efe9327eddfa7d6",
        "name": "Join_2",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 790,
        "y": 500,
        "wires": [
            [
                "78206b06b2470570"
            ]
        ]
    },
    {
        "id": "08cc2130cbe70613",
        "type": "function",
        "z": "4efe9327eddfa7d6",
        "name": "USE",
        "func": "msg.use = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 540,
        "wires": [
            [
                "8afa10ccd77c128f"
            ]
        ]
    },
    {
        "id": "7d09a32853eb286d",
        "type": "function",
        "z": "4efe9327eddfa7d6",
        "name": "MilliWatt",
        "func": "// Récupérer les valeurs de courant (mA) et de tension (V) depuis les propriétés msg.payload\nvar current_mA = msg.payload.miliamps;\nvar voltage_V = msg.payload.voltage;\n\n// Calculer la puissance en watts (W)\nvar power_W = (current_mA / 1000) * voltage_V;  // Convertir le courant en ampères\n\n// Vérifier si la tension est négative\nif (voltage_V < 0.5) {\n    // Si la tension est négative, ne rien faire et retourner le message inchangé\n    return null;\n}\n\n// Créer un nouvel objet msg avec la puissance en watts comme payload\nmsg.payload = power_W*1000;\nmsg.topic = \"Watt\";\n// Renvoyer le message modifié\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 500,
        "wires": [
            [
                "8afa10ccd77c128f"
            ]
        ]
    },
    {
        "id": "bc1d55ed79af7ab5",
        "type": "join",
        "z": "4efe9327eddfa7d6",
        "name": "Join_Amp_Volt",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 480,
        "y": 500,
        "wires": [
            [
                "7d09a32853eb286d"
            ]
        ]
    },
    {
        "id": "78206b06b2470570",
        "type": "switch",
        "z": "4efe9327eddfa7d6",
        "name": "DropWhenNotUse",
        "property": "use",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 970,
        "y": 500,
        "wires": [
            [
                "723bb67908155387"
            ],
            []
        ]
    },
    {
        "id": "b23b72bdafcfec77",
        "type": "join",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 1010,
        "y": 540,
        "wires": [
            [
                "721cae592a48e7e6"
            ]
        ]
    },
    {
        "id": "721cae592a48e7e6",
        "type": "function",
        "z": "4efe9327eddfa7d6",
        "name": "Rename",
        "func": "// Définir le sujet du message\nmsg.topic = \"Watt\";\n\n// Vérifier si le tableau payload existe et n'est pas vide\nif (msg.payload && Array.isArray(msg.payload) && msg.payload.length > 0) {\n    // Convertir les valeurs en chaînes de caractères en nombres entiers\n    var numericValues = msg.payload.map(function (value) {\n        return parseInt(value, 10); // 10 indique la base décimale\n    }).filter(function (value) {\n        return !isNaN(value); // Filtrer les valeurs non numériques\n    });\n\n    // Vérifier si des valeurs numériques ont été trouvées\n    if (numericValues.length > 0) {\n        // Calculer la somme des valeurs numériques dans le tableau\n        var sum = numericValues.reduce(function (acc, value) {\n            return acc + value;\n        }, 0);\n\n        // Calculer la moyenne en divisant la somme par le nombre d'éléments\n        var moyenne = sum / numericValues.length;\n\n        // Arrondir la moyenne à deux chiffres après la virgule et au multiple de 0.05 le plus proche\n        moyenne = Math.round(moyenne * 20) / 20;\n\n        // Ajouter la moyenne au message\n        msg.moyenne = moyenne.toFixed(2);\n    } else {\n        // Si aucune valeur numérique n'a été trouvée, définir la moyenne à 0\n        msg.moyenne = \"0.00\";\n    }\n} else {\n    // Si le tableau est vide ou n'existe pas, définir la moyenne à 0\n    msg.moyenne.volt.benchmark.cpu = \"0.00\";\n}\n\n// Renvoyer le message modifié\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 540,
        "wires": [
            [
                "8725c738156ee416",
                "898f5af40a6f301e",
                "b163b8b1f5f05f1b"
            ]
        ]
    },
    {
        "id": "723bb67908155387",
        "type": "change",
        "z": "4efe9327eddfa7d6",
        "name": "Set Payload Watt",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.Watt",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1190,
        "y": 500,
        "wires": [
            [
                "b23b72bdafcfec77"
            ]
        ]
    },
    {
        "id": "8725c738156ee416",
        "type": "function",
        "z": "4efe9327eddfa7d6",
        "name": "Watt Line Chart",
        "func": "// Données reçues du flux précédent\nvar rawData = msg.payload;\nvar delayInSeconds = msg.delay / 1000; // Conversion en secondes\n\n// Extraction des données nécessaires\nvar voltWatt = rawData;\n\n// Fonction pour calculer la moyenne mobile\nfunction movingAverage(data, windowSize) {\n    var smoothedData = [];\n    for (var i = 0; i < data.length; i++) {\n        var start = Math.max(0, i - Math.floor(windowSize / 2));\n        var end = Math.min(data.length - 1, i + Math.floor(windowSize / 2));\n        var sum = 0;\n        for (var j = start; j <= end; j++) {\n            sum += data[j];\n        }\n        smoothedData.push(sum / (end - start + 1));\n    }\n    return smoothedData;\n}\n\n// Appliquer la moyenne mobile avec une fenêtre de 5 échantillons (vous pouvez ajuster la taille de la fenêtre si nécessaire)\nvar smoothedVoltWatt = movingAverage(voltWatt, 5);\n\n// Création du graphique\nvar chartData = {\n    type: 'line',  // Changement du type de graphique en \"line\"\n    options: {\n        scales: {\n            yAxes: [{\n                ticks: {\n                    fontSize: 40\n                }\n            }],\n            xAxes: [{\n                ticks: {\n                    fontSize: 40\n                }\n            }]\n        },\n        title: {\n            display: true,\n            text: 'Comparaison des performances',\n            fontSize: 50\n        },\n        legend: {\n            display: true,\n            labels: {\n                // This more specific font property overrides the global property\n                fontSize: 40,\n                fontColor: 'black',\n                family: 'Arial'\n            },\n            font: {\n                size: 30\n            },\n        },\n        chartArea: {\n            backgroundColor: '#d3d7dd'\n        },\n        plugins: {\n            datalabels: {\n                display: false  // Désactiver l'affichage des étiquettes de données\n            }\n        }\n    },\n    data: {\n        labels: Array.from({ length: smoothedVoltWatt.length }, (_, i) => {\n            // Calculer le délai réel entre chaque valeur en millisecondes\n            var realDelay = msg.delay / (smoothedVoltWatt.length - 1);\n\n            // Calculer le temps en millisecondes à partir de l'index\n            var timeMillis = i * realDelay;\n\n            // Convertir le temps en minutes et secondes\n            var minutes = Math.floor(timeMillis / 60000); // 60000 millisecondes équivalent à 1 minute\n            var seconds = ((timeMillis % 60000) / 1000).toFixed(0);\n\n            // Créer le label en fonction de la durée\n            if (minutes === 0) {\n                return seconds + ' s'; // Temps en secondes si inférieur à 1 minute\n            } else {\n                return minutes + ' min ' + seconds + ' s'; // Temps en minute:secondes si supérieur à 1 minute\n            }\n        }),\n        datasets: [\n            {\n                label: \"MilliWatt de Volt\",\n                borderColor: '#47006b',\n                fill: false,\n                data: smoothedVoltWatt, // Utilisation des données lissées\n                pointRadius: 0,\n            },\n        ]\n    }\n};\n\nmsg.payload = chartData;\nmsg.topic = \"Watt\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 540,
        "wires": [
            [
                "e5a34d1455d15125"
            ]
        ]
    },
    {
        "id": "e5a34d1455d15125",
        "type": "chart-image",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "width": "1920",
        "height": "1920",
        "x": 1950,
        "y": 540,
        "wires": [
            [
                "958ee4f29397ee16",
                "6cab62619e956707"
            ]
        ]
    },
    {
        "id": "958ee4f29397ee16",
        "type": "file",
        "z": "4efe9327eddfa7d6",
        "name": "volt.watt",
        "filename": "graphPath.volt.watt",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2160,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "d9fb29b85089363a",
        "type": "file in",
        "z": "4efe9327eddfa7d6",
        "name": "Read Graph Volt Watt",
        "filename": "graphPath.volt.watt",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1640,
        "y": 1200,
        "wires": [
            [
                "4704f09f3f3173e4"
            ]
        ]
    },
    {
        "id": "4704f09f3f3173e4",
        "type": "base64",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "action": "str",
        "property": "msg.payload",
        "x": 1880,
        "y": 1200,
        "wires": [
            [
                "8b24f7f99cca8157"
            ]
        ]
    },
    {
        "id": "8b24f7f99cca8157",
        "type": "change",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "wattGraph",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1870,
        "y": 1240,
        "wires": [
            [
                "0bb0e82698f40c60"
            ]
        ]
    },
    {
        "id": "3b4b155085ef3d5f",
        "type": "function",
        "z": "4efe9327eddfa7d6",
        "name": "Prepare Payload Time",
        "func": "// Vérifier si les valeurs sont toutes les deux égales à 1 milliseconde\nif (msg.originalDelay === 1 && msg.delay === 1) {\n    msg.payload = \"00:00\";  // Cas spécial\n} else {\n    // Calculer le temps effectué et le temps total (en millisecondes)\n    var tempsEffectue = msg.originalDelay - msg.delay;\n    var tempsTotal = msg.originalDelay;\n\n    // Convertir les millisecondes en secondes\n    tempsEffectue /= 1000;\n    tempsTotal /= 1000;\n\n    // Arrondir les secondes\n    tempsEffectue = Math.round(tempsEffectue);\n    tempsTotal = Math.round(tempsTotal);\n\n    // Formater les temps dans le format \"mm:ss\"\n    var formatTemps = function (temps) {\n        var minutes = Math.floor(temps / 60);\n        var secondes = temps % 60;\n        return (minutes < 10 ? \"0\" : \"\") + minutes + \":\" + (secondes < 10 ? \"0\" : \"\") + secondes;\n    };\n\n    // Former le résultat\n    var tempsFormate = formatTemps(tempsEffectue) + \"/\" + formatTemps(tempsTotal);\n\n    msg.payload = tempsFormate;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 600,
        "wires": [
            [
                "46d2878a2c541865"
            ]
        ]
    },
    {
        "id": "46d2878a2c541865",
        "type": "ui_text",
        "z": "4efe9327eddfa7d6",
        "group": "98aec2bd3951d32a",
        "order": 5,
        "width": 12,
        "height": 2,
        "name": "Time",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "30",
        "color": "#e01b24",
        "x": 290,
        "y": 540,
        "wires": []
    },
    {
        "id": "619201dc2a81345d",
        "type": "ui_toast",
        "z": "4efe9327eddfa7d6",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "Valider",
        "cancel": "Annuler",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 190,
        "y": 920,
        "wires": [
            [
                "70d1568a101dde4f"
            ]
        ]
    },
    {
        "id": "22cbf04b8036f8c4",
        "type": "ui_button",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "group": "98aec2bd3951d32a",
        "order": 6,
        "width": 4,
        "height": 2,
        "passthru": true,
        "label": "Purge",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "Voulez vous vraiment purger tout les fichier generé par Node-Red ?",
        "payloadType": "str",
        "topic": "Purge des fichier !!!",
        "topicType": "str",
        "x": 170,
        "y": 880,
        "wires": [
            [
                "619201dc2a81345d"
            ]
        ]
    },
    {
        "id": "47e02b5bf50d7a4a",
        "type": "function",
        "z": "4efe9327eddfa7d6",
        "name": "Purge",
        "func": "if (msg.payload === \"Valider\"){\n    msg.payload = \"rm -r /home/NodeRed/* && rm -r /home/tobby/.gatling/gatling-charts-highcharts-bundle-3.9.5/results/*\";\n    return msg;\n}else{\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1000,
        "wires": [
            [
                "e244a51e0170d44f"
            ]
        ]
    },
    {
        "id": "430b207ef1ad4e69",
        "type": "ui_toast",
        "z": "4efe9327eddfa7d6",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "Valider",
        "cancel": "Annuler",
        "raw": false,
        "className": "",
        "topic": "VRAIMENT ???",
        "name": "",
        "x": 190,
        "y": 1000,
        "wires": [
            [
                "47e02b5bf50d7a4a",
                "707122b17fa5406b"
            ]
        ]
    },
    {
        "id": "70d1568a101dde4f",
        "type": "function",
        "z": "4efe9327eddfa7d6",
        "name": "function 8",
        "func": "if (msg.payload === \"Valider\"){\n    msg.payload = \"En êtes vous bien sûr ???\";\n    return msg;\n}else{\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 960,
        "wires": [
            [
                "430b207ef1ad4e69"
            ]
        ]
    },
    {
        "id": "707122b17fa5406b",
        "type": "delay",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 380,
        "y": 1040,
        "wires": [
            [
                "3fecf443e0b96138"
            ]
        ]
    },
    {
        "id": "3fecf443e0b96138",
        "type": "function",
        "z": "4efe9327eddfa7d6",
        "name": "Mkdir",
        "func": "if (msg.payload === \"Valider\"){\n    msg.payload = \"mkdir /home/NodeRed/png /home/NodeRed/pdf /home/NodeRed/json\";\n    return msg;\n}else{\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1040,
        "wires": [
            [
                "e244a51e0170d44f"
            ]
        ]
    },
    {
        "id": "05d87e993be68e0d",
        "type": "function",
        "z": "4efe9327eddfa7d6",
        "name": "Command_Gatling",
        "func": "msg.original = msg.payload;\nif (msg.payload.time !== undefined && msg.payload.user_gatling !== undefined && msg.payload.user_gatling > 0) {\n        // Crée la commande en utilisant les valeurs spécifiées\n    msg.payload.time = msg.payload.time * 60;\n    msg.payload = `/home/tobby/.gatling/gatling-charts-highcharts-bundle-3.9.5/bin/gatling.sh -s CuriusTRex -bm --run-mode local -erjo \"-Dusers=${msg.payload.user_gatling} -Dramp=${msg.payload.time} -Xms2G -Xmx4G\" | tail -1`;\n    return msg;\n    } else {\n        return null;\n    }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1120,
        "wires": [
            [
                "bd430c8d34a73e92"
            ]
        ]
    },
    {
        "id": "bd430c8d34a73e92",
        "type": "exec",
        "z": "4efe9327eddfa7d6",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 570,
        "y": 1100,
        "wires": [
            [
                "def0eae0ec6d52eb",
                "c20af2365b62333d"
            ],
            [
                "c20af2365b62333d"
            ],
            [
                "c20af2365b62333d"
            ]
        ]
    },
    {
        "id": "3cfa451f5126d313",
        "type": "inject",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "payload.gatling",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "inject",
        "x": 190,
        "y": 1120,
        "wires": [
            [
                "05d87e993be68e0d"
            ]
        ]
    },
    {
        "id": "def0eae0ec6d52eb",
        "type": "function",
        "z": "4efe9327eddfa7d6",
        "name": "extractFilePathsAndCreateJsonKeyValue",
        "func": "// Fonction pour extraire le chemin après \"file://\"\nvar inputPayload = msg.payload;\n\n// Recherche de l'index de \"file://\"\nvar fileIndex = inputPayload.indexOf(\"file://\");\n\n// Si \"file://\" est trouvé, extrayez le chemin après\nif (fileIndex !== -1) {\n    // Extraire le chemin après \"file://\"\n    var filePath = inputPayload.substring(fileIndex + 7); // +7 pour sauter \"file://\"\n\n    // Supprimer le fichier index.html du chemin, s'il est présent\n        filePath = filePath.substring(0, filePath.length - 12); // -11 pour enlever \"/index.html\"\n\n    // Mettre le chemin extrait dans le message de sortie\n    msg.payload = filePath;\n\n    // Tableau de noms de fichiers .json\n    var jsonFilesList = [\n        \"assertions.json\",\n        \"global_stats.json\",\n        \"stats.json\"\n    ];\n\n    // Créer un tableau de clé-valeurs pour les fichiers .json\n    var jsonFilesKeyValue = {};\n\n    // Parcourir la liste des noms de fichiers et construire les chemins complets\n    for (var i = 0; i < jsonFilesList.length; i++) {\n        var jsonFileName = jsonFilesList[i];\n        var jsonFilePath = filePath + '/js/' + jsonFileName;\n        jsonFilesKeyValue[jsonFileName] = jsonFilePath;\n    }\n\n    // Ajouter le tableau de clé-valeurs au message\n    msg.jsonFiles = jsonFilesKeyValue;\n\n    // Renvoyer le message modifié\n    return msg;\n} else {\n    // Aucun \"file://\" trouvé, renvoyer le message d'origine\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1100,
        "wires": [
            [
                "b5b0c679ead95410",
                "3eb40de7972836d6",
                "766052a7b4ee4601",
                "6328e77b68050946"
            ]
        ]
    },
    {
        "id": "b5b0c679ead95410",
        "type": "file in",
        "z": "4efe9327eddfa7d6",
        "name": "Assertion Json",
        "filename": "jsonFiles[\"assertions.json\"]",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1320,
        "y": 1740,
        "wires": [
            [
                "73d687ee18d1206c"
            ]
        ]
    },
    {
        "id": "3eb40de7972836d6",
        "type": "file in",
        "z": "4efe9327eddfa7d6",
        "name": "Global Stats Json",
        "filename": "jsonFiles[\"global_stats.json\"]",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1330,
        "y": 1780,
        "wires": [
            [
                "238e6ff46edb2ec5"
            ]
        ]
    },
    {
        "id": "766052a7b4ee4601",
        "type": "file in",
        "z": "4efe9327eddfa7d6",
        "name": "Stats Json",
        "filename": "jsonFiles[\"stats.json\"]",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1310,
        "y": 1820,
        "wires": [
            [
                "50a0cb90def4eb04"
            ]
        ]
    },
    {
        "id": "50a0cb90def4eb04",
        "type": "json",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1470,
        "y": 1820,
        "wires": [
            [
                "381faf0b9d18d56b"
            ]
        ]
    },
    {
        "id": "238e6ff46edb2ec5",
        "type": "json",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1490,
        "y": 1780,
        "wires": [
            [
                "9bb22f8a6f1c05c9"
            ]
        ]
    },
    {
        "id": "73d687ee18d1206c",
        "type": "json",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1470,
        "y": 1740,
        "wires": [
            [
                "50711bf3a4dbdd46"
            ]
        ]
    },
    {
        "id": "50711bf3a4dbdd46",
        "type": "change",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Assertion",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1610,
        "y": 1740,
        "wires": [
            [
                "584889765ee9f49b"
            ]
        ]
    },
    {
        "id": "9bb22f8a6f1c05c9",
        "type": "change",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Global",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1630,
        "y": 1780,
        "wires": [
            [
                "584889765ee9f49b"
            ]
        ]
    },
    {
        "id": "381faf0b9d18d56b",
        "type": "change",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Stats",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1610,
        "y": 1820,
        "wires": [
            [
                "584889765ee9f49b"
            ]
        ]
    },
    {
        "id": "584889765ee9f49b",
        "type": "join",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "3",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1810,
        "y": 1780,
        "wires": [
            [
                "686f27b7e9c9c698"
            ]
        ]
    },
    {
        "id": "f916616f6ed62f18",
        "type": "change",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "gatling",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2010,
        "y": 1780,
        "wires": [
            [
                "e0ddb30c3e6fd14f"
            ]
        ]
    },
    {
        "id": "60fdbe8d379af64d",
        "type": "file in",
        "z": "4efe9327eddfa7d6",
        "name": "Read Graph Gatling",
        "filename": "graphPath.gatling.pass",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1640,
        "y": 1360,
        "wires": [
            [
                "3c7151a69ff108a6"
            ]
        ]
    },
    {
        "id": "3c7151a69ff108a6",
        "type": "base64",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "action": "str",
        "property": "msg.payload",
        "x": 1880,
        "y": 1360,
        "wires": [
            [
                "a83b6bfa05743ec7"
            ]
        ]
    },
    {
        "id": "a83b6bfa05743ec7",
        "type": "change",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "gatlingGraph",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1890,
        "y": 1400,
        "wires": [
            [
                "0bb0e82698f40c60"
            ]
        ]
    },
    {
        "id": "e0ddb30c3e6fd14f",
        "type": "link out",
        "z": "4efe9327eddfa7d6",
        "name": "gatling",
        "mode": "link",
        "links": [
            "0cd374e724f553e3",
            "15420dcbe122257f",
            "1fcb837ec380a91a"
        ],
        "x": 2145,
        "y": 1780,
        "wires": []
    },
    {
        "id": "1fcb837ec380a91a",
        "type": "link in",
        "z": "4efe9327eddfa7d6",
        "name": "link in 5",
        "links": [
            "e0ddb30c3e6fd14f"
        ],
        "x": 1385,
        "y": 380,
        "wires": [
            [
                "a45eb6921a96adb0"
            ]
        ]
    },
    {
        "id": "b216ebabe786ed57",
        "type": "chart-image",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "width": "1920",
        "height": "1920",
        "x": 1950,
        "y": 380,
        "wires": [
            [
                "048bcfc99f7e6c22",
                "6cab62619e956707"
            ]
        ]
    },
    {
        "id": "a45eb6921a96adb0",
        "type": "function",
        "z": "4efe9327eddfa7d6",
        "name": "Gatling bar chart",
        "func": "// Données reçues du flux précédent\nvar rawData = msg.payload.Global;  // Utilisez les données de msg.payload.gatling.Global\nmsg.topic = \"GatlingPass\"; // Définir le sujet du message\n\n// Extraction des données nécessaires\nvar groupData = [\n    rawData.group1,\n    rawData.group2,\n    rawData.group3,\n    rawData.group4\n];\n\nvar labels = [];\nvar percentages = [];\n\n// Parcourir les données des groupes et extraire les informations\nfor (var i = 1; i <= groupData.length; i++) {\n    var groupName = \"group\" + i;\n    labels.push(rawData[groupName].htmlName);\n    percentages.push(rawData[groupName].percentage);\n}\n\n// Création du graphique\nvar chartData = {\n    type: 'bar',  // Utiliser un graphique de type \"bar\"\n    options: {\n        title: {\n            display: true,\n            text: 'Répartition des performances par groupe', // Titre du graphique,\n            fontSize: 50 \n        },\n        legend: {\n            display: true,\n            labels: {\n                // This more specific font property overrides the global property\n                fontSize: 40,\n                fontColor: 'black',\n                family: 'Arial'\n            },\n            font: {\n                size: 40\n            },\n        },\n        chartArea: {\n            backgroundColor: '#d3d7dd' // Couleur de fond du graphique\n        },\n        scales: {\n            x: {\n                beginAtZero: true,\n                title: {\n                    display: true,\n                    text: 'Groupes' // Titre de l'axe des X\n                }\n            },\n\n            xAxes: [{\n                ticks: {\n                    fontSize: 40\n                }\n            }],\n            y: {\n                beginAtZero: true,\n                title: {\n                    display: true,\n                    text: 'Pourcentage' // Titre de l'axe des Y\n                }\n            },\n            yAxes: [{\n                ticks: {\n                    fontSize: 40\n                }\n            }],\n        },\n        plugins: {\n            datalabels: {\n                anchor: 'end',\n                align: 'top',\n                formatter: function (value) {\n                    return value + '%';  // Ajouter le symbole de pourcentage à l'étiquette\n                }\n            }\n        }\n    },\n    data: {\n        labels: labels,\n        datasets: [\n            {\n                label: \"Pourcentage\", // Légende de l'ensemble de données\n                backgroundColor: 'rgba(0, 128, 255, 0.7)',  // Couleur du remplissage des barres\n                data: percentages,\n                \n            }\n        ]\n    }\n};\nmsg.graphPath = global.get('path') || 0;\nmsg.payload = chartData; // Attribuer les données du graphique au message\nreturn msg; // Renvoyer le message\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 380,
        "wires": [
            [
                "b216ebabe786ed57"
            ]
        ]
    },
    {
        "id": "048bcfc99f7e6c22",
        "type": "file",
        "z": "4efe9327eddfa7d6",
        "name": "gatling.pass",
        "filename": "graphPath.gatling.pass",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2170,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "835148e584b7cc81",
        "type": "file in",
        "z": "4efe9327eddfa7d6",
        "name": "Log",
        "filename": "payload",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1310,
        "y": 1860,
        "wires": [
            [
                "d5127c1e68e2cab1"
            ]
        ]
    },
    {
        "id": "c644394575489307",
        "type": "change",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Log",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1670,
        "y": 1860,
        "wires": [
            [
                "d71ca3e7d62a8a8e"
            ]
        ]
    },
    {
        "id": "6328e77b68050946",
        "type": "function",
        "z": "4efe9327eddfa7d6",
        "name": "function 9",
        "func": "msg.payload = msg.payload + \"/simulation.log\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 1860,
        "wires": [
            [
                "835148e584b7cc81"
            ]
        ]
    },
    {
        "id": "b1b8130e398756ca",
        "type": "subflow:4e666803b8f3f742",
        "z": "4efe9327eddfa7d6",
        "name": "Volt CPU",
        "x": 900,
        "y": 680,
        "wires": [
            [
                "3b2d5495eee09468",
                "898f5af40a6f301e"
            ]
        ]
    },
    {
        "id": "491ac7e5eaf72d27",
        "type": "subflow:4e666803b8f3f742",
        "z": "4efe9327eddfa7d6",
        "name": "Volt RAM",
        "x": 900,
        "y": 720,
        "wires": [
            [
                "3b2d5495eee09468",
                "898f5af40a6f301e"
            ]
        ]
    },
    {
        "id": "5285f63fecf05197",
        "type": "subflow:4e666803b8f3f742",
        "z": "4efe9327eddfa7d6",
        "name": "Volt Process",
        "x": 910,
        "y": 760,
        "wires": [
            [
                "3b2d5495eee09468",
                "898f5af40a6f301e"
            ]
        ]
    },
    {
        "id": "f6ad44ee261f85d3",
        "type": "subflow:4e666803b8f3f742",
        "z": "4efe9327eddfa7d6",
        "name": "Volt Température",
        "x": 930,
        "y": 800,
        "wires": [
            [
                "3b2d5495eee09468",
                "898f5af40a6f301e"
            ]
        ]
    },
    {
        "id": "188877c9e806c63d",
        "type": "subflow:4e666803b8f3f742",
        "z": "4efe9327eddfa7d6",
        "name": "Nidus CPU",
        "x": 910,
        "y": 860,
        "wires": [
            [
                "898f5af40a6f301e",
                "d56e086756da3a78"
            ]
        ]
    },
    {
        "id": "684c512e2a5c182d",
        "type": "subflow:4e666803b8f3f742",
        "z": "4efe9327eddfa7d6",
        "name": "Nidus RAM",
        "x": 910,
        "y": 900,
        "wires": [
            [
                "898f5af40a6f301e",
                "d56e086756da3a78"
            ]
        ]
    },
    {
        "id": "805923fe6a7f5446",
        "type": "subflow:4e666803b8f3f742",
        "z": "4efe9327eddfa7d6",
        "name": "Nidus Process",
        "x": 920,
        "y": 940,
        "wires": [
            [
                "898f5af40a6f301e",
                "d56e086756da3a78"
            ]
        ]
    },
    {
        "id": "a4207f61c01409ae",
        "type": "subflow:4e666803b8f3f742",
        "z": "4efe9327eddfa7d6",
        "name": "Nidus Température",
        "x": 930,
        "y": 980,
        "wires": [
            [
                "898f5af40a6f301e",
                "d56e086756da3a78"
            ]
        ]
    },
    {
        "id": "6ffb3da629f5b116",
        "type": "file in",
        "z": "4efe9327eddfa7d6",
        "name": "Read Graph Gatling",
        "filename": "graphPath.gatling.complet",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1640,
        "y": 1440,
        "wires": [
            [
                "9a18330d8d29f474"
            ]
        ]
    },
    {
        "id": "9a18330d8d29f474",
        "type": "base64",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "action": "str",
        "property": "msg.payload",
        "x": 1880,
        "y": 1440,
        "wires": [
            [
                "94a9a2f91313dcae"
            ]
        ]
    },
    {
        "id": "94a9a2f91313dcae",
        "type": "change",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "gatlingGraphComplete",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1890,
        "y": 1480,
        "wires": [
            [
                "0bb0e82698f40c60"
            ]
        ]
    },
    {
        "id": "686f27b7e9c9c698",
        "type": "change",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.Original",
                "pt": "msg",
                "to": "original",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1930,
        "y": 1740,
        "wires": [
            [
                "f916616f6ed62f18"
            ]
        ]
    },
    {
        "id": "8eefd4da9d0ec621",
        "type": "function",
        "z": "4efe9327eddfa7d6",
        "name": "Gatling line chart By_Seconds",
        "func": "// Création du graphique\nvar chartData = {\n    type: 'line', // Utilisez un graphique de type \"line\"\n    options: {\n        scales: {\n            yAxes: [{\n                ticks: {\n                    fontSize: 40\n                }\n            }],\n            xAxes: [{\n                ticks: {\n                    fontSize: 40\n                }\n            }]\n        },\n        dataset: {\n            labels: {\n                // This more specific font property overrides the global property\n                fontSize: 40,\n                fontColor: 'black',\n                family: 'Arial'\n            },\n            font: {\n                size: 30\n            },\n        },\n        title: {\n            labels: {\n                // This more specific font property overrides the global property\n                fontSize: 50,\n                fontColor: 'black',\n                family: 'Arial'\n            },\n            font: {\n                size: 50\n            },\n            display: true,\n            text: 'Nombre de Requêtes Simultanées', // Titre du graphique\n            fontSize: 40\n        },\n        legend: {\n            labels: {\n                // This more specific font property overrides the global property\n                fontSize: 40,\n                fontColor: 'black',\n                family: 'Arial'\n            },\n            font: {\n                size: 40\n            },\n            display: true // Affichez la légende du graphique\n        },\n        chartArea: {\n            backgroundColor: '#d3d7dd' // Couleur de fond du graphique\n        },\n        plugins: {\n            datalabels: {\n                display: false // Désactivez l'affichage des étiquettes de données\n            }\n        }\n    },\n    data: {\n        labels: msg.payload.bySeconds.data.labels,\n        datasets: msg.payload.bySeconds.data.datasets,\n    }\n};\n\nmsg.payload = chartData; // Attribuez les données du graphique au message\nmsg.topic = \"bySeconds\";\nmsg.graphPath = global.get('path') || 0;\nreturn msg; // Renvoyez le message\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 460,
        "wires": [
            [
                "6402feb5d4d34576"
            ]
        ]
    },
    {
        "id": "6402feb5d4d34576",
        "type": "chart-image",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "width": "1920",
        "height": "1920",
        "x": 1950,
        "y": 460,
        "wires": [
            [
                "2b570f27af0cbfc7",
                "6cab62619e956707"
            ]
        ]
    },
    {
        "id": "2b570f27af0cbfc7",
        "type": "file",
        "z": "4efe9327eddfa7d6",
        "name": "Gatling RequeteParSeconde",
        "filename": "graphPath.gatling.bySeconds",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2220,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "34371c1595c167a5",
        "type": "file in",
        "z": "4efe9327eddfa7d6",
        "name": "Read Graph Gatling",
        "filename": "graphPath.gatling.bySeconds",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1640,
        "y": 1520,
        "wires": [
            [
                "1ae7532bcef4775f"
            ]
        ]
    },
    {
        "id": "1ae7532bcef4775f",
        "type": "base64",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "action": "str",
        "property": "msg.payload",
        "x": 1880,
        "y": 1520,
        "wires": [
            [
                "ee650882ebb1d19e"
            ]
        ]
    },
    {
        "id": "ee650882ebb1d19e",
        "type": "change",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "gatlingGraphBySeconds",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1890,
        "y": 1560,
        "wires": [
            [
                "0bb0e82698f40c60"
            ]
        ]
    },
    {
        "id": "c20af2365b62333d",
        "type": "debug",
        "z": "4efe9327eddfa7d6",
        "name": "ERROR_Gatling",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 1140,
        "wires": []
    },
    {
        "id": "d56e086756da3a78",
        "type": "join",
        "z": "4efe9327eddfa7d6",
        "name": "Values_Nidus",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "4",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1260,
        "y": 680,
        "wires": [
            [
                "eeb86e27b865868d"
            ]
        ]
    },
    {
        "id": "d5127c1e68e2cab1",
        "type": "function",
        "z": "4efe9327eddfa7d6",
        "name": "Log To graph object",
        "func": "// Fonction pour analyser les lignes du journal Gatling\nvar lines = msg.payload.split('\\n'); // Divise la charge utile en lignes individuelles et les stocke dans un tableau\nvar logs = []; // Initialise un tableau vide pour stocker les journaux analysés\n\nfor (var i = 0; i < lines.length; i++) { // Parcourt chaque ligne du journal\n    var line = lines[i].trim(); // Supprime les espaces inutiles autour de la ligne\n\n    if (line !== \"\") { // Vérifie si la ligne n'est pas vide\n        var parts = line.split('\\t'); // Divise la ligne en morceaux en utilisant la tabulation comme séparateur\n        var logObject = {}; // Initialise un objet vide pour stocker les informations du journal\n\n        // Définir des noms de clés significatives en fonction de votre format\n        logObject.type = parts[0]; // Type de journal\n        logObject.name = parts[1]; // Nom de la requête\n        logObject.start = parseInt(parts[3]); // Heure de début convertie en nombre entier\n        logObject.end = parseInt(parts[4]); // Heure de fin convertie en nombre entier\n        logObject.status = parts[5]; // Statut de la requête\n        logObject.error = parts[6]; // Message d'erreur en cas d'échec\n        logObject.user = parts[7]; // Nom de l'utilisateur\n\n        logs.push(logObject); // Ajoute l'objet de journal au tableau des journaux analysés\n    }\n}\n\nvar logEntries = Array.isArray(logs) ? logs : [];\n\n// Prépare les données pour le premier nœud (timeResponse)\nvar timeResponse = {\n    data: {\n        labels: logEntries.map(function (entry) {\n            if (entry.type === 'RUN') {\n                return 'Début de la Simulation'; // Label pour les opérations de type \"RUN\"\n            } else if (entry.type === 'REQUEST') {\n                // Calcul de la différence en millisecondes entre le début de la simulation et le début de la requête\n                var simulationStart = logEntries.find(function (item) {\n                    return item.type === 'RUN';\n                });\n                if (simulationStart) {\n                    var startTime = simulationStart.start;\n                    var requestTime = entry.start;\n                    var timeDiff = requestTime - startTime;\n\n                    // Si le temps de la simulation dépasse 1 minute\n                    if (timeDiff >= 60000) { // 60000 millisecondes équivalent à 1 minute\n                        var minutes = Math.floor(timeDiff / 60000);\n                        var seconds = ((timeDiff % 60000) / 1000).toFixed(0);\n                        return minutes + ' min ' + seconds + ' s';\n                    } else {\n                        return (timeDiff / 1000).toFixed(0) + ' s'; // Temps en secondes\n                    }\n                } else {\n                    return 'N/A'; // Si aucune opération de type \"RUN\" n'est trouvée\n                }\n            } else {\n                return ''; // Autres types d'opérations (USER, etc.) sans label\n            }\n        }),\n\n        datasets: [\n            {\n                label: \"Temps de Réponse en milliseconde\", // Légende de l'ensemble de données\n                borderColor: '#0000ff', // Couleur de la ligne du graphique\n                fill: false, // Désactivez le remplissage sous la ligne\n                data: logEntries.map(function (entry) {\n                    if (entry.type === 'REQUEST') {\n                        // Calcul de la différence en millisecondes entre le début et la fin de la requête\n                        var requestStart = entry.start;\n                        var requestEnd = entry.end;\n                        var requestTime = requestEnd - requestStart;\n                        return requestTime;\n                    } else {\n                        return 0; // Valeurs pour les opérations de type \"RUN\" ou autres\n                    }\n                }),\n                pointRadius: 0, // Diamètre des points sur le graphique\n            }\n        ]\n    }\n};\n\n// Prépare les données pour le deuxième nœud (bySeconds)\nvar bySeconds = {\n    data: {\n        labels: timeResponse.data.labels,\n        datasets: [\n            {\n                label: \"Requêtes Simultanées\", // Légende de l'ensemble de données\n                borderColor: '#00aaff', // Couleur de la ligne du graphique\n                fill: false, // Désactivez le remplissage sous la ligne\n                data: logEntries.map(function (entry, index, array) {\n                    if (entry.type === 'REQUEST') {\n                        var currentTimestamp = entry.start;\n                        var concurrentRequests = 0;\n\n                        for (var i = 0; i < array.length; i++) {\n                            var otherEntry = array[i];\n                            if (otherEntry.type === 'REQUEST' &&\n                                otherEntry.start <= currentTimestamp &&\n                                (otherEntry.end === null || otherEntry.end >= currentTimestamp)) {\n                                concurrentRequests++;\n                            }\n                        }\n\n                        return concurrentRequests;\n                    } else {\n                        return 0; // Valeurs pour les autres types d'opérations\n                    }\n                }),\n                pointRadius: 0, // Diamètre des points sur le graphique\n            }\n        ]\n    }\n};\n\nmsg.payload = {\n    timeResponse: timeResponse,\n    bySeconds: bySeconds\n};\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 1860,
        "wires": [
            [
                "c644394575489307"
            ]
        ]
    },
    {
        "id": "d71ca3e7d62a8a8e",
        "type": "link out",
        "z": "4efe9327eddfa7d6",
        "name": "Log",
        "mode": "link",
        "links": [
            "15420dcbe122257f",
            "f4c131dfe7979b34"
        ],
        "x": 2145,
        "y": 1860,
        "wires": []
    },
    {
        "id": "f4c131dfe7979b34",
        "type": "link in",
        "z": "4efe9327eddfa7d6",
        "name": "link in 6",
        "links": [
            "d71ca3e7d62a8a8e"
        ],
        "x": 1385,
        "y": 440,
        "wires": [
            [
                "e078bd3601176f5e",
                "8eefd4da9d0ec621"
            ]
        ]
    },
    {
        "id": "b163b8b1f5f05f1b",
        "type": "link out",
        "z": "4efe9327eddfa7d6",
        "name": "Values",
        "mode": "link",
        "links": [
            "45787365124bf1fc",
            "15420dcbe122257f"
        ],
        "x": 1595,
        "y": 580,
        "wires": []
    },
    {
        "id": "ef4c6689f4d85d6e",
        "type": "change",
        "z": "4efe9327eddfa7d6",
        "name": "Volt_Topic",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "volt",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1430,
        "y": 640,
        "wires": [
            [
                "903a317c6fc74f34",
                "b163b8b1f5f05f1b"
            ]
        ]
    },
    {
        "id": "eeb86e27b865868d",
        "type": "change",
        "z": "4efe9327eddfa7d6",
        "name": "Nidus_Topic",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "nidus",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1430,
        "y": 680,
        "wires": [
            [
                "0c33016c67bedcbe",
                "b163b8b1f5f05f1b"
            ]
        ]
    },
    {
        "id": "427f95e3a7cbdc23",
        "type": "change",
        "z": "4efe9327eddfa7d6",
        "name": "Gatling",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "date"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "gatling",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "complete",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 200,
        "y": 1440,
        "wires": [
            [
                "d667564cb2028968"
            ]
        ]
    },
    {
        "id": "a9235a22632f3995",
        "type": "change",
        "z": "4efe9327eddfa7d6",
        "name": "Delay",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "date"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "delay",
                "tot": "str"
            },
            {
                "t": "delete",
                "p": "complete",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 190,
        "y": 1480,
        "wires": [
            [
                "d667564cb2028968"
            ]
        ]
    },
    {
        "id": "d667564cb2028968",
        "type": "join",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 370,
        "y": 1480,
        "wires": [
            [
                "20c71f29be825dfc"
            ]
        ]
    },
    {
        "id": "20c71f29be825dfc",
        "type": "function",
        "z": "4efe9327eddfa7d6",
        "name": "function 10",
        "func": "// Calculer la différence entre les horodatages delay et gatling\nvar delayTimestamp = msg.payload.delay;\nvar gatlingTimestamp = msg.payload.gatling;\nvar timeDifference = gatlingTimestamp - delayTimestamp;\n\n// Ajouter les informations de msg.original au tableau\nvar originalData = msg.original;\n\n\n// Mettre le tableau résultant dans msg.payload\nmsg.payload.timedifference = timeDifference;\nmsg.payload.original = originalData;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1520,
        "wires": [
            [
                "11539707aa8bbc63"
            ]
        ]
    },
    {
        "id": "a088c279a069d487",
        "type": "inject",
        "z": "4efe9327eddfa7d6",
        "name": "NoGatling",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"nameFile\":\"NoGatling\",\"time\":0.1,\"stressVolt\":false,\"stressNidus\":false,\"timeStress\":1,\"user_gatling\":0,\"flow\":false}",
        "payloadType": "json",
        "x": 200,
        "y": 780,
        "wires": [
            [
                "b9e3c634e5e5a408"
            ]
        ]
    },
    {
        "id": "11539707aa8bbc63",
        "type": "json",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 370,
        "y": 1560,
        "wires": [
            [
                "1bca9f0e976dabb7"
            ]
        ]
    },
    {
        "id": "1bca9f0e976dabb7",
        "type": "file",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "filename": "/home/NodeRed/stats",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 400,
        "y": 1600,
        "wires": [
            []
        ]
    },
    {
        "id": "9222427d2ce83035",
        "type": "file in",
        "z": "4efe9327eddfa7d6",
        "name": "Read Stats",
        "filename": "/home/NodeRed/stats",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 370,
        "y": 1640,
        "wires": [
            []
        ]
    },
    {
        "id": "bc1669c675d6f950",
        "type": "inject",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 1640,
        "wires": [
            [
                "9222427d2ce83035"
            ]
        ]
    },
    {
        "id": "9eab68323d51cfbf",
        "type": "switch",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "property": "gatling",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1410,
        "y": 1480,
        "wires": [
            [
                "60fdbe8d379af64d",
                "6ffb3da629f5b116",
                "34371c1595c167a5"
            ]
        ]
    },
    {
        "id": "0cd374e724f553e3",
        "type": "link in",
        "z": "4efe9327eddfa7d6",
        "name": "link in 7",
        "links": [
            "e0ddb30c3e6fd14f"
        ],
        "x": 1925,
        "y": 1080,
        "wires": [
            [
                "0bb0e82698f40c60"
            ]
        ]
    },
    {
        "id": "f88ac5ad8b78703f",
        "type": "switch",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "property": "gatling",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2170,
        "y": 900,
        "wires": [
            [
                "c098b73f5c524369",
                "b7a440db0a0e5efa"
            ],
            [
                "7ecde4c4db28642e",
                "b7a440db0a0e5efa"
            ]
        ]
    },
    {
        "id": "7ecde4c4db28642e",
        "type": "function",
        "z": "4efe9327eddfa7d6",
        "name": "Créer le contenue du fichier Sans gatling ",
        "func": "//Formatage du ventilateur\nvar ventilateur = global.get(\"original.flow\") ? \"Ventilateur activé\" : \"Ventilateur non-activé\";\n// Formatage de la date de début\nvar timestamp = Date.now() - (msg.delay);\n\n// Créez un objet Date à partir du timestamp\nvar date = new Date(timestamp);\n\n// Définissez le format de date souhaité\nvar options = {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit'\n};\n\n// Formatez la date en une chaîne de caractères\nvar formattedDate = date.toLocaleDateString(\"fr-FR\", options);\n\n\n// Création des données pour le rapport PDF\nmsg.payload = {\n    header: function (currentPage, pageCount, pageSize) {\n        return [\n            {\n                text: \"Tobler Cyril\", // Votre nom\n                alignment: \"left\",\n                fontSize: 10,\n                margin: [15, 10, 0, 0]\n            },\n            {\n                text: \"Nom du projet : Confuse T-Rex\", // Nom de votre projet\n                alignment: \"center\",\n                fontSize: 10,\n                margin: [0, 0, 0, 0]\n            }\n        ];\n    },\n    footer: function (currentPage, pageCount) {\n        return {\n            columns: [\n                {\n                    text: currentPage.toString() + \" / \" + pageCount, // Numéro de page actuel / Nombre total de pages\n                    alignment: \"left\",\n                    fontSize: 10,\n                    margin: [15, 0, 0, 10]\n                },\n                {\n                    text: new Date().toLocaleDateString(\"fr-FR\"), // Date actuelle au format français\n                    alignment: \"right\",\n                    fontSize: 10,\n                    margin: [0, 0, 15, 10]\n                }\n            ],\n            margin: [0, 0, 0, 10]\n        };\n    },\n    content: [\n        {\n            text: \"Rapport d'utilisation : \" + global.get(\"original.nameFile\"), // Titre du rapport\n            style: \"header\",\n            margin: [0, 10, 0, 0]\n        },\n        {\n            text: \"Les valeurs sont des moyennes sur les \" + Math.floor(msg.delay / (1000 * 60)) + \" dernières minutes\" // Informations sur les valeurs\n        },\n        {\n            text: ventilateur\n        },\n        {\n            text: \"Nidus :\", // Section Nidus\n            style: \"header2\"\n        },\n        {\n            //style: 'tableExample',\n            table: {\n                body: [\n                    ['CPU :', msg.payload.moyenne[\"nidus/benchmark/cpu\"] + \" % d'utilisation\"],\n                    ['RAM :', msg.payload.moyenne[\"nidus/benchmark/ram\"] + \" % d'utilisation (\" + (msg.payload.moyenne[\"nidus/benchmark/ram\"] * (4 / 100)).toFixed(2) + \"Go/4Go)\"],\n                    ['Nombre de processus :', msg.payload.moyenne[\"nidus/benchmark/processes\"]],\n                    ['Température CPU :', msg.payload.moyenne[\"nidus/benchmark/temp\"] + \"° Celcius\"],\n\n                ]\n            },\n            layout: 'noBorders'\n        },\n        {\n            image: 'nidusImage', // Image de Nidus\n            margin: [0, 20],\n            width: 500,\n            pageBreak: 'after', // Saut de page après l'image\n        },\n        {\n            text: \"Volt\", // Section Volt\n            style: \"header2\"\n        },\n        {\n            //style: 'tableExample',\n            table: {\n                body: [\n                    ['CPU :', msg.payload.moyenne[\"volt/benchmark/cpu\"] + \" % d'utilisation\"],\n                    ['RAM :', msg.payload.moyenne[\"volt/benchmark/ram\"] + \" % d'utilisation (\" + (msg.payload.moyenne[\"volt/benchmark/ram\"] * (4 / 100)).toFixed(2) + \"Go/4Go)\"],\n                    ['Nombre de processus :', msg.payload.moyenne[\"volt/benchmark/processes\"]],\n                    ['Température CPU :', msg.payload.moyenne[\"volt/benchmark/temp\"] + \"° Celcius\"],\n                    ['MilliWatt :', msg.payload.moyenne.Watt + \"mW\"],\n                ]\n            },\n            layout: 'noBorders'\n        },\n        {\n            image: 'voltImage', // Image de Volt\n            margin: [0, 20],\n            width: 500,\n        },\n        {\n            image: 'wattImage', // Image Watt de Volt\n            width: 500,\n            margin: [0, 20],\n            //pageBreak: 'after', // Saut de page après l'image\n        },\n        \n    ],\n    images: {\n        voltImage: 'data:image/png;base64,' + msg.payload.voltGraph.toString('base64'), // Utilisation du buffer pour l'image Volt\n        wattImage: 'data:image/png;base64,' + msg.payload.wattGraph.toString('base64'),  // Utilisation du buffer pour l'image Watt de Volt\n        nidusImage: 'data:image/png;base64,' + msg.payload.nidusGraph.toString('base64'),  // Utilisation du buffer pour l'image Nidus\n        \n    },\n    styles: {\n        header: {\n            fontSize: 22,\n            bold: true,\n            margin: [0, 30, 0, 0]\n        },\n        header2: {\n            fontSize: 18,\n            bold: true,\n            margin: [0, 20, 0, 0]\n        }\n    }\n};\n\nreturn msg; // Renvoyer le message\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2480,
        "y": 920,
        "wires": [
            [
                "57844c6054085878"
            ]
        ]
    },
    {
        "id": "87375ed7c4b269e6",
        "type": "inject",
        "z": "4efe9327eddfa7d6",
        "name": "Short",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"nameFile\":\"Gatling\",\"time\":0.1,\"stressVolt\":false,\"stressNidus\":false,\"timeStress\":1,\"user_gatling\":1,\"flow\":false}",
        "payloadType": "json",
        "x": 70,
        "y": 740,
        "wires": [
            [
                "b9e3c634e5e5a408"
            ]
        ]
    },
    {
        "id": "b7f5413b80b7d1db",
        "type": "join",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "4",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 2050,
        "y": 1000,
        "wires": [
            [
                "260567470f14c245"
            ]
        ]
    },
    {
        "id": "0bb0e82698f40c60",
        "type": "switch",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "property": "gatling",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2050,
        "y": 1040,
        "wires": [
            [
                "d6a5be4cdffb06c8"
            ],
            [
                "b7f5413b80b7d1db"
            ]
        ]
    },
    {
        "id": "6cab62619e956707",
        "type": "switch",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "property": "gatling",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1690,
        "y": 720,
        "wires": [
            [
                "ab35bb6feb027402"
            ],
            [
                "b2673cc96a37272b"
            ]
        ]
    },
    {
        "id": "b2673cc96a37272b",
        "type": "join",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "3",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2010,
        "y": 740,
        "wires": [
            [
                "de56573acae32c8a"
            ]
        ]
    },
    {
        "id": "b7a440db0a0e5efa",
        "type": "debug",
        "z": "4efe9327eddfa7d6",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2380,
        "y": 1040,
        "wires": []
    },
    {
        "id": "956a379dba9bb180",
        "type": "comment",
        "z": "4efe9327eddfa7d6",
        "name": "Check Diff Gatling/SSH",
        "info": "",
        "x": 180,
        "y": 1560,
        "wires": []
    },
    {
        "id": "dc4374dfefd87acc",
        "type": "inject",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "7200",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "ssh tobby@157.26.228.77 \"echo \\\"lsij419\\\" | sudo -S /etc/init.d/mqtt.sh\"",
        "payloadType": "str",
        "x": 170,
        "y": 1220,
        "wires": [
            [
                "6a1ac2d16dbf47f9"
            ]
        ]
    },
    {
        "id": "6a1ac2d16dbf47f9",
        "type": "exec",
        "z": "4efe9327eddfa7d6",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 330,
        "y": 1240,
        "wires": [
            [
                "828ebe797532df0a"
            ],
            [
                "828ebe797532df0a"
            ],
            [
                "828ebe797532df0a"
            ]
        ]
    },
    {
        "id": "bdc99b29a23f5753",
        "type": "inject",
        "z": "4efe9327eddfa7d6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "7200",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "echo \"lsij419\" | sudo -S /etc/init.d/mqtt.sh",
        "payloadType": "str",
        "x": 170,
        "y": 1260,
        "wires": [
            [
                "6a1ac2d16dbf47f9"
            ]
        ]
    },
    {
        "id": "828ebe797532df0a",
        "type": "debug",
        "z": "4efe9327eddfa7d6",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 1240,
        "wires": []
    },
    {
        "id": "8611542176501860",
        "type": "ui_text",
        "z": "0893a32b929905a3",
        "d": true,
        "group": "da05c7d57d590aff",
        "order": 4,
        "width": 8,
        "height": 1,
        "name": "",
        "label": "MilliWatt : ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 620,
        "y": 220,
        "wires": []
    },
    {
        "id": "34c502239623861b",
        "type": "ui_chart",
        "z": "0893a32b929905a3",
        "d": true,
        "name": "MilliWatt",
        "group": "da05c7d57d590aff",
        "order": 5,
        "width": 0,
        "height": 0,
        "label": "",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "5",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 620,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "20931eefe6cf98ac",
        "type": "ui_text",
        "z": "0893a32b929905a3",
        "d": true,
        "group": "da05c7d57d590aff",
        "order": 2,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "MillliVolt",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 620,
        "y": 300,
        "wires": []
    },
    {
        "id": "bdd2b7d6accdb810",
        "type": "ui_text",
        "z": "0893a32b929905a3",
        "d": true,
        "group": "da05c7d57d590aff",
        "order": 1,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "MiliAmp",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 620,
        "y": 340,
        "wires": []
    },
    {
        "id": "97e2afe25213da0a",
        "type": "ui_gauge",
        "z": "0893a32b929905a3",
        "name": "",
        "group": "52d9f1a33ad4f3ad",
        "order": 1,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "CPU",
        "label": "%",
        "format": "{{value}}%",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 610,
        "y": 380,
        "wires": []
    },
    {
        "id": "ddb683c969d0cd70",
        "type": "ui_gauge",
        "z": "0893a32b929905a3",
        "name": "",
        "group": "52d9f1a33ad4f3ad",
        "order": 2,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "RAM",
        "label": "Go utilisée",
        "format": "{{value | number:2}} / 4Go",
        "min": 0,
        "max": "4",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 690,
        "y": 420,
        "wires": []
    },
    {
        "id": "b6ec2f6e9f535593",
        "type": "ui_gauge",
        "z": "0893a32b929905a3",
        "name": "",
        "group": "52d9f1a33ad4f3ad",
        "order": 3,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "Processus",
        "label": "",
        "format": "{{value}}",
        "min": 0,
        "max": "500",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 630,
        "y": 460,
        "wires": []
    },
    {
        "id": "f3f642f3f861392f",
        "type": "ui_gauge",
        "z": "0893a32b929905a3",
        "name": "",
        "group": "52d9f1a33ad4f3ad",
        "order": 4,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "Température",
        "label": "Celsius",
        "format": "{{value}}°C",
        "min": 0,
        "max": "85",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "35",
        "seg2": "50",
        "diff": false,
        "className": "",
        "x": 630,
        "y": 500,
        "wires": []
    },
    {
        "id": "639509e7603d9422",
        "type": "ui_gauge",
        "z": "0893a32b929905a3",
        "name": "",
        "group": "c2cf8a722cad3139",
        "order": 1,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "CPU",
        "label": "%",
        "format": "{{value}}%",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 610,
        "y": 540,
        "wires": []
    },
    {
        "id": "b3e72f17a8609d51",
        "type": "ui_gauge",
        "z": "0893a32b929905a3",
        "name": "",
        "group": "c2cf8a722cad3139",
        "order": 2,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "RAM",
        "label": "Go utilisée",
        "format": "{{value | number:2}} / 4Go",
        "min": 0,
        "max": "4",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 710,
        "y": 580,
        "wires": []
    },
    {
        "id": "34ac8686d31a24e5",
        "type": "ui_gauge",
        "z": "0893a32b929905a3",
        "name": "",
        "group": "c2cf8a722cad3139",
        "order": 3,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "Processus",
        "label": "",
        "format": "{{value}}",
        "min": 0,
        "max": "500",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 630,
        "y": 620,
        "wires": []
    },
    {
        "id": "0d096b2d0805b26a",
        "type": "ui_gauge",
        "z": "0893a32b929905a3",
        "name": "",
        "group": "c2cf8a722cad3139",
        "order": 4,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "Température",
        "label": "Celsius",
        "format": "{{value}}°C",
        "min": 0,
        "max": "85",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "35",
        "seg2": "50",
        "diff": false,
        "className": "",
        "x": 630,
        "y": 660,
        "wires": []
    },
    {
        "id": "0753dac0a8903546",
        "type": "link in",
        "z": "0893a32b929905a3",
        "name": "MilliWatt",
        "links": [
            "4aa27220845f2949"
        ],
        "x": 365,
        "y": 220,
        "wires": [
            [
                "8611542176501860",
                "34c502239623861b",
                "acbc206c85052f97"
            ]
        ]
    },
    {
        "id": "bb044312abc509ac",
        "type": "link in",
        "z": "0893a32b929905a3",
        "name": "MilliVolt",
        "links": [
            "6bb685f3a7a0f0a5"
        ],
        "x": 365,
        "y": 300,
        "wires": [
            [
                "20931eefe6cf98ac"
            ]
        ]
    },
    {
        "id": "b677ac2767276310",
        "type": "link in",
        "z": "0893a32b929905a3",
        "name": "MilliAmp",
        "links": [
            "7c257ee5dcd1af4a"
        ],
        "x": 365,
        "y": 340,
        "wires": [
            [
                "bdd2b7d6accdb810"
            ]
        ]
    },
    {
        "id": "d34aed594018f17f",
        "type": "link in",
        "z": "0893a32b929905a3",
        "name": "Volt_CPU",
        "links": [
            "df7d2b80bd59b4fb"
        ],
        "x": 365,
        "y": 380,
        "wires": [
            [
                "97e2afe25213da0a"
            ]
        ]
    },
    {
        "id": "43ed139a40181e8c",
        "type": "link in",
        "z": "0893a32b929905a3",
        "name": "Volt_RAM",
        "links": [
            "ea92a59ad33b194e"
        ],
        "x": 365,
        "y": 420,
        "wires": [
            [
                "564c8201a9464f48"
            ]
        ]
    },
    {
        "id": "32629afad03cee77",
        "type": "link in",
        "z": "0893a32b929905a3",
        "name": "Volt_Process",
        "links": [
            "1855f7ba0c1cb43f"
        ],
        "x": 365,
        "y": 460,
        "wires": [
            [
                "b6ec2f6e9f535593"
            ]
        ]
    },
    {
        "id": "8a29b252bca2b018",
        "type": "link in",
        "z": "0893a32b929905a3",
        "name": "Volt_Temp",
        "links": [
            "17d7264b5cdb9f27"
        ],
        "x": 365,
        "y": 500,
        "wires": [
            [
                "f3f642f3f861392f"
            ]
        ]
    },
    {
        "id": "ea9f275bdfb1e500",
        "type": "link in",
        "z": "0893a32b929905a3",
        "name": "Nidus_CPU",
        "links": [
            "24edf858449e9c50"
        ],
        "x": 365,
        "y": 540,
        "wires": [
            [
                "639509e7603d9422"
            ]
        ]
    },
    {
        "id": "dfa1039320e584b9",
        "type": "link in",
        "z": "0893a32b929905a3",
        "name": "Nidus_RAM",
        "links": [
            "96bbc5b20c93f61c"
        ],
        "x": 365,
        "y": 580,
        "wires": [
            [
                "8c4c83eecd9956c3"
            ]
        ]
    },
    {
        "id": "063b19bd2e12b7c2",
        "type": "link in",
        "z": "0893a32b929905a3",
        "name": "Nidus_Process",
        "links": [
            "def3688a66231ed2"
        ],
        "x": 365,
        "y": 620,
        "wires": [
            [
                "34ac8686d31a24e5"
            ]
        ]
    },
    {
        "id": "efd7370b2d98bfa4",
        "type": "link in",
        "z": "0893a32b929905a3",
        "name": "Nidus_Temp",
        "links": [
            "efd70bd2950f7343"
        ],
        "x": 365,
        "y": 660,
        "wires": [
            [
                "0d096b2d0805b26a"
            ]
        ]
    },
    {
        "id": "acbc206c85052f97",
        "type": "ui_gauge",
        "z": "0893a32b929905a3",
        "name": "",
        "group": "da05c7d57d590aff",
        "order": 3,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "MilliWatt",
        "label": "MilliWatt",
        "format": "{{value}}",
        "min": 0,
        "max": "10000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 620,
        "y": 180,
        "wires": []
    },
    {
        "id": "564c8201a9464f48",
        "type": "function",
        "z": "0893a32b929905a3",
        "name": "Return_RamGo",
        "func": "msg.payload = msg.payload*(0.04);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 420,
        "wires": [
            [
                "ddb683c969d0cd70"
            ]
        ]
    },
    {
        "id": "8c4c83eecd9956c3",
        "type": "function",
        "z": "0893a32b929905a3",
        "name": "Return_RAM_GO",
        "func": "msg.payload = msg.payload * (0.04);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 580,
        "wires": [
            [
                "b3e72f17a8609d51"
            ]
        ]
    }
]